
magic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a58  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009ac  08005b68  08005b68  00015b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006514  08006514  00016514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006518  08006518  00016518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000088  20000000  0800651c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000018e4  20000088  080065a4  00020088  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000196c  080065a4  0002196c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  9 .debug_info   000269c7  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004c93  00000000  00000000  00046a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009866  00000000  00000000  0004b70b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c58  00000000  00000000  00054f78  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001488  00000000  00000000  00055bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00008d84  00000000  00000000  00057058  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000437c  00000000  00000000  0005fddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00064158  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002a08  00000000  00000000  000641d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	08005b50 	.word	0x08005b50

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	08005b50 	.word	0x08005b50

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__gedf2>:
 80008e4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008e8:	e006      	b.n	80008f8 <__cmpdf2+0x4>
 80008ea:	bf00      	nop

080008ec <__ledf2>:
 80008ec:	f04f 0c01 	mov.w	ip, #1
 80008f0:	e002      	b.n	80008f8 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__cmpdf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000904:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800090e:	d01b      	beq.n	8000948 <__cmpdf2+0x54>
 8000910:	b001      	add	sp, #4
 8000912:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000916:	bf0c      	ite	eq
 8000918:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800091c:	ea91 0f03 	teqne	r1, r3
 8000920:	bf02      	ittt	eq
 8000922:	ea90 0f02 	teqeq	r0, r2
 8000926:	2000      	moveq	r0, #0
 8000928:	4770      	bxeq	lr
 800092a:	f110 0f00 	cmn.w	r0, #0
 800092e:	ea91 0f03 	teq	r1, r3
 8000932:	bf58      	it	pl
 8000934:	4299      	cmppl	r1, r3
 8000936:	bf08      	it	eq
 8000938:	4290      	cmpeq	r0, r2
 800093a:	bf2c      	ite	cs
 800093c:	17d8      	asrcs	r0, r3, #31
 800093e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000942:	f040 0001 	orr.w	r0, r0, #1
 8000946:	4770      	bx	lr
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	d102      	bne.n	8000958 <__cmpdf2+0x64>
 8000952:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000956:	d107      	bne.n	8000968 <__cmpdf2+0x74>
 8000958:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d1d6      	bne.n	8000910 <__cmpdf2+0x1c>
 8000962:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000966:	d0d3      	beq.n	8000910 <__cmpdf2+0x1c>
 8000968:	f85d 0b04 	ldr.w	r0, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <__aeabi_cdrcmple>:
 8000970:	4684      	mov	ip, r0
 8000972:	4610      	mov	r0, r2
 8000974:	4662      	mov	r2, ip
 8000976:	468c      	mov	ip, r1
 8000978:	4619      	mov	r1, r3
 800097a:	4663      	mov	r3, ip
 800097c:	e000      	b.n	8000980 <__aeabi_cdcmpeq>
 800097e:	bf00      	nop

08000980 <__aeabi_cdcmpeq>:
 8000980:	b501      	push	{r0, lr}
 8000982:	f7ff ffb7 	bl	80008f4 <__cmpdf2>
 8000986:	2800      	cmp	r0, #0
 8000988:	bf48      	it	mi
 800098a:	f110 0f00 	cmnmi.w	r0, #0
 800098e:	bd01      	pop	{r0, pc}

08000990 <__aeabi_dcmpeq>:
 8000990:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000994:	f7ff fff4 	bl	8000980 <__aeabi_cdcmpeq>
 8000998:	bf0c      	ite	eq
 800099a:	2001      	moveq	r0, #1
 800099c:	2000      	movne	r0, #0
 800099e:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a2:	bf00      	nop

080009a4 <__aeabi_dcmplt>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff ffea 	bl	8000980 <__aeabi_cdcmpeq>
 80009ac:	bf34      	ite	cc
 80009ae:	2001      	movcc	r0, #1
 80009b0:	2000      	movcs	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmple>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffe0 	bl	8000980 <__aeabi_cdcmpeq>
 80009c0:	bf94      	ite	ls
 80009c2:	2001      	movls	r0, #1
 80009c4:	2000      	movhi	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmpge>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffce 	bl	8000970 <__aeabi_cdrcmple>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpgt>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffc4 	bl	8000970 <__aeabi_cdrcmple>
 80009e8:	bf34      	ite	cc
 80009ea:	2001      	movcc	r0, #1
 80009ec:	2000      	movcs	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_d2iz>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009fc:	d215      	bcs.n	8000a2a <__aeabi_d2iz+0x36>
 80009fe:	d511      	bpl.n	8000a24 <__aeabi_d2iz+0x30>
 8000a00:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a04:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a08:	d912      	bls.n	8000a30 <__aeabi_d2iz+0x3c>
 8000a0a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a12:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a1e:	bf18      	it	ne
 8000a20:	4240      	negne	r0, r0
 8000a22:	4770      	bx	lr
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a2e:	d105      	bne.n	8000a3c <__aeabi_d2iz+0x48>
 8000a30:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	bf08      	it	eq
 8000a36:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_frsub>:
 8000a44:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a48:	e002      	b.n	8000a50 <__addsf3>
 8000a4a:	bf00      	nop

08000a4c <__aeabi_fsub>:
 8000a4c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a50 <__addsf3>:
 8000a50:	0042      	lsls	r2, r0, #1
 8000a52:	bf1f      	itttt	ne
 8000a54:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a58:	ea92 0f03 	teqne	r2, r3
 8000a5c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a60:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a64:	d06a      	beq.n	8000b3c <__addsf3+0xec>
 8000a66:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a6a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a6e:	bfc1      	itttt	gt
 8000a70:	18d2      	addgt	r2, r2, r3
 8000a72:	4041      	eorgt	r1, r0
 8000a74:	4048      	eorgt	r0, r1
 8000a76:	4041      	eorgt	r1, r0
 8000a78:	bfb8      	it	lt
 8000a7a:	425b      	neglt	r3, r3
 8000a7c:	2b19      	cmp	r3, #25
 8000a7e:	bf88      	it	hi
 8000a80:	4770      	bxhi	lr
 8000a82:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a8a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a8e:	bf18      	it	ne
 8000a90:	4240      	negne	r0, r0
 8000a92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a96:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a9a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a9e:	bf18      	it	ne
 8000aa0:	4249      	negne	r1, r1
 8000aa2:	ea92 0f03 	teq	r2, r3
 8000aa6:	d03f      	beq.n	8000b28 <__addsf3+0xd8>
 8000aa8:	f1a2 0201 	sub.w	r2, r2, #1
 8000aac:	fa41 fc03 	asr.w	ip, r1, r3
 8000ab0:	eb10 000c 	adds.w	r0, r0, ip
 8000ab4:	f1c3 0320 	rsb	r3, r3, #32
 8000ab8:	fa01 f103 	lsl.w	r1, r1, r3
 8000abc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ac0:	d502      	bpl.n	8000ac8 <__addsf3+0x78>
 8000ac2:	4249      	negs	r1, r1
 8000ac4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ac8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000acc:	d313      	bcc.n	8000af6 <__addsf3+0xa6>
 8000ace:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ad2:	d306      	bcc.n	8000ae2 <__addsf3+0x92>
 8000ad4:	0840      	lsrs	r0, r0, #1
 8000ad6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ada:	f102 0201 	add.w	r2, r2, #1
 8000ade:	2afe      	cmp	r2, #254	; 0xfe
 8000ae0:	d251      	bcs.n	8000b86 <__addsf3+0x136>
 8000ae2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ae6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aea:	bf08      	it	eq
 8000aec:	f020 0001 	biceq.w	r0, r0, #1
 8000af0:	ea40 0003 	orr.w	r0, r0, r3
 8000af4:	4770      	bx	lr
 8000af6:	0049      	lsls	r1, r1, #1
 8000af8:	eb40 0000 	adc.w	r0, r0, r0
 8000afc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	d1ed      	bne.n	8000ae2 <__addsf3+0x92>
 8000b06:	fab0 fc80 	clz	ip, r0
 8000b0a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b0e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b12:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b16:	bfaa      	itet	ge
 8000b18:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b1c:	4252      	neglt	r2, r2
 8000b1e:	4318      	orrge	r0, r3
 8000b20:	bfbc      	itt	lt
 8000b22:	40d0      	lsrlt	r0, r2
 8000b24:	4318      	orrlt	r0, r3
 8000b26:	4770      	bx	lr
 8000b28:	f092 0f00 	teq	r2, #0
 8000b2c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b30:	bf06      	itte	eq
 8000b32:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b36:	3201      	addeq	r2, #1
 8000b38:	3b01      	subne	r3, #1
 8000b3a:	e7b5      	b.n	8000aa8 <__addsf3+0x58>
 8000b3c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b44:	bf18      	it	ne
 8000b46:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b4a:	d021      	beq.n	8000b90 <__addsf3+0x140>
 8000b4c:	ea92 0f03 	teq	r2, r3
 8000b50:	d004      	beq.n	8000b5c <__addsf3+0x10c>
 8000b52:	f092 0f00 	teq	r2, #0
 8000b56:	bf08      	it	eq
 8000b58:	4608      	moveq	r0, r1
 8000b5a:	4770      	bx	lr
 8000b5c:	ea90 0f01 	teq	r0, r1
 8000b60:	bf1c      	itt	ne
 8000b62:	2000      	movne	r0, #0
 8000b64:	4770      	bxne	lr
 8000b66:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b6a:	d104      	bne.n	8000b76 <__addsf3+0x126>
 8000b6c:	0040      	lsls	r0, r0, #1
 8000b6e:	bf28      	it	cs
 8000b70:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b74:	4770      	bx	lr
 8000b76:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b7a:	bf3c      	itt	cc
 8000b7c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b80:	4770      	bxcc	lr
 8000b82:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b86:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8e:	4770      	bx	lr
 8000b90:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b94:	bf16      	itet	ne
 8000b96:	4608      	movne	r0, r1
 8000b98:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b9c:	4601      	movne	r1, r0
 8000b9e:	0242      	lsls	r2, r0, #9
 8000ba0:	bf06      	itte	eq
 8000ba2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ba6:	ea90 0f01 	teqeq	r0, r1
 8000baa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bae:	4770      	bx	lr

08000bb0 <__aeabi_ui2f>:
 8000bb0:	f04f 0300 	mov.w	r3, #0
 8000bb4:	e004      	b.n	8000bc0 <__aeabi_i2f+0x8>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_i2f>:
 8000bb8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bbc:	bf48      	it	mi
 8000bbe:	4240      	negmi	r0, r0
 8000bc0:	ea5f 0c00 	movs.w	ip, r0
 8000bc4:	bf08      	it	eq
 8000bc6:	4770      	bxeq	lr
 8000bc8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bcc:	4601      	mov	r1, r0
 8000bce:	f04f 0000 	mov.w	r0, #0
 8000bd2:	e01c      	b.n	8000c0e <__aeabi_l2f+0x2a>

08000bd4 <__aeabi_ul2f>:
 8000bd4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bd8:	bf08      	it	eq
 8000bda:	4770      	bxeq	lr
 8000bdc:	f04f 0300 	mov.w	r3, #0
 8000be0:	e00a      	b.n	8000bf8 <__aeabi_l2f+0x14>
 8000be2:	bf00      	nop

08000be4 <__aeabi_l2f>:
 8000be4:	ea50 0201 	orrs.w	r2, r0, r1
 8000be8:	bf08      	it	eq
 8000bea:	4770      	bxeq	lr
 8000bec:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bf0:	d502      	bpl.n	8000bf8 <__aeabi_l2f+0x14>
 8000bf2:	4240      	negs	r0, r0
 8000bf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf8:	ea5f 0c01 	movs.w	ip, r1
 8000bfc:	bf02      	ittt	eq
 8000bfe:	4684      	moveq	ip, r0
 8000c00:	4601      	moveq	r1, r0
 8000c02:	2000      	moveq	r0, #0
 8000c04:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c08:	bf08      	it	eq
 8000c0a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c0e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c12:	fabc f28c 	clz	r2, ip
 8000c16:	3a08      	subs	r2, #8
 8000c18:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c1c:	db10      	blt.n	8000c40 <__aeabi_l2f+0x5c>
 8000c1e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c22:	4463      	add	r3, ip
 8000c24:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c28:	f1c2 0220 	rsb	r2, r2, #32
 8000c2c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c30:	fa20 f202 	lsr.w	r2, r0, r2
 8000c34:	eb43 0002 	adc.w	r0, r3, r2
 8000c38:	bf08      	it	eq
 8000c3a:	f020 0001 	biceq.w	r0, r0, #1
 8000c3e:	4770      	bx	lr
 8000c40:	f102 0220 	add.w	r2, r2, #32
 8000c44:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c48:	f1c2 0220 	rsb	r2, r2, #32
 8000c4c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c50:	fa21 f202 	lsr.w	r2, r1, r2
 8000c54:	eb43 0002 	adc.w	r0, r3, r2
 8000c58:	bf08      	it	eq
 8000c5a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c5e:	4770      	bx	lr

08000c60 <__aeabi_fmul>:
 8000c60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c68:	bf1e      	ittt	ne
 8000c6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c6e:	ea92 0f0c 	teqne	r2, ip
 8000c72:	ea93 0f0c 	teqne	r3, ip
 8000c76:	d06f      	beq.n	8000d58 <__aeabi_fmul+0xf8>
 8000c78:	441a      	add	r2, r3
 8000c7a:	ea80 0c01 	eor.w	ip, r0, r1
 8000c7e:	0240      	lsls	r0, r0, #9
 8000c80:	bf18      	it	ne
 8000c82:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c86:	d01e      	beq.n	8000cc6 <__aeabi_fmul+0x66>
 8000c88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c8c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c90:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c94:	fba0 3101 	umull	r3, r1, r0, r1
 8000c98:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c9c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ca0:	bf3e      	ittt	cc
 8000ca2:	0049      	lslcc	r1, r1, #1
 8000ca4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ca8:	005b      	lslcc	r3, r3, #1
 8000caa:	ea40 0001 	orr.w	r0, r0, r1
 8000cae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cb2:	2afd      	cmp	r2, #253	; 0xfd
 8000cb4:	d81d      	bhi.n	8000cf2 <__aeabi_fmul+0x92>
 8000cb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cbe:	bf08      	it	eq
 8000cc0:	f020 0001 	biceq.w	r0, r0, #1
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cce:	bf08      	it	eq
 8000cd0:	0249      	lsleq	r1, r1, #9
 8000cd2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cd6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cda:	3a7f      	subs	r2, #127	; 0x7f
 8000cdc:	bfc2      	ittt	gt
 8000cde:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ce2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ce6:	4770      	bxgt	lr
 8000ce8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cec:	f04f 0300 	mov.w	r3, #0
 8000cf0:	3a01      	subs	r2, #1
 8000cf2:	dc5d      	bgt.n	8000db0 <__aeabi_fmul+0x150>
 8000cf4:	f112 0f19 	cmn.w	r2, #25
 8000cf8:	bfdc      	itt	le
 8000cfa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cfe:	4770      	bxle	lr
 8000d00:	f1c2 0200 	rsb	r2, r2, #0
 8000d04:	0041      	lsls	r1, r0, #1
 8000d06:	fa21 f102 	lsr.w	r1, r1, r2
 8000d0a:	f1c2 0220 	rsb	r2, r2, #32
 8000d0e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d12:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d16:	f140 0000 	adc.w	r0, r0, #0
 8000d1a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d1e:	bf08      	it	eq
 8000d20:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d24:	4770      	bx	lr
 8000d26:	f092 0f00 	teq	r2, #0
 8000d2a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d2e:	bf02      	ittt	eq
 8000d30:	0040      	lsleq	r0, r0, #1
 8000d32:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d36:	3a01      	subeq	r2, #1
 8000d38:	d0f9      	beq.n	8000d2e <__aeabi_fmul+0xce>
 8000d3a:	ea40 000c 	orr.w	r0, r0, ip
 8000d3e:	f093 0f00 	teq	r3, #0
 8000d42:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d46:	bf02      	ittt	eq
 8000d48:	0049      	lsleq	r1, r1, #1
 8000d4a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d4e:	3b01      	subeq	r3, #1
 8000d50:	d0f9      	beq.n	8000d46 <__aeabi_fmul+0xe6>
 8000d52:	ea41 010c 	orr.w	r1, r1, ip
 8000d56:	e78f      	b.n	8000c78 <__aeabi_fmul+0x18>
 8000d58:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d5c:	ea92 0f0c 	teq	r2, ip
 8000d60:	bf18      	it	ne
 8000d62:	ea93 0f0c 	teqne	r3, ip
 8000d66:	d00a      	beq.n	8000d7e <__aeabi_fmul+0x11e>
 8000d68:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d6c:	bf18      	it	ne
 8000d6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d72:	d1d8      	bne.n	8000d26 <__aeabi_fmul+0xc6>
 8000d74:	ea80 0001 	eor.w	r0, r0, r1
 8000d78:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d7c:	4770      	bx	lr
 8000d7e:	f090 0f00 	teq	r0, #0
 8000d82:	bf17      	itett	ne
 8000d84:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d88:	4608      	moveq	r0, r1
 8000d8a:	f091 0f00 	teqne	r1, #0
 8000d8e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d92:	d014      	beq.n	8000dbe <__aeabi_fmul+0x15e>
 8000d94:	ea92 0f0c 	teq	r2, ip
 8000d98:	d101      	bne.n	8000d9e <__aeabi_fmul+0x13e>
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	d10f      	bne.n	8000dbe <__aeabi_fmul+0x15e>
 8000d9e:	ea93 0f0c 	teq	r3, ip
 8000da2:	d103      	bne.n	8000dac <__aeabi_fmul+0x14c>
 8000da4:	024b      	lsls	r3, r1, #9
 8000da6:	bf18      	it	ne
 8000da8:	4608      	movne	r0, r1
 8000daa:	d108      	bne.n	8000dbe <__aeabi_fmul+0x15e>
 8000dac:	ea80 0001 	eor.w	r0, r0, r1
 8000db0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000db4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000db8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dbc:	4770      	bx	lr
 8000dbe:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dc2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dc6:	4770      	bx	lr

08000dc8 <__aeabi_fdiv>:
 8000dc8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dcc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dd0:	bf1e      	ittt	ne
 8000dd2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dd6:	ea92 0f0c 	teqne	r2, ip
 8000dda:	ea93 0f0c 	teqne	r3, ip
 8000dde:	d069      	beq.n	8000eb4 <__aeabi_fdiv+0xec>
 8000de0:	eba2 0203 	sub.w	r2, r2, r3
 8000de4:	ea80 0c01 	eor.w	ip, r0, r1
 8000de8:	0249      	lsls	r1, r1, #9
 8000dea:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dee:	d037      	beq.n	8000e60 <__aeabi_fdiv+0x98>
 8000df0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000df4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000df8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000dfc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e00:	428b      	cmp	r3, r1
 8000e02:	bf38      	it	cc
 8000e04:	005b      	lslcc	r3, r3, #1
 8000e06:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e0a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	bf24      	itt	cs
 8000e12:	1a5b      	subcs	r3, r3, r1
 8000e14:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e18:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e1c:	bf24      	itt	cs
 8000e1e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e22:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e26:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e2a:	bf24      	itt	cs
 8000e2c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e30:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e34:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e38:	bf24      	itt	cs
 8000e3a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e3e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e42:	011b      	lsls	r3, r3, #4
 8000e44:	bf18      	it	ne
 8000e46:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e4a:	d1e0      	bne.n	8000e0e <__aeabi_fdiv+0x46>
 8000e4c:	2afd      	cmp	r2, #253	; 0xfd
 8000e4e:	f63f af50 	bhi.w	8000cf2 <__aeabi_fmul+0x92>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e58:	bf08      	it	eq
 8000e5a:	f020 0001 	biceq.w	r0, r0, #1
 8000e5e:	4770      	bx	lr
 8000e60:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e64:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e68:	327f      	adds	r2, #127	; 0x7f
 8000e6a:	bfc2      	ittt	gt
 8000e6c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e70:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e74:	4770      	bxgt	lr
 8000e76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e7a:	f04f 0300 	mov.w	r3, #0
 8000e7e:	3a01      	subs	r2, #1
 8000e80:	e737      	b.n	8000cf2 <__aeabi_fmul+0x92>
 8000e82:	f092 0f00 	teq	r2, #0
 8000e86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0040      	lsleq	r0, r0, #1
 8000e8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e92:	3a01      	subeq	r2, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fdiv+0xc2>
 8000e96:	ea40 000c 	orr.w	r0, r0, ip
 8000e9a:	f093 0f00 	teq	r3, #0
 8000e9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0049      	lsleq	r1, r1, #1
 8000ea6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eaa:	3b01      	subeq	r3, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fdiv+0xda>
 8000eae:	ea41 010c 	orr.w	r1, r1, ip
 8000eb2:	e795      	b.n	8000de0 <__aeabi_fdiv+0x18>
 8000eb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d108      	bne.n	8000ed0 <__aeabi_fdiv+0x108>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	f47f af7d 	bne.w	8000dbe <__aeabi_fmul+0x15e>
 8000ec4:	ea93 0f0c 	teq	r3, ip
 8000ec8:	f47f af70 	bne.w	8000dac <__aeabi_fmul+0x14c>
 8000ecc:	4608      	mov	r0, r1
 8000ece:	e776      	b.n	8000dbe <__aeabi_fmul+0x15e>
 8000ed0:	ea93 0f0c 	teq	r3, ip
 8000ed4:	d104      	bne.n	8000ee0 <__aeabi_fdiv+0x118>
 8000ed6:	024b      	lsls	r3, r1, #9
 8000ed8:	f43f af4c 	beq.w	8000d74 <__aeabi_fmul+0x114>
 8000edc:	4608      	mov	r0, r1
 8000ede:	e76e      	b.n	8000dbe <__aeabi_fmul+0x15e>
 8000ee0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ee4:	bf18      	it	ne
 8000ee6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eea:	d1ca      	bne.n	8000e82 <__aeabi_fdiv+0xba>
 8000eec:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ef0:	f47f af5c 	bne.w	8000dac <__aeabi_fmul+0x14c>
 8000ef4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ef8:	f47f af3c 	bne.w	8000d74 <__aeabi_fmul+0x114>
 8000efc:	e75f      	b.n	8000dbe <__aeabi_fmul+0x15e>
 8000efe:	bf00      	nop

08000f00 <__aeabi_f2iz>:
 8000f00:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f04:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f08:	d30f      	bcc.n	8000f2a <__aeabi_f2iz+0x2a>
 8000f0a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f0e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f12:	d90d      	bls.n	8000f30 <__aeabi_f2iz+0x30>
 8000f14:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f1c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f20:	fa23 f002 	lsr.w	r0, r3, r2
 8000f24:	bf18      	it	ne
 8000f26:	4240      	negne	r0, r0
 8000f28:	4770      	bx	lr
 8000f2a:	f04f 0000 	mov.w	r0, #0
 8000f2e:	4770      	bx	lr
 8000f30:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f34:	d101      	bne.n	8000f3a <__aeabi_f2iz+0x3a>
 8000f36:	0242      	lsls	r2, r0, #9
 8000f38:	d105      	bne.n	8000f46 <__aeabi_f2iz+0x46>
 8000f3a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f3e:	bf08      	it	eq
 8000f40:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f44:	4770      	bx	lr
 8000f46:	f04f 0000 	mov.w	r0, #0
 8000f4a:	4770      	bx	lr

08000f4c <HAL_InitTick>:
 *       The function is declared as __weak  to be overwritten  in case of other
 *       implementation  in user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8000f4c:	b538      	push	{r3, r4, r5, lr}
	/* Configure the SysTick to have interrupt in 1ms time basis*/
	if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U) {
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <HAL_InitTick+0x3c>)
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8000f50:	4605      	mov	r5, r0
	if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U) {
 8000f52:	7818      	ldrb	r0, [r3, #0]
 8000f54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f58:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f5c:	4a0b      	ldr	r2, [pc, #44]	; (8000f8c <HAL_InitTick+0x40>)
 8000f5e:	6810      	ldr	r0, [r2, #0]
 8000f60:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f64:	f000 f8ac 	bl	80010c0 <HAL_SYSTICK_Config>
 8000f68:	4604      	mov	r4, r0
 8000f6a:	b958      	cbnz	r0, 8000f84 <HAL_InitTick+0x38>
		return HAL_ERROR;
	}

	/* Configure the SysTick IRQ priority */
	if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 8000f6c:	2d0f      	cmp	r5, #15
 8000f6e:	d809      	bhi.n	8000f84 <HAL_InitTick+0x38>
		HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f70:	4602      	mov	r2, r0
 8000f72:	4629      	mov	r1, r5
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f78:	f000 f854 	bl	8001024 <HAL_NVIC_SetPriority>
		uwTickPrio = TickPriority;
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <HAL_InitTick+0x44>)
 8000f7e:	4620      	mov	r0, r4
 8000f80:	601d      	str	r5, [r3, #0]
 8000f82:	bd38      	pop	{r3, r4, r5, pc}
		return HAL_ERROR;
 8000f84:	2001      	movs	r0, #1
		return HAL_ERROR;
	}

	/* Return function status */
	return HAL_OK;
}
 8000f86:	bd38      	pop	{r3, r4, r5, pc}
 8000f88:	20000000 	.word	0x20000000
 8000f8c:	20000020 	.word	0x20000020
 8000f90:	20000004 	.word	0x20000004

08000f94 <HAL_Init>:
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f94:	4a07      	ldr	r2, [pc, #28]	; (8000fb4 <HAL_Init+0x20>)
HAL_StatusTypeDef HAL_Init(void) {
 8000f96:	b508      	push	{r3, lr}
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f98:	6813      	ldr	r3, [r2, #0]
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9a:	2003      	movs	r0, #3
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f9c:	f043 0310 	orr.w	r3, r3, #16
 8000fa0:	6013      	str	r3, [r2, #0]
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa2:	f000 f82d 	bl	8001000 <HAL_NVIC_SetPriorityGrouping>
	HAL_InitTick(TICK_INT_PRIORITY);
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f7ff ffd0 	bl	8000f4c <HAL_InitTick>
	HAL_MspInit();
 8000fac:	f003 ffe8 	bl	8004f80 <HAL_MspInit>
}
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	bd08      	pop	{r3, pc}
 8000fb4:	40022000 	.word	0x40022000

08000fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
	uwTick += uwTickFreq;
 8000fb8:	4a03      	ldr	r2, [pc, #12]	; (8000fc8 <HAL_IncTick+0x10>)
 8000fba:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <HAL_IncTick+0x14>)
 8000fbc:	6811      	ldr	r1, [r2, #0]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	440b      	add	r3, r1
 8000fc2:	6013      	str	r3, [r2, #0]
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	2000052c 	.word	0x2000052c
 8000fcc:	20000000 	.word	0x20000000

08000fd0 <HAL_GetTick>:
 * @note  This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
	return uwTick;
 8000fd0:	4b01      	ldr	r3, [pc, #4]	; (8000fd8 <HAL_GetTick+0x8>)
 8000fd2:	6818      	ldr	r0, [r3, #0]
}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	2000052c 	.word	0x2000052c

08000fdc <HAL_Delay>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @param Delay specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay) {
 8000fdc:	b538      	push	{r3, r4, r5, lr}
 8000fde:	4604      	mov	r4, r0
	uint32_t tickstart = HAL_GetTick();
 8000fe0:	f7ff fff6 	bl	8000fd0 <HAL_GetTick>
 8000fe4:	4605      	mov	r5, r0
	uint32_t wait = Delay;

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY) {
 8000fe6:	1c63      	adds	r3, r4, #1
		wait += (uint32_t) (uwTickFreq);
 8000fe8:	bf1e      	ittt	ne
 8000fea:	4b04      	ldrne	r3, [pc, #16]	; (8000ffc <HAL_Delay+0x20>)
 8000fec:	781b      	ldrbne	r3, [r3, #0]
 8000fee:	18e4      	addne	r4, r4, r3
	}

	while ((HAL_GetTick() - tickstart) < wait) {
 8000ff0:	f7ff ffee 	bl	8000fd0 <HAL_GetTick>
 8000ff4:	1b40      	subs	r0, r0, r5
 8000ff6:	4284      	cmp	r4, r0
 8000ff8:	d8fa      	bhi.n	8000ff0 <HAL_Delay+0x14>
	}
}
 8000ffa:	bd38      	pop	{r3, r4, r5, pc}
 8000ffc:	20000000 	.word	0x20000000

08001000 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001000:	4a07      	ldr	r2, [pc, #28]	; (8001020 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001002:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001004:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001006:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800100e:	041b      	lsls	r3, r3, #16
 8001010:	0c1b      	lsrs	r3, r3, #16
 8001012:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800101a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800101c:	60d3      	str	r3, [r2, #12]
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001024:	4b17      	ldr	r3, [pc, #92]	; (8001084 <HAL_NVIC_SetPriority+0x60>)
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority) {
 8001026:	b530      	push	{r4, r5, lr}
 8001028:	68dc      	ldr	r4, [r3, #12]
 800102a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800102e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001032:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001034:	2b04      	cmp	r3, #4
 8001036:	bf28      	it	cs
 8001038:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001040:	bf98      	it	ls
 8001042:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	fa05 f303 	lsl.w	r3, r5, r3
 8001048:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104c:	bf88      	it	hi
 800104e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	4019      	ands	r1, r3
 8001052:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001054:	fa05 f404 	lsl.w	r4, r5, r4
 8001058:	3c01      	subs	r4, #1
 800105a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800105c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105e:	ea42 0201 	orr.w	r2, r2, r1
 8001062:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001066:	bfaf      	iteee	ge
 8001068:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106c:	4b06      	ldrlt	r3, [pc, #24]	; (8001088 <HAL_NVIC_SetPriority+0x64>)
 800106e:	f000 000f 	andlt.w	r0, r0, #15
 8001072:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001074:	bfa5      	ittet	ge
 8001076:	b2d2      	uxtbge	r2, r2
 8001078:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001082:	bd30      	pop	{r4, r5, pc}
 8001084:	e000ed00 	.word	0xe000ed00
 8001088:	e000ed14 	.word	0xe000ed14

0800108c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800108c:	2301      	movs	r3, #1
 800108e:	0942      	lsrs	r2, r0, #5
 8001090:	f000 001f 	and.w	r0, r0, #31
 8001094:	fa03 f000 	lsl.w	r0, r3, r0
 8001098:	4b01      	ldr	r3, [pc, #4]	; (80010a0 <HAL_NVIC_EnableIRQ+0x14>)
 800109a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800109e:	4770      	bx	lr
 80010a0:	e000e100 	.word	0xe000e100

080010a4 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80010a4:	2201      	movs	r2, #1
 80010a6:	0943      	lsrs	r3, r0, #5
 80010a8:	f000 001f 	and.w	r0, r0, #31
 80010ac:	fa02 f000 	lsl.w	r0, r2, r0
 80010b0:	4a02      	ldr	r2, [pc, #8]	; (80010bc <HAL_NVIC_DisableIRQ+0x18>)
 80010b2:	3320      	adds	r3, #32
 80010b4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000e100 	.word	0xe000e100

080010c0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c0:	3801      	subs	r0, #1
 80010c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80010c6:	d20a      	bcs.n	80010de <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c8:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010cc:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ce:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80010de:	2001      	movs	r0, #1
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb) {
	return SysTick_Config(TicksNumb);
}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000e010 	.word	0xe000e010
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80010f0:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80010f2:	4616      	mov	r6, r2
 80010f4:	4b65      	ldr	r3, [pc, #404]	; (800128c <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010f6:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800129c <HAL_GPIO_Init+0x1b0>
 80010fa:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80012a0 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80010fe:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001102:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8001104:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001108:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 800110c:	45a0      	cmp	r8, r4
 800110e:	d17f      	bne.n	8001210 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001110:	684d      	ldr	r5, [r1, #4]
 8001112:	2d12      	cmp	r5, #18
 8001114:	f000 80af 	beq.w	8001276 <HAL_GPIO_Init+0x18a>
 8001118:	f200 8088 	bhi.w	800122c <HAL_GPIO_Init+0x140>
 800111c:	2d02      	cmp	r5, #2
 800111e:	f000 80a7 	beq.w	8001270 <HAL_GPIO_Init+0x184>
 8001122:	d87c      	bhi.n	800121e <HAL_GPIO_Init+0x132>
 8001124:	2d00      	cmp	r5, #0
 8001126:	f000 808e 	beq.w	8001246 <HAL_GPIO_Init+0x15a>
 800112a:	2d01      	cmp	r5, #1
 800112c:	f000 809e 	beq.w	800126c <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001130:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001134:	2cff      	cmp	r4, #255	; 0xff
 8001136:	bf93      	iteet	ls
 8001138:	4682      	movls	sl, r0
 800113a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800113e:	3d08      	subhi	r5, #8
 8001140:	f8d0 b000 	ldrls.w	fp, [r0]
 8001144:	bf92      	itee	ls
 8001146:	00b5      	lslls	r5, r6, #2
 8001148:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800114c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800114e:	fa09 f805 	lsl.w	r8, r9, r5
 8001152:	ea2b 0808 	bic.w	r8, fp, r8
 8001156:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800115a:	bf88      	it	hi
 800115c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001160:	ea48 0505 	orr.w	r5, r8, r5
 8001164:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001168:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800116c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001170:	d04e      	beq.n	8001210 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001172:	4d47      	ldr	r5, [pc, #284]	; (8001290 <HAL_GPIO_Init+0x1a4>)
 8001174:	4f46      	ldr	r7, [pc, #280]	; (8001290 <HAL_GPIO_Init+0x1a4>)
 8001176:	69ad      	ldr	r5, [r5, #24]
 8001178:	f026 0803 	bic.w	r8, r6, #3
 800117c:	f045 0501 	orr.w	r5, r5, #1
 8001180:	61bd      	str	r5, [r7, #24]
 8001182:	69bd      	ldr	r5, [r7, #24]
 8001184:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001188:	f005 0501 	and.w	r5, r5, #1
 800118c:	9501      	str	r5, [sp, #4]
 800118e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001192:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001196:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001198:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 800119c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80011a0:	fa09 f90b 	lsl.w	r9, r9, fp
 80011a4:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011a8:	4d3a      	ldr	r5, [pc, #232]	; (8001294 <HAL_GPIO_Init+0x1a8>)
 80011aa:	42a8      	cmp	r0, r5
 80011ac:	d068      	beq.n	8001280 <HAL_GPIO_Init+0x194>
 80011ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011b2:	42a8      	cmp	r0, r5
 80011b4:	d066      	beq.n	8001284 <HAL_GPIO_Init+0x198>
 80011b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011ba:	42a8      	cmp	r0, r5
 80011bc:	d064      	beq.n	8001288 <HAL_GPIO_Init+0x19c>
 80011be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011c2:	42a8      	cmp	r0, r5
 80011c4:	bf0c      	ite	eq
 80011c6:	2503      	moveq	r5, #3
 80011c8:	2504      	movne	r5, #4
 80011ca:	fa05 f50b 	lsl.w	r5, r5, fp
 80011ce:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80011d2:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011d6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011d8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80011dc:	bf14      	ite	ne
 80011de:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011e0:	43a5      	biceq	r5, r4
 80011e2:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011e4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011e6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80011ea:	bf14      	ite	ne
 80011ec:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011ee:	43a5      	biceq	r5, r4
 80011f0:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011f2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011f4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80011f8:	bf14      	ite	ne
 80011fa:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011fc:	43a5      	biceq	r5, r4
 80011fe:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001200:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001202:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001206:	bf14      	ite	ne
 8001208:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800120a:	ea25 0404 	biceq.w	r4, r5, r4
 800120e:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001210:	3601      	adds	r6, #1
 8001212:	2e10      	cmp	r6, #16
 8001214:	f47f af73 	bne.w	80010fe <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001218:	b003      	add	sp, #12
 800121a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800121e:	2d03      	cmp	r5, #3
 8001220:	d022      	beq.n	8001268 <HAL_GPIO_Init+0x17c>
 8001222:	2d11      	cmp	r5, #17
 8001224:	d184      	bne.n	8001130 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001226:	68ca      	ldr	r2, [r1, #12]
 8001228:	3204      	adds	r2, #4
          break;
 800122a:	e781      	b.n	8001130 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800122c:	4f1a      	ldr	r7, [pc, #104]	; (8001298 <HAL_GPIO_Init+0x1ac>)
 800122e:	42bd      	cmp	r5, r7
 8001230:	d009      	beq.n	8001246 <HAL_GPIO_Init+0x15a>
 8001232:	d812      	bhi.n	800125a <HAL_GPIO_Init+0x16e>
 8001234:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80012a4 <HAL_GPIO_Init+0x1b8>
 8001238:	454d      	cmp	r5, r9
 800123a:	d004      	beq.n	8001246 <HAL_GPIO_Init+0x15a>
 800123c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001240:	454d      	cmp	r5, r9
 8001242:	f47f af75 	bne.w	8001130 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001246:	688a      	ldr	r2, [r1, #8]
 8001248:	b1c2      	cbz	r2, 800127c <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800124a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800124c:	bf0c      	ite	eq
 800124e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001252:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001256:	2208      	movs	r2, #8
 8001258:	e76a      	b.n	8001130 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800125a:	4575      	cmp	r5, lr
 800125c:	d0f3      	beq.n	8001246 <HAL_GPIO_Init+0x15a>
 800125e:	4565      	cmp	r5, ip
 8001260:	d0f1      	beq.n	8001246 <HAL_GPIO_Init+0x15a>
 8001262:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80012a8 <HAL_GPIO_Init+0x1bc>
 8001266:	e7eb      	b.n	8001240 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001268:	2200      	movs	r2, #0
 800126a:	e761      	b.n	8001130 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800126c:	68ca      	ldr	r2, [r1, #12]
          break;
 800126e:	e75f      	b.n	8001130 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001270:	68ca      	ldr	r2, [r1, #12]
 8001272:	3208      	adds	r2, #8
          break;
 8001274:	e75c      	b.n	8001130 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001276:	68ca      	ldr	r2, [r1, #12]
 8001278:	320c      	adds	r2, #12
          break;
 800127a:	e759      	b.n	8001130 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800127c:	2204      	movs	r2, #4
 800127e:	e757      	b.n	8001130 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001280:	2500      	movs	r5, #0
 8001282:	e7a2      	b.n	80011ca <HAL_GPIO_Init+0xde>
 8001284:	2501      	movs	r5, #1
 8001286:	e7a0      	b.n	80011ca <HAL_GPIO_Init+0xde>
 8001288:	2502      	movs	r5, #2
 800128a:	e79e      	b.n	80011ca <HAL_GPIO_Init+0xde>
 800128c:	40010400 	.word	0x40010400
 8001290:	40021000 	.word	0x40021000
 8001294:	40010800 	.word	0x40010800
 8001298:	10210000 	.word	0x10210000
 800129c:	10310000 	.word	0x10310000
 80012a0:	10320000 	.word	0x10320000
 80012a4:	10110000 	.word	0x10110000
 80012a8:	10220000 	.word	0x10220000

080012ac <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012ac:	6883      	ldr	r3, [r0, #8]
 80012ae:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80012b0:	bf14      	ite	ne
 80012b2:	2001      	movne	r0, #1
 80012b4:	2000      	moveq	r0, #0
 80012b6:	4770      	bx	lr

080012b8 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80012b8:	6802      	ldr	r2, [r0, #0]
 80012ba:	6953      	ldr	r3, [r2, #20]
 80012bc:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80012c0:	d00d      	beq.n	80012de <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012c2:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80012c6:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80012c8:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 80012ca:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80012cc:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012d2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 80012d6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 80012da:	2001      	movs	r0, #1
 80012dc:	4770      	bx	lr
  }
  return HAL_OK;
 80012de:	4618      	mov	r0, r3
}
 80012e0:	4770      	bx	lr

080012e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80012e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012e6:	4604      	mov	r4, r0
 80012e8:	4617      	mov	r7, r2
 80012ea:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80012ec:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80012f0:	b28e      	uxth	r6, r1
 80012f2:	6825      	ldr	r5, [r4, #0]
 80012f4:	f1b8 0f01 	cmp.w	r8, #1
 80012f8:	bf0c      	ite	eq
 80012fa:	696b      	ldreq	r3, [r5, #20]
 80012fc:	69ab      	ldrne	r3, [r5, #24]
 80012fe:	ea36 0303 	bics.w	r3, r6, r3
 8001302:	bf14      	ite	ne
 8001304:	2001      	movne	r0, #1
 8001306:	2000      	moveq	r0, #0
 8001308:	b908      	cbnz	r0, 800130e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 800130a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800130e:	696b      	ldr	r3, [r5, #20]
 8001310:	055a      	lsls	r2, r3, #21
 8001312:	d512      	bpl.n	800133a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001314:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 8001316:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001318:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800131c:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800131e:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001322:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001324:	2304      	movs	r3, #4
 8001326:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8001328:	2300      	movs	r3, #0
      return HAL_ERROR;
 800132a:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 800132c:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 800132e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8001332:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 800133a:	1c7b      	adds	r3, r7, #1
 800133c:	d0d9      	beq.n	80012f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800133e:	b94f      	cbnz	r7, 8001354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001340:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001342:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001344:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001346:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800134a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 800134e:	2003      	movs	r0, #3
 8001350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001354:	f7ff fe3c 	bl	8000fd0 <HAL_GetTick>
 8001358:	eba0 0009 	sub.w	r0, r0, r9
 800135c:	4287      	cmp	r7, r0
 800135e:	d2c8      	bcs.n	80012f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8001360:	e7ee      	b.n	8001340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08001362 <I2C_WaitOnFlagUntilTimeout>:
{
 8001362:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001366:	4604      	mov	r4, r0
 8001368:	4690      	mov	r8, r2
 800136a:	461f      	mov	r7, r3
 800136c:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800136e:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001372:	b28d      	uxth	r5, r1
 8001374:	6823      	ldr	r3, [r4, #0]
 8001376:	f1b9 0f01 	cmp.w	r9, #1
 800137a:	bf0c      	ite	eq
 800137c:	695b      	ldreq	r3, [r3, #20]
 800137e:	699b      	ldrne	r3, [r3, #24]
 8001380:	ea35 0303 	bics.w	r3, r5, r3
 8001384:	bf0c      	ite	eq
 8001386:	2301      	moveq	r3, #1
 8001388:	2300      	movne	r3, #0
 800138a:	4543      	cmp	r3, r8
 800138c:	d002      	beq.n	8001394 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 800138e:	2000      	movs	r0, #0
}
 8001390:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001394:	1c7b      	adds	r3, r7, #1
 8001396:	d0ed      	beq.n	8001374 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001398:	b95f      	cbnz	r7, 80013b2 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 800139a:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800139c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800139e:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80013a0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80013a4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80013a8:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80013aa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80013ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80013b2:	f7ff fe0d 	bl	8000fd0 <HAL_GetTick>
 80013b6:	1b80      	subs	r0, r0, r6
 80013b8:	4287      	cmp	r7, r0
 80013ba:	d2db      	bcs.n	8001374 <I2C_WaitOnFlagUntilTimeout+0x12>
 80013bc:	e7ed      	b.n	800139a <I2C_WaitOnFlagUntilTimeout+0x38>

080013be <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 80013be:	b570      	push	{r4, r5, r6, lr}
 80013c0:	4604      	mov	r4, r0
 80013c2:	460d      	mov	r5, r1
 80013c4:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80013c6:	6823      	ldr	r3, [r4, #0]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	061b      	lsls	r3, r3, #24
 80013cc:	d501      	bpl.n	80013d2 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 80013ce:	2000      	movs	r0, #0
 80013d0:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80013d2:	4620      	mov	r0, r4
 80013d4:	f7ff ff70 	bl	80012b8 <I2C_IsAcknowledgeFailed>
 80013d8:	b9a8      	cbnz	r0, 8001406 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80013da:	1c6a      	adds	r2, r5, #1
 80013dc:	d0f3      	beq.n	80013c6 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80013de:	b965      	cbnz	r5, 80013fa <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80013e2:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013e4:	f043 0320 	orr.w	r3, r3, #32
 80013e8:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80013ea:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 80013ec:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 80013ee:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80013f0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80013f4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80013f8:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80013fa:	f7ff fde9 	bl	8000fd0 <HAL_GetTick>
 80013fe:	1b80      	subs	r0, r0, r6
 8001400:	4285      	cmp	r5, r0
 8001402:	d2e0      	bcs.n	80013c6 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8001404:	e7ec      	b.n	80013e0 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001406:	2001      	movs	r0, #1
}
 8001408:	bd70      	pop	{r4, r5, r6, pc}
	...

0800140c <I2C_RequestMemoryWrite>:
{
 800140c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001410:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001412:	6802      	ldr	r2, [r0, #0]
{
 8001414:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001416:	6813      	ldr	r3, [r2, #0]
{
 8001418:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800141a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141e:	6013      	str	r3, [r2, #0]
{
 8001420:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001422:	9600      	str	r6, [sp, #0]
 8001424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001426:	2200      	movs	r2, #0
 8001428:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 800142c:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800142e:	f7ff ff98 	bl	8001362 <I2C_WaitOnFlagUntilTimeout>
 8001432:	b968      	cbnz	r0, 8001450 <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001434:	6823      	ldr	r3, [r4, #0]
 8001436:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 800143a:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800143c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800143e:	4633      	mov	r3, r6
 8001440:	491a      	ldr	r1, [pc, #104]	; (80014ac <I2C_RequestMemoryWrite+0xa0>)
 8001442:	4620      	mov	r0, r4
 8001444:	f7ff ff4d 	bl	80012e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001448:	b130      	cbz	r0, 8001458 <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800144a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800144c:	2b04      	cmp	r3, #4
 800144e:	d018      	beq.n	8001482 <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 8001450:	2003      	movs	r0, #3
}
 8001452:	b004      	add	sp, #16
 8001454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001458:	6823      	ldr	r3, [r4, #0]
 800145a:	9003      	str	r0, [sp, #12]
 800145c:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800145e:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001460:	9203      	str	r2, [sp, #12]
 8001462:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001464:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001466:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001468:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800146a:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800146c:	f7ff ffa7 	bl	80013be <I2C_WaitOnTXEFlagUntilTimeout>
 8001470:	b148      	cbz	r0, 8001486 <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001472:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001474:	2b04      	cmp	r3, #4
 8001476:	d1eb      	bne.n	8001450 <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001478:	6822      	ldr	r2, [r4, #0]
 800147a:	6813      	ldr	r3, [r2, #0]
 800147c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001480:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8001482:	2001      	movs	r0, #1
 8001484:	e7e5      	b.n	8001452 <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001486:	f1b8 0f01 	cmp.w	r8, #1
 800148a:	6823      	ldr	r3, [r4, #0]
 800148c:	d102      	bne.n	8001494 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800148e:	b2ed      	uxtb	r5, r5
 8001490:	611d      	str	r5, [r3, #16]
 8001492:	e7de      	b.n	8001452 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001494:	0a2a      	lsrs	r2, r5, #8
 8001496:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001498:	990a      	ldr	r1, [sp, #40]	; 0x28
 800149a:	4632      	mov	r2, r6
 800149c:	4620      	mov	r0, r4
 800149e:	f7ff ff8e 	bl	80013be <I2C_WaitOnTXEFlagUntilTimeout>
 80014a2:	2800      	cmp	r0, #0
 80014a4:	d1e5      	bne.n	8001472 <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80014a6:	6823      	ldr	r3, [r4, #0]
 80014a8:	e7f1      	b.n	800148e <I2C_RequestMemoryWrite+0x82>
 80014aa:	bf00      	nop
 80014ac:	00010002 	.word	0x00010002

080014b0 <I2C_RequestMemoryRead>:
{
 80014b0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80014b4:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80014b6:	6803      	ldr	r3, [r0, #0]
{
 80014b8:	4616      	mov	r6, r2
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80014ba:	681a      	ldr	r2, [r3, #0]
{
 80014bc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80014be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80014c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80014c4:	681a      	ldr	r2, [r3, #0]
{
 80014c6:	460f      	mov	r7, r1
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80014c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014cc:	601a      	str	r2, [r3, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80014ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80014d2:	9500      	str	r5, [sp, #0]
 80014d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014d6:	2200      	movs	r2, #0
{
 80014d8:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80014da:	f7ff ff42 	bl	8001362 <I2C_WaitOnFlagUntilTimeout>
 80014de:	b980      	cbnz	r0, 8001502 <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80014e0:	6823      	ldr	r3, [r4, #0]
 80014e2:	b2ff      	uxtb	r7, r7
 80014e4:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 80014e8:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80014ea:	492d      	ldr	r1, [pc, #180]	; (80015a0 <I2C_RequestMemoryRead+0xf0>)
 80014ec:	462b      	mov	r3, r5
 80014ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80014f0:	4620      	mov	r0, r4
 80014f2:	f7ff fef6 	bl	80012e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014f6:	b140      	cbz	r0, 800150a <I2C_RequestMemoryRead+0x5a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	d101      	bne.n	8001502 <I2C_RequestMemoryRead+0x52>
      return HAL_ERROR;
 80014fe:	2001      	movs	r0, #1
 8001500:	e000      	b.n	8001504 <I2C_RequestMemoryRead+0x54>
      return HAL_TIMEOUT;
 8001502:	2003      	movs	r0, #3
}
 8001504:	b004      	add	sp, #16
 8001506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800150a:	6823      	ldr	r3, [r4, #0]
 800150c:	9003      	str	r0, [sp, #12]
 800150e:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001510:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001512:	9203      	str	r2, [sp, #12]
 8001514:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001516:	462a      	mov	r2, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001518:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800151a:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800151c:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800151e:	f7ff ff4e 	bl	80013be <I2C_WaitOnTXEFlagUntilTimeout>
 8001522:	b140      	cbz	r0, 8001536 <I2C_RequestMemoryRead+0x86>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001524:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001526:	2b04      	cmp	r3, #4
 8001528:	d1eb      	bne.n	8001502 <I2C_RequestMemoryRead+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800152a:	6822      	ldr	r2, [r4, #0]
 800152c:	6813      	ldr	r3, [r2, #0]
 800152e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	e7e3      	b.n	80014fe <I2C_RequestMemoryRead+0x4e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001536:	f1b8 0f01 	cmp.w	r8, #1
 800153a:	6823      	ldr	r3, [r4, #0]
 800153c:	d124      	bne.n	8001588 <I2C_RequestMemoryRead+0xd8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800153e:	b2f6      	uxtb	r6, r6
 8001540:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001542:	462a      	mov	r2, r5
 8001544:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001546:	4620      	mov	r0, r4
 8001548:	f7ff ff39 	bl	80013be <I2C_WaitOnTXEFlagUntilTimeout>
 800154c:	4602      	mov	r2, r0
 800154e:	2800      	cmp	r0, #0
 8001550:	d1e8      	bne.n	8001524 <I2C_RequestMemoryRead+0x74>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001552:	6821      	ldr	r1, [r4, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001554:	4620      	mov	r0, r4
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001556:	680b      	ldr	r3, [r1, #0]
 8001558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155c:	600b      	str	r3, [r1, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800155e:	9500      	str	r5, [sp, #0]
 8001560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001562:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001566:	f7ff fefc 	bl	8001362 <I2C_WaitOnFlagUntilTimeout>
 800156a:	2800      	cmp	r0, #0
 800156c:	d1c9      	bne.n	8001502 <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800156e:	6823      	ldr	r3, [r4, #0]
 8001570:	f047 0701 	orr.w	r7, r7, #1
 8001574:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001576:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001578:	462b      	mov	r3, r5
 800157a:	4909      	ldr	r1, [pc, #36]	; (80015a0 <I2C_RequestMemoryRead+0xf0>)
 800157c:	4620      	mov	r0, r4
 800157e:	f7ff feb0 	bl	80012e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001582:	2800      	cmp	r0, #0
 8001584:	d1b8      	bne.n	80014f8 <I2C_RequestMemoryRead+0x48>
 8001586:	e7bd      	b.n	8001504 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001588:	0a32      	lsrs	r2, r6, #8
 800158a:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800158c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800158e:	462a      	mov	r2, r5
 8001590:	4620      	mov	r0, r4
 8001592:	f7ff ff14 	bl	80013be <I2C_WaitOnTXEFlagUntilTimeout>
 8001596:	2800      	cmp	r0, #0
 8001598:	d1c4      	bne.n	8001524 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800159a:	6823      	ldr	r3, [r4, #0]
 800159c:	e7cf      	b.n	800153e <I2C_RequestMemoryRead+0x8e>
 800159e:	bf00      	nop
 80015a0:	00010002 	.word	0x00010002

080015a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 80015a4:	b570      	push	{r4, r5, r6, lr}
 80015a6:	4604      	mov	r4, r0
 80015a8:	460d      	mov	r5, r1
 80015aa:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80015ac:	6820      	ldr	r0, [r4, #0]
 80015ae:	6943      	ldr	r3, [r0, #20]
 80015b0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80015b4:	d001      	beq.n	80015ba <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80015b6:	2000      	movs	r0, #0
}
 80015b8:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80015ba:	6942      	ldr	r2, [r0, #20]
 80015bc:	06d2      	lsls	r2, r2, #27
 80015be:	d50b      	bpl.n	80015d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015c0:	f06f 0210 	mvn.w	r2, #16
 80015c4:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 80015c6:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015c8:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80015ca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 80015ce:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80015d0:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 80015d2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 80015d6:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80015d8:	b95d      	cbnz	r5, 80015f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015da:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80015dc:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015de:	f043 0320 	orr.w	r3, r3, #32
 80015e2:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80015e4:	2320      	movs	r3, #32
 80015e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 80015ea:	2300      	movs	r3, #0
 80015ec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80015f0:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80015f2:	f7ff fced 	bl	8000fd0 <HAL_GetTick>
 80015f6:	1b80      	subs	r0, r0, r6
 80015f8:	4285      	cmp	r5, r0
 80015fa:	d2d7      	bcs.n	80015ac <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 80015fc:	e7ed      	b.n	80015da <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

080015fe <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 80015fe:	b570      	push	{r4, r5, r6, lr}
 8001600:	4604      	mov	r4, r0
 8001602:	460d      	mov	r5, r1
 8001604:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001606:	6823      	ldr	r3, [r4, #0]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	075b      	lsls	r3, r3, #29
 800160c:	d501      	bpl.n	8001612 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 800160e:	2000      	movs	r0, #0
 8001610:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001612:	4620      	mov	r0, r4
 8001614:	f7ff fe50 	bl	80012b8 <I2C_IsAcknowledgeFailed>
 8001618:	b9a8      	cbnz	r0, 8001646 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 800161a:	1c6a      	adds	r2, r5, #1
 800161c:	d0f3      	beq.n	8001606 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800161e:	b965      	cbnz	r5, 800163a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001620:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001622:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001624:	f043 0320 	orr.w	r3, r3, #32
 8001628:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800162a:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 800162c:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 800162e:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001630:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001634:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001638:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800163a:	f7ff fcc9 	bl	8000fd0 <HAL_GetTick>
 800163e:	1b80      	subs	r0, r0, r6
 8001640:	4285      	cmp	r5, r0
 8001642:	d2e0      	bcs.n	8001606 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8001644:	e7ec      	b.n	8001620 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001646:	2001      	movs	r0, #1
}
 8001648:	bd70      	pop	{r4, r5, r6, pc}
	...

0800164c <HAL_I2C_Init>:
{
 800164c:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 800164e:	4604      	mov	r4, r0
 8001650:	b908      	cbnz	r0, 8001656 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001652:	2001      	movs	r0, #1
 8001654:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001656:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800165a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800165e:	b91b      	cbnz	r3, 8001668 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001660:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001664:	f003 fcf4 	bl	8005050 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001668:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 800166a:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800166c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001670:	6813      	ldr	r3, [r2, #0]
 8001672:	f023 0301 	bic.w	r3, r3, #1
 8001676:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001678:	f000 ffa6 	bl	80025c8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800167c:	6863      	ldr	r3, [r4, #4]
 800167e:	4a2f      	ldr	r2, [pc, #188]	; (800173c <HAL_I2C_Init+0xf0>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d830      	bhi.n	80016e6 <HAL_I2C_Init+0x9a>
 8001684:	4a2e      	ldr	r2, [pc, #184]	; (8001740 <HAL_I2C_Init+0xf4>)
 8001686:	4290      	cmp	r0, r2
 8001688:	d9e3      	bls.n	8001652 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 800168a:	4a2e      	ldr	r2, [pc, #184]	; (8001744 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 800168c:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800168e:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 8001692:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001694:	3201      	adds	r2, #1
 8001696:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001698:	4a28      	ldr	r2, [pc, #160]	; (800173c <HAL_I2C_Init+0xf0>)
 800169a:	3801      	subs	r0, #1
 800169c:	4293      	cmp	r3, r2
 800169e:	d832      	bhi.n	8001706 <HAL_I2C_Init+0xba>
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	fbb0 f0f3 	udiv	r0, r0, r3
 80016a6:	1c43      	adds	r3, r0, #1
 80016a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	bf38      	it	cc
 80016b0:	2304      	movcc	r3, #4
 80016b2:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016b4:	6a22      	ldr	r2, [r4, #32]
 80016b6:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016b8:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016ba:	4313      	orrs	r3, r2
 80016bc:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80016be:	68e2      	ldr	r2, [r4, #12]
 80016c0:	6923      	ldr	r3, [r4, #16]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80016c6:	69a2      	ldr	r2, [r4, #24]
 80016c8:	6963      	ldr	r3, [r4, #20]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80016ce:	680b      	ldr	r3, [r1, #0]
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80016d6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016d8:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016de:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e0:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80016e4:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016e6:	4a18      	ldr	r2, [pc, #96]	; (8001748 <HAL_I2C_Init+0xfc>)
 80016e8:	4290      	cmp	r0, r2
 80016ea:	d9b2      	bls.n	8001652 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80016ec:	4d15      	ldr	r5, [pc, #84]	; (8001744 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80016ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80016f2:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 80016f6:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80016f8:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 80016fa:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80016fc:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001700:	fbb2 f2f5 	udiv	r2, r2, r5
 8001704:	e7c6      	b.n	8001694 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001706:	68a2      	ldr	r2, [r4, #8]
 8001708:	b952      	cbnz	r2, 8001720 <HAL_I2C_Init+0xd4>
 800170a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800170e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001712:	1c43      	adds	r3, r0, #1
 8001714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001718:	b16b      	cbz	r3, 8001736 <HAL_I2C_Init+0xea>
 800171a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800171e:	e7c8      	b.n	80016b2 <HAL_I2C_Init+0x66>
 8001720:	2219      	movs	r2, #25
 8001722:	4353      	muls	r3, r2
 8001724:	fbb0 f0f3 	udiv	r0, r0, r3
 8001728:	1c43      	adds	r3, r0, #1
 800172a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800172e:	b113      	cbz	r3, 8001736 <HAL_I2C_Init+0xea>
 8001730:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001734:	e7bd      	b.n	80016b2 <HAL_I2C_Init+0x66>
 8001736:	2301      	movs	r3, #1
 8001738:	e7bb      	b.n	80016b2 <HAL_I2C_Init+0x66>
 800173a:	bf00      	nop
 800173c:	000186a0 	.word	0x000186a0
 8001740:	001e847f 	.word	0x001e847f
 8001744:	000f4240 	.word	0x000f4240
 8001748:	003d08ff 	.word	0x003d08ff

0800174c <HAL_I2C_Master_Transmit>:
{
 800174c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001750:	4604      	mov	r4, r0
 8001752:	461f      	mov	r7, r3
 8001754:	460d      	mov	r5, r1
 8001756:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8001758:	f7ff fc3a 	bl	8000fd0 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 800175c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001760:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001762:	2b20      	cmp	r3, #32
 8001764:	d004      	beq.n	8001770 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8001766:	2502      	movs	r5, #2
}
 8001768:	4628      	mov	r0, r5
 800176a:	b004      	add	sp, #16
 800176c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001770:	9000      	str	r0, [sp, #0]
 8001772:	2319      	movs	r3, #25
 8001774:	2201      	movs	r2, #1
 8001776:	495d      	ldr	r1, [pc, #372]	; (80018ec <HAL_I2C_Master_Transmit+0x1a0>)
 8001778:	4620      	mov	r0, r4
 800177a:	f7ff fdf2 	bl	8001362 <I2C_WaitOnFlagUntilTimeout>
 800177e:	2800      	cmp	r0, #0
 8001780:	d1f1      	bne.n	8001766 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8001782:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001786:	2b01      	cmp	r3, #1
 8001788:	d0ed      	beq.n	8001766 <HAL_I2C_Master_Transmit+0x1a>
 800178a:	2301      	movs	r3, #1
 800178c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001790:	6823      	ldr	r3, [r4, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001796:	bf5e      	ittt	pl
 8001798:	681a      	ldrpl	r2, [r3, #0]
 800179a:	f042 0201 	orrpl.w	r2, r2, #1
 800179e:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017a6:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017a8:	2221      	movs	r2, #33	; 0x21
 80017aa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80017ae:	2210      	movs	r2, #16
 80017b0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017b4:	2200      	movs	r2, #0
 80017b6:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017b8:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 80017bc:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017be:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80017c0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80017c2:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80017c6:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80017c8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80017ca:	2a04      	cmp	r2, #4
 80017cc:	d004      	beq.n	80017d8 <HAL_I2C_Master_Transmit+0x8c>
 80017ce:	2a01      	cmp	r2, #1
 80017d0:	d002      	beq.n	80017d8 <HAL_I2C_Master_Transmit+0x8c>
 80017d2:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80017d6:	d104      	bne.n	80017e2 <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	e002      	b.n	80017e8 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80017e2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80017e4:	2a12      	cmp	r2, #18
 80017e6:	d0f7      	beq.n	80017d8 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017e8:	9600      	str	r6, [sp, #0]
 80017ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80017ec:	2200      	movs	r2, #0
 80017ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80017f2:	4620      	mov	r0, r4
 80017f4:	f7ff fdb5 	bl	8001362 <I2C_WaitOnFlagUntilTimeout>
 80017f8:	bb28      	cbnz	r0, 8001846 <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017fa:	6923      	ldr	r3, [r4, #16]
 80017fc:	6822      	ldr	r2, [r4, #0]
 80017fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001802:	d112      	bne.n	800182a <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001804:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001808:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800180a:	4633      	mov	r3, r6
 800180c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800180e:	4938      	ldr	r1, [pc, #224]	; (80018f0 <HAL_I2C_Master_Transmit+0x1a4>)
 8001810:	4620      	mov	r0, r4
 8001812:	f7ff fd66 	bl	80012e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001816:	4605      	mov	r5, r0
 8001818:	b9a0      	cbnz	r0, 8001844 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800181a:	6823      	ldr	r3, [r4, #0]
 800181c:	9003      	str	r0, [sp, #12]
 800181e:	695a      	ldr	r2, [r3, #20]
 8001820:	9203      	str	r2, [sp, #12]
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	9303      	str	r3, [sp, #12]
 8001826:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8001828:	e050      	b.n	80018cc <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800182a:	11eb      	asrs	r3, r5, #7
 800182c:	f003 0306 	and.w	r3, r3, #6
 8001830:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001834:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001836:	492f      	ldr	r1, [pc, #188]	; (80018f4 <HAL_I2C_Master_Transmit+0x1a8>)
 8001838:	4633      	mov	r3, r6
 800183a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800183c:	4620      	mov	r0, r4
 800183e:	f7ff fd50 	bl	80012e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001842:	b148      	cbz	r0, 8001858 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001844:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001846:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001848:	2b04      	cmp	r3, #4
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	d107      	bne.n	8001860 <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 8001850:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8001854:	2501      	movs	r5, #1
 8001856:	e787      	b.n	8001768 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001858:	6823      	ldr	r3, [r4, #0]
 800185a:	b2ed      	uxtb	r5, r5
 800185c:	611d      	str	r5, [r3, #16]
 800185e:	e7d4      	b.n	800180a <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 8001860:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8001864:	2503      	movs	r5, #3
 8001866:	e77f      	b.n	8001768 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001868:	4632      	mov	r2, r6
 800186a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800186c:	4620      	mov	r0, r4
 800186e:	f7ff fda6 	bl	80013be <I2C_WaitOnTXEFlagUntilTimeout>
 8001872:	b140      	cbz	r0, 8001886 <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001874:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001876:	2b04      	cmp	r3, #4
 8001878:	d1f4      	bne.n	8001864 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800187a:	6822      	ldr	r2, [r4, #0]
 800187c:	6813      	ldr	r3, [r2, #0]
 800187e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	e7e6      	b.n	8001854 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001886:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001888:	6820      	ldr	r0, [r4, #0]
 800188a:	1c4b      	adds	r3, r1, #1
 800188c:	6263      	str	r3, [r4, #36]	; 0x24
 800188e:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8001890:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001892:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8001894:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001896:	3b01      	subs	r3, #1
 8001898:	b29b      	uxth	r3, r3
 800189a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800189c:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 800189e:	1e53      	subs	r3, r2, #1
 80018a0:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018a2:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 80018a4:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018a6:	d50a      	bpl.n	80018be <HAL_I2C_Master_Transmit+0x172>
 80018a8:	b14b      	cbz	r3, 80018be <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80018aa:	1c8b      	adds	r3, r1, #2
 80018ac:	6263      	str	r3, [r4, #36]	; 0x24
 80018ae:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 80018b0:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80018b2:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 80018b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80018b6:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80018b8:	3b01      	subs	r3, #1
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018be:	4632      	mov	r2, r6
 80018c0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80018c2:	4620      	mov	r0, r4
 80018c4:	f7ff fe9b 	bl	80015fe <I2C_WaitOnBTFFlagUntilTimeout>
 80018c8:	2800      	cmp	r0, #0
 80018ca:	d1d3      	bne.n	8001874 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 80018cc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1ca      	bne.n	8001868 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80018d2:	6821      	ldr	r1, [r4, #0]
 80018d4:	680a      	ldr	r2, [r1, #0]
 80018d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018da:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80018dc:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80018de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80018e2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80018ea:	e73d      	b.n	8001768 <HAL_I2C_Master_Transmit+0x1c>
 80018ec:	00100002 	.word	0x00100002
 80018f0:	00010002 	.word	0x00010002
 80018f4:	00010008 	.word	0x00010008

080018f8 <HAL_I2C_Master_Receive>:
{
 80018f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80018fc:	4604      	mov	r4, r0
 80018fe:	b089      	sub	sp, #36	; 0x24
 8001900:	4698      	mov	r8, r3
 8001902:	460d      	mov	r5, r1
 8001904:	4691      	mov	r9, r2
 8001906:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8001908:	f7ff fb62 	bl	8000fd0 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 800190c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001910:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001912:	2b20      	cmp	r3, #32
 8001914:	d004      	beq.n	8001920 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8001916:	2502      	movs	r5, #2
}
 8001918:	4628      	mov	r0, r5
 800191a:	b009      	add	sp, #36	; 0x24
 800191c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001920:	9000      	str	r0, [sp, #0]
 8001922:	2319      	movs	r3, #25
 8001924:	2201      	movs	r2, #1
 8001926:	49a2      	ldr	r1, [pc, #648]	; (8001bb0 <HAL_I2C_Master_Receive+0x2b8>)
 8001928:	4620      	mov	r0, r4
 800192a:	f7ff fd1a 	bl	8001362 <I2C_WaitOnFlagUntilTimeout>
 800192e:	2800      	cmp	r0, #0
 8001930:	d1f1      	bne.n	8001916 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8001932:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001936:	2b01      	cmp	r3, #1
 8001938:	d0ed      	beq.n	8001916 <HAL_I2C_Master_Receive+0x1e>
 800193a:	2301      	movs	r3, #1
 800193c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001940:	6823      	ldr	r3, [r4, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001946:	bf5e      	ittt	pl
 8001948:	681a      	ldrpl	r2, [r3, #0]
 800194a:	f042 0201 	orrpl.w	r2, r2, #1
 800194e:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001956:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001958:	2222      	movs	r2, #34	; 0x22
 800195a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800195e:	2210      	movs	r2, #16
 8001960:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001964:	2200      	movs	r2, #0
 8001966:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001968:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 800196c:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001970:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001972:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001974:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8001978:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800197a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800197c:	6819      	ldr	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800197e:	2a04      	cmp	r2, #4
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001980:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001984:	6019      	str	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001986:	d004      	beq.n	8001992 <HAL_I2C_Master_Receive+0x9a>
 8001988:	2a01      	cmp	r2, #1
 800198a:	d002      	beq.n	8001992 <HAL_I2C_Master_Receive+0x9a>
 800198c:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001990:	d104      	bne.n	800199c <HAL_I2C_Master_Receive+0xa4>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	e002      	b.n	80019a2 <HAL_I2C_Master_Receive+0xaa>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800199c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800199e:	2a11      	cmp	r2, #17
 80019a0:	d0f7      	beq.n	8001992 <HAL_I2C_Master_Receive+0x9a>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80019a2:	9600      	str	r6, [sp, #0]
 80019a4:	463b      	mov	r3, r7
 80019a6:	2200      	movs	r2, #0
 80019a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80019ac:	4620      	mov	r0, r4
 80019ae:	f7ff fcd8 	bl	8001362 <I2C_WaitOnFlagUntilTimeout>
 80019b2:	2800      	cmp	r0, #0
 80019b4:	d14d      	bne.n	8001a52 <HAL_I2C_Master_Receive+0x15a>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019b6:	6923      	ldr	r3, [r4, #16]
 80019b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019bc:	6823      	ldr	r3, [r4, #0]
 80019be:	d139      	bne.n	8001a34 <HAL_I2C_Master_Receive+0x13c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80019c0:	f045 0501 	orr.w	r5, r5, #1
 80019c4:	b2ed      	uxtb	r5, r5
 80019c6:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019c8:	4633      	mov	r3, r6
 80019ca:	463a      	mov	r2, r7
 80019cc:	4979      	ldr	r1, [pc, #484]	; (8001bb4 <HAL_I2C_Master_Receive+0x2bc>)
 80019ce:	4620      	mov	r0, r4
 80019d0:	f7ff fc87 	bl	80012e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019d4:	4605      	mov	r5, r0
 80019d6:	2800      	cmp	r0, #0
 80019d8:	d13a      	bne.n	8001a50 <HAL_I2C_Master_Receive+0x158>
    if(hi2c->XferSize == 0U)
 80019da:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80019dc:	6823      	ldr	r3, [r4, #0]
 80019de:	2a00      	cmp	r2, #0
 80019e0:	d069      	beq.n	8001ab6 <HAL_I2C_Master_Receive+0x1be>
    else if(hi2c->XferSize == 1U)
 80019e2:	2a01      	cmp	r2, #1
 80019e4:	d17a      	bne.n	8001adc <HAL_I2C_Master_Receive+0x1e4>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019ec:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019ee:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019f0:	6823      	ldr	r3, [r4, #0]
 80019f2:	9504      	str	r5, [sp, #16]
 80019f4:	695a      	ldr	r2, [r3, #20]
 80019f6:	9204      	str	r2, [sp, #16]
 80019f8:	699a      	ldr	r2, [r3, #24]
 80019fa:	9204      	str	r2, [sp, #16]
 80019fc:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001a04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a06:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a08:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001bbc <HAL_I2C_Master_Receive+0x2c4>
    while(hi2c->XferSize > 0U)
 8001a0c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d05b      	beq.n	8001aca <HAL_I2C_Master_Receive+0x1d2>
      if(hi2c->XferSize <= 3U)
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	f200 80d4 	bhi.w	8001bc0 <HAL_I2C_Master_Receive+0x2c8>
        if(hi2c->XferSize == 1U)
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d17b      	bne.n	8001b14 <HAL_I2C_Master_Receive+0x21c>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001a1c:	4632      	mov	r2, r6
 8001a1e:	4639      	mov	r1, r7
 8001a20:	4620      	mov	r0, r4
 8001a22:	f7ff fdbf 	bl	80015a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a26:	2800      	cmp	r0, #0
 8001a28:	f000 8093 	beq.w	8001b52 <HAL_I2C_Master_Receive+0x25a>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001a2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a2e:	2b20      	cmp	r3, #32
 8001a30:	d116      	bne.n	8001a60 <HAL_I2C_Master_Receive+0x168>
 8001a32:	e03e      	b.n	8001ab2 <HAL_I2C_Master_Receive+0x1ba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001a34:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8001a38:	f008 0806 	and.w	r8, r8, #6
 8001a3c:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8001a40:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001a42:	495d      	ldr	r1, [pc, #372]	; (8001bb8 <HAL_I2C_Master_Receive+0x2c0>)
 8001a44:	4633      	mov	r3, r6
 8001a46:	463a      	mov	r2, r7
 8001a48:	4620      	mov	r0, r4
 8001a4a:	f7ff fc4a 	bl	80012e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a4e:	b148      	cbz	r0, 8001a64 <HAL_I2C_Master_Receive+0x16c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a50:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a54:	2b04      	cmp	r3, #4
 8001a56:	f04f 0300 	mov.w	r3, #0
 8001a5a:	d128      	bne.n	8001aae <HAL_I2C_Master_Receive+0x1b6>
        __HAL_UNLOCK(hi2c);
 8001a5c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 8001a60:	2501      	movs	r5, #1
 8001a62:	e759      	b.n	8001918 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001a64:	6823      	ldr	r3, [r4, #0]
 8001a66:	b2ed      	uxtb	r5, r5
 8001a68:	611d      	str	r5, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a6a:	463a      	mov	r2, r7
 8001a6c:	4633      	mov	r3, r6
 8001a6e:	4951      	ldr	r1, [pc, #324]	; (8001bb4 <HAL_I2C_Master_Receive+0x2bc>)
 8001a70:	4620      	mov	r0, r4
 8001a72:	f7ff fc36 	bl	80012e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a76:	4602      	mov	r2, r0
 8001a78:	2800      	cmp	r0, #0
 8001a7a:	d1e9      	bne.n	8001a50 <HAL_I2C_Master_Receive+0x158>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a7c:	6823      	ldr	r3, [r4, #0]
 8001a7e:	9007      	str	r0, [sp, #28]
 8001a80:	6959      	ldr	r1, [r3, #20]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a82:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a84:	9107      	str	r1, [sp, #28]
 8001a86:	6999      	ldr	r1, [r3, #24]
 8001a88:	9107      	str	r1, [sp, #28]
 8001a8a:	9907      	ldr	r1, [sp, #28]
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001a8c:	6819      	ldr	r1, [r3, #0]
 8001a8e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001a92:	6019      	str	r1, [r3, #0]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a94:	9600      	str	r6, [sp, #0]
 8001a96:	463b      	mov	r3, r7
 8001a98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a9c:	f7ff fc61 	bl	8001362 <I2C_WaitOnFlagUntilTimeout>
 8001aa0:	2800      	cmp	r0, #0
 8001aa2:	d1d6      	bne.n	8001a52 <HAL_I2C_Master_Receive+0x15a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001aa4:	6822      	ldr	r2, [r4, #0]
 8001aa6:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8001aaa:	6113      	str	r3, [r2, #16]
 8001aac:	e78c      	b.n	80019c8 <HAL_I2C_Master_Receive+0xd0>
        __HAL_UNLOCK(hi2c);
 8001aae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_TIMEOUT;
 8001ab2:	2503      	movs	r5, #3
 8001ab4:	e730      	b.n	8001918 <HAL_I2C_Master_Receive+0x20>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ab6:	9503      	str	r5, [sp, #12]
 8001ab8:	695a      	ldr	r2, [r3, #20]
 8001aba:	9203      	str	r2, [sp, #12]
 8001abc:	699a      	ldr	r2, [r3, #24]
 8001abe:	9203      	str	r2, [sp, #12]
 8001ac0:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ac8:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001aca:	2320      	movs	r3, #32
 8001acc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001ad6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001ada:	e71d      	b.n	8001918 <HAL_I2C_Master_Receive+0x20>
    else if(hi2c->XferSize == 2U)
 8001adc:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001ade:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 8001ae0:	d10e      	bne.n	8001b00 <HAL_I2C_Master_Receive+0x208>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001ae2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ae6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae8:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aea:	6823      	ldr	r3, [r4, #0]
 8001aec:	9505      	str	r5, [sp, #20]
 8001aee:	695a      	ldr	r2, [r3, #20]
 8001af0:	9205      	str	r2, [sp, #20]
 8001af2:	699a      	ldr	r2, [r3, #24]
 8001af4:	9205      	str	r2, [sp, #20]
 8001af6:	9a05      	ldr	r2, [sp, #20]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001afe:	e781      	b.n	8001a04 <HAL_I2C_Master_Receive+0x10c>
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001b00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b04:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b06:	9506      	str	r5, [sp, #24]
 8001b08:	695a      	ldr	r2, [r3, #20]
 8001b0a:	9206      	str	r2, [sp, #24]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	9306      	str	r3, [sp, #24]
 8001b10:	9b06      	ldr	r3, [sp, #24]
 8001b12:	e779      	b.n	8001a08 <HAL_I2C_Master_Receive+0x110>
        else if(hi2c->XferSize == 2U)
 8001b14:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b16:	9600      	str	r6, [sp, #0]
 8001b18:	463b      	mov	r3, r7
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	4641      	mov	r1, r8
 8001b20:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8001b22:	d124      	bne.n	8001b6e <HAL_I2C_Master_Receive+0x276>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b24:	f7ff fc1d 	bl	8001362 <I2C_WaitOnFlagUntilTimeout>
 8001b28:	2800      	cmp	r0, #0
 8001b2a:	d1c2      	bne.n	8001ab2 <HAL_I2C_Master_Receive+0x1ba>
 8001b2c:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b2e:	6823      	ldr	r3, [r4, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b36:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001b38:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	1c51      	adds	r1, r2, #1
 8001b3e:	6261      	str	r1, [r4, #36]	; 0x24
 8001b40:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8001b42:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001b44:	3b01      	subs	r3, #1
 8001b46:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001b48:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001b50:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001b52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	6262      	str	r2, [r4, #36]	; 0x24
 8001b58:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001b5a:	6912      	ldr	r2, [r2, #16]
 8001b5c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001b5e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001b60:	3b01      	subs	r3, #1
 8001b62:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001b64:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b66:	3b01      	subs	r3, #1
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001b6c:	e74e      	b.n	8001a0c <HAL_I2C_Master_Receive+0x114>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b6e:	f7ff fbf8 	bl	8001362 <I2C_WaitOnFlagUntilTimeout>
 8001b72:	4602      	mov	r2, r0
 8001b74:	2800      	cmp	r0, #0
 8001b76:	d19c      	bne.n	8001ab2 <HAL_I2C_Master_Receive+0x1ba>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001b78:	6821      	ldr	r1, [r4, #0]
 8001b7a:	680b      	ldr	r3, [r1, #0]
 8001b7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b80:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b82:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001b84:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b86:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001b88:	1c59      	adds	r1, r3, #1
 8001b8a:	6261      	str	r1, [r4, #36]	; 0x24
 8001b8c:	6821      	ldr	r1, [r4, #0]
 8001b8e:	6909      	ldr	r1, [r1, #16]
 8001b90:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 8001b92:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b94:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8001b96:	3b01      	subs	r3, #1
 8001b98:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001b9a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b9c:	4641      	mov	r1, r8
          hi2c->XferCount--;
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ba4:	463b      	mov	r3, r7
 8001ba6:	f7ff fbdc 	bl	8001362 <I2C_WaitOnFlagUntilTimeout>
 8001baa:	2800      	cmp	r0, #0
 8001bac:	d0bf      	beq.n	8001b2e <HAL_I2C_Master_Receive+0x236>
 8001bae:	e780      	b.n	8001ab2 <HAL_I2C_Master_Receive+0x1ba>
 8001bb0:	00100002 	.word	0x00100002
 8001bb4:	00010002 	.word	0x00010002
 8001bb8:	00010008 	.word	0x00010008
 8001bbc:	00010004 	.word	0x00010004
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001bc0:	4632      	mov	r2, r6
 8001bc2:	4639      	mov	r1, r7
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	f7ff fced 	bl	80015a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001bca:	2800      	cmp	r0, #0
 8001bcc:	f47f af2e 	bne.w	8001a2c <HAL_I2C_Master_Receive+0x134>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001bd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	6262      	str	r2, [r4, #36]	; 0x24
 8001bd6:	6822      	ldr	r2, [r4, #0]
 8001bd8:	6912      	ldr	r2, [r2, #16]
 8001bda:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001bdc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001bde:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8001be0:	3b01      	subs	r3, #1
 8001be2:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001be4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001be6:	3b01      	subs	r3, #1
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001bec:	6953      	ldr	r3, [r2, #20]
 8001bee:	075b      	lsls	r3, r3, #29
 8001bf0:	f57f af0c 	bpl.w	8001a0c <HAL_I2C_Master_Receive+0x114>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001bf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bf6:	1c59      	adds	r1, r3, #1
 8001bf8:	6261      	str	r1, [r4, #36]	; 0x24
 8001bfa:	e7ae      	b.n	8001b5a <HAL_I2C_Master_Receive+0x262>

08001bfc <HAL_I2C_Mem_Write>:
{
 8001bfc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c00:	4604      	mov	r4, r0
 8001c02:	469a      	mov	sl, r3
 8001c04:	4688      	mov	r8, r1
 8001c06:	4691      	mov	r9, r2
 8001c08:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 8001c0a:	f7ff f9e1 	bl	8000fd0 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001c0e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001c12:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001c14:	2b20      	cmp	r3, #32
 8001c16:	d003      	beq.n	8001c20 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8001c18:	2002      	movs	r0, #2
}
 8001c1a:	b002      	add	sp, #8
 8001c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c20:	9000      	str	r0, [sp, #0]
 8001c22:	2319      	movs	r3, #25
 8001c24:	2201      	movs	r2, #1
 8001c26:	493e      	ldr	r1, [pc, #248]	; (8001d20 <HAL_I2C_Mem_Write+0x124>)
 8001c28:	4620      	mov	r0, r4
 8001c2a:	f7ff fb9a 	bl	8001362 <I2C_WaitOnFlagUntilTimeout>
 8001c2e:	2800      	cmp	r0, #0
 8001c30:	d1f2      	bne.n	8001c18 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8001c32:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d0ee      	beq.n	8001c18 <HAL_I2C_Mem_Write+0x1c>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c40:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c42:	2700      	movs	r7, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c44:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c46:	4641      	mov	r1, r8
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c48:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001c4a:	bf58      	it	pl
 8001c4c:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c4e:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 8001c50:	bf5c      	itt	pl
 8001c52:	f042 0201 	orrpl.w	r2, r2, #1
 8001c56:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c5e:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c60:	2321      	movs	r3, #33	; 0x21
 8001c62:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c66:	2340      	movs	r3, #64	; 0x40
 8001c68:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8001c6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c6e:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001c70:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c72:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c76:	9501      	str	r5, [sp, #4]
    hi2c->XferCount   = Size;
 8001c78:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c7a:	4b2a      	ldr	r3, [pc, #168]	; (8001d24 <HAL_I2C_Mem_Write+0x128>)
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c7c:	9600      	str	r6, [sp, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c7e:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001c80:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c82:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 8001c84:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c86:	4653      	mov	r3, sl
 8001c88:	f7ff fbc0 	bl	800140c <I2C_RequestMemoryWrite>
 8001c8c:	2800      	cmp	r0, #0
 8001c8e:	d02a      	beq.n	8001ce6 <HAL_I2C_Mem_Write+0xea>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c90:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001c92:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d107      	bne.n	8001caa <HAL_I2C_Mem_Write+0xae>
        return HAL_ERROR;
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	e7bd      	b.n	8001c1a <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c9e:	f7ff fb8e 	bl	80013be <I2C_WaitOnTXEFlagUntilTimeout>
 8001ca2:	b120      	cbz	r0, 8001cae <HAL_I2C_Mem_Write+0xb2>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ca4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d034      	beq.n	8001d14 <HAL_I2C_Mem_Write+0x118>
          return HAL_TIMEOUT;
 8001caa:	2003      	movs	r0, #3
 8001cac:	e7b5      	b.n	8001c1a <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001cae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001cb0:	6827      	ldr	r7, [r4, #0]
 8001cb2:	1c4b      	adds	r3, r1, #1
 8001cb4:	6263      	str	r3, [r4, #36]	; 0x24
 8001cb6:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8001cb8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001cba:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 8001cbc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001cbe:	1e50      	subs	r0, r2, #1
      hi2c->XferCount--;
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cc6:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 8001cc8:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cca:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 8001ccc:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cce:	d50a      	bpl.n	8001ce6 <HAL_I2C_Mem_Write+0xea>
 8001cd0:	b148      	cbz	r0, 8001ce6 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001cd2:	1c8b      	adds	r3, r1, #2
 8001cd4:	6263      	str	r3, [r4, #36]	; 0x24
 8001cd6:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 8001cd8:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001cda:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 8001cdc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001cde:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8001ce6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ce8:	462a      	mov	r2, r5
 8001cea:	4631      	mov	r1, r6
 8001cec:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1d5      	bne.n	8001c9e <HAL_I2C_Mem_Write+0xa2>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cf2:	f7ff fc84 	bl	80015fe <I2C_WaitOnBTFFlagUntilTimeout>
 8001cf6:	2800      	cmp	r0, #0
 8001cf8:	d1d4      	bne.n	8001ca4 <HAL_I2C_Mem_Write+0xa8>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001cfa:	6822      	ldr	r2, [r4, #0]
 8001cfc:	6813      	ldr	r3, [r2, #0]
 8001cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d02:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001d04:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8001d06:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001d0a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d0e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8001d12:	e782      	b.n	8001c1a <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001d14:	6822      	ldr	r2, [r4, #0]
 8001d16:	6813      	ldr	r3, [r2, #0]
 8001d18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	e7bc      	b.n	8001c9a <HAL_I2C_Mem_Write+0x9e>
 8001d20:	00100002 	.word	0x00100002
 8001d24:	ffff0000 	.word	0xffff0000

08001d28 <HAL_I2C_Mem_Read>:
{
 8001d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d2c:	4604      	mov	r4, r0
 8001d2e:	b086      	sub	sp, #24
 8001d30:	469a      	mov	sl, r3
 8001d32:	460d      	mov	r5, r1
 8001d34:	4691      	mov	r9, r2
 8001d36:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8001d38:	f7ff f94a 	bl	8000fd0 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001d3c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001d40:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001d42:	2b20      	cmp	r3, #32
 8001d44:	d004      	beq.n	8001d50 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8001d46:	2502      	movs	r5, #2
}
 8001d48:	4628      	mov	r0, r5
 8001d4a:	b006      	add	sp, #24
 8001d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d50:	9000      	str	r0, [sp, #0]
 8001d52:	2319      	movs	r3, #25
 8001d54:	2201      	movs	r2, #1
 8001d56:	4981      	ldr	r1, [pc, #516]	; (8001f5c <HAL_I2C_Mem_Read+0x234>)
 8001d58:	4620      	mov	r0, r4
 8001d5a:	f7ff fb02 	bl	8001362 <I2C_WaitOnFlagUntilTimeout>
 8001d5e:	2800      	cmp	r0, #0
 8001d60:	d1f1      	bne.n	8001d46 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8001d62:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d0ed      	beq.n	8001d46 <HAL_I2C_Mem_Read+0x1e>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d70:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d72:	f04f 0800 	mov.w	r8, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d76:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d78:	4629      	mov	r1, r5
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d7a:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001d7c:	bf58      	it	pl
 8001d7e:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d80:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 8001d82:	bf5c      	itt	pl
 8001d84:	f042 0201 	orrpl.w	r2, r2, #1
 8001d88:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d90:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d92:	2322      	movs	r3, #34	; 0x22
 8001d94:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d98:	2340      	movs	r3, #64	; 0x40
 8001d9a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8001d9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001da0:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001da4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001da6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001daa:	9601      	str	r6, [sp, #4]
    hi2c->XferCount   = Size;
 8001dac:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dae:	4b6c      	ldr	r3, [pc, #432]	; (8001f60 <HAL_I2C_Mem_Read+0x238>)
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001db0:	9700      	str	r7, [sp, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001db2:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001db4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001db6:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 8001db8:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001dba:	4653      	mov	r3, sl
 8001dbc:	f7ff fb78 	bl	80014b0 <I2C_RequestMemoryRead>
 8001dc0:	4605      	mov	r5, r0
 8001dc2:	b130      	cbz	r0, 8001dd2 <HAL_I2C_Mem_Read+0xaa>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dc4:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001dc6:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	d13d      	bne.n	8001e4a <HAL_I2C_Mem_Read+0x122>
              return HAL_ERROR;
 8001dce:	2501      	movs	r5, #1
 8001dd0:	e7ba      	b.n	8001d48 <HAL_I2C_Mem_Read+0x20>
    if(hi2c->XferSize == 0U)
 8001dd2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001dd4:	6823      	ldr	r3, [r4, #0]
 8001dd6:	b992      	cbnz	r2, 8001dfe <HAL_I2C_Mem_Read+0xd6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dd8:	9002      	str	r0, [sp, #8]
 8001dda:	695a      	ldr	r2, [r3, #20]
 8001ddc:	9202      	str	r2, [sp, #8]
 8001dde:	699a      	ldr	r2, [r3, #24]
 8001de0:	9202      	str	r2, [sp, #8]
 8001de2:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dea:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001dec:	2320      	movs	r3, #32
 8001dee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001df8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001dfc:	e7a4      	b.n	8001d48 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 1U)
 8001dfe:	2a01      	cmp	r2, #1
 8001e00:	d125      	bne.n	8001e4e <HAL_I2C_Mem_Read+0x126>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e0c:	6823      	ldr	r3, [r4, #0]
 8001e0e:	9003      	str	r0, [sp, #12]
 8001e10:	695a      	ldr	r2, [r3, #20]
 8001e12:	9203      	str	r2, [sp, #12]
 8001e14:	699a      	ldr	r2, [r3, #24]
 8001e16:	9203      	str	r2, [sp, #12]
 8001e18:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001e20:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e22:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e24:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8001f64 <HAL_I2C_Mem_Read+0x23c>
    while(hi2c->XferSize > 0U)
 8001e28:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0de      	beq.n	8001dec <HAL_I2C_Mem_Read+0xc4>
      if(hi2c->XferSize <= 3U)
 8001e2e:	2b03      	cmp	r3, #3
 8001e30:	d877      	bhi.n	8001f22 <HAL_I2C_Mem_Read+0x1fa>
        if(hi2c->XferSize== 1U)
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d127      	bne.n	8001e86 <HAL_I2C_Mem_Read+0x15e>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001e36:	4632      	mov	r2, r6
 8001e38:	4639      	mov	r1, r7
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	f7ff fbb2 	bl	80015a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e40:	2800      	cmp	r0, #0
 8001e42:	d03f      	beq.n	8001ec4 <HAL_I2C_Mem_Read+0x19c>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001e44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e46:	2b20      	cmp	r3, #32
 8001e48:	d1c1      	bne.n	8001dce <HAL_I2C_Mem_Read+0xa6>
              return HAL_TIMEOUT;
 8001e4a:	2503      	movs	r5, #3
 8001e4c:	e77c      	b.n	8001d48 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 2U)
 8001e4e:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001e50:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 8001e52:	d10e      	bne.n	8001e72 <HAL_I2C_Mem_Read+0x14a>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001e54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e5a:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e5c:	6823      	ldr	r3, [r4, #0]
 8001e5e:	9004      	str	r0, [sp, #16]
 8001e60:	695a      	ldr	r2, [r3, #20]
 8001e62:	9204      	str	r2, [sp, #16]
 8001e64:	699a      	ldr	r2, [r3, #24]
 8001e66:	9204      	str	r2, [sp, #16]
 8001e68:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e70:	e7d6      	b.n	8001e20 <HAL_I2C_Mem_Read+0xf8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e76:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e78:	9005      	str	r0, [sp, #20]
 8001e7a:	695a      	ldr	r2, [r3, #20]
 8001e7c:	9205      	str	r2, [sp, #20]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	9305      	str	r3, [sp, #20]
 8001e82:	9b05      	ldr	r3, [sp, #20]
 8001e84:	e7ce      	b.n	8001e24 <HAL_I2C_Mem_Read+0xfc>
        else if(hi2c->XferSize == 2U)
 8001e86:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e88:	9600      	str	r6, [sp, #0]
 8001e8a:	463b      	mov	r3, r7
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	4641      	mov	r1, r8
 8001e92:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8001e94:	d124      	bne.n	8001ee0 <HAL_I2C_Mem_Read+0x1b8>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e96:	f7ff fa64 	bl	8001362 <I2C_WaitOnFlagUntilTimeout>
 8001e9a:	2800      	cmp	r0, #0
 8001e9c:	d1d5      	bne.n	8001e4a <HAL_I2C_Mem_Read+0x122>
 8001e9e:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001ea0:	6823      	ldr	r3, [r4, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ea8:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001eaa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	1c51      	adds	r1, r2, #1
 8001eb0:	6261      	str	r1, [r4, #36]	; 0x24
 8001eb2:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8001eb4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001eba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001ec2:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001ec4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	6262      	str	r2, [r4, #36]	; 0x24
 8001eca:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001ecc:	6912      	ldr	r2, [r2, #16]
 8001ece:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001ed0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001ed6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001ede:	e7a3      	b.n	8001e28 <HAL_I2C_Mem_Read+0x100>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ee0:	f7ff fa3f 	bl	8001362 <I2C_WaitOnFlagUntilTimeout>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	2800      	cmp	r0, #0
 8001ee8:	d1af      	bne.n	8001e4a <HAL_I2C_Mem_Read+0x122>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001eea:	6821      	ldr	r1, [r4, #0]
 8001eec:	680b      	ldr	r3, [r1, #0]
 8001eee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ef2:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef4:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001ef6:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ef8:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001efa:	1c59      	adds	r1, r3, #1
 8001efc:	6261      	str	r1, [r4, #36]	; 0x24
 8001efe:	6821      	ldr	r1, [r4, #0]
 8001f00:	6909      	ldr	r1, [r1, #16]
 8001f02:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 8001f04:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f06:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001f0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f0e:	4641      	mov	r1, r8
          hi2c->XferCount--;
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f16:	463b      	mov	r3, r7
 8001f18:	f7ff fa23 	bl	8001362 <I2C_WaitOnFlagUntilTimeout>
 8001f1c:	2800      	cmp	r0, #0
 8001f1e:	d0bf      	beq.n	8001ea0 <HAL_I2C_Mem_Read+0x178>
 8001f20:	e793      	b.n	8001e4a <HAL_I2C_Mem_Read+0x122>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f22:	4632      	mov	r2, r6
 8001f24:	4639      	mov	r1, r7
 8001f26:	4620      	mov	r0, r4
 8001f28:	f7ff fb3c 	bl	80015a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f2c:	2800      	cmp	r0, #0
 8001f2e:	d189      	bne.n	8001e44 <HAL_I2C_Mem_Read+0x11c>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	6262      	str	r2, [r4, #36]	; 0x24
 8001f36:	6822      	ldr	r2, [r4, #0]
 8001f38:	6912      	ldr	r2, [r2, #16]
 8001f3a:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001f3c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f3e:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8001f40:	3b01      	subs	r3, #1
 8001f42:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001f44:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f46:	3b01      	subs	r3, #1
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f4c:	6953      	ldr	r3, [r2, #20]
 8001f4e:	075b      	lsls	r3, r3, #29
 8001f50:	f57f af6a 	bpl.w	8001e28 <HAL_I2C_Mem_Read+0x100>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f56:	1c59      	adds	r1, r3, #1
 8001f58:	6261      	str	r1, [r4, #36]	; 0x24
 8001f5a:	e7b7      	b.n	8001ecc <HAL_I2C_Mem_Read+0x1a4>
 8001f5c:	00100002 	.word	0x00100002
 8001f60:	ffff0000 	.word	0xffff0000
 8001f64:	00010004 	.word	0x00010004

08001f68 <HAL_I2C_IsDeviceReady>:
{
 8001f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f6c:	4604      	mov	r4, r0
 8001f6e:	b085      	sub	sp, #20
 8001f70:	4698      	mov	r8, r3
 8001f72:	4689      	mov	r9, r1
 8001f74:	4692      	mov	sl, r2
  tickstart = HAL_GetTick();
 8001f76:	f7ff f82b 	bl	8000fd0 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001f7a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001f7e:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001f80:	2b20      	cmp	r3, #32
 8001f82:	d003      	beq.n	8001f8c <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8001f84:	2002      	movs	r0, #2
}
 8001f86:	b005      	add	sp, #20
 8001f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f8c:	9000      	str	r0, [sp, #0]
 8001f8e:	2319      	movs	r3, #25
 8001f90:	2201      	movs	r2, #1
 8001f92:	494b      	ldr	r1, [pc, #300]	; (80020c0 <HAL_I2C_IsDeviceReady+0x158>)
 8001f94:	4620      	mov	r0, r4
 8001f96:	f7ff f9e4 	bl	8001362 <I2C_WaitOnFlagUntilTimeout>
 8001f9a:	2800      	cmp	r0, #0
 8001f9c:	d1f2      	bne.n	8001f84 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 8001f9e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d0ee      	beq.n	8001f84 <HAL_I2C_IsDeviceReady+0x1c>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fac:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fae:	2500      	movs	r5, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fb0:	681a      	ldr	r2, [r3, #0]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fb2:	f8df b10c 	ldr.w	fp, [pc, #268]	; 80020c0 <HAL_I2C_IsDeviceReady+0x158>
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fb6:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001fb8:	bf58      	it	pl
 8001fba:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fbc:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
      __HAL_I2C_ENABLE(hi2c);
 8001fc0:	bf5c      	itt	pl
 8001fc2:	f042 0201 	orrpl.w	r2, r2, #1
 8001fc6:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fce:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fd0:	2324      	movs	r3, #36	; 0x24
 8001fd2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fd6:	4b3b      	ldr	r3, [pc, #236]	; (80020c4 <HAL_I2C_IsDeviceReady+0x15c>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fd8:	6425      	str	r5, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fda:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001fdc:	6822      	ldr	r2, [r4, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001fde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001fe2:	6813      	ldr	r3, [r2, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001fe4:	4620      	mov	r0, r4
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fea:	6013      	str	r3, [r2, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001fec:	9600      	str	r6, [sp, #0]
 8001fee:	4643      	mov	r3, r8
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f7ff f9b6 	bl	8001362 <I2C_WaitOnFlagUntilTimeout>
 8001ff6:	b108      	cbz	r0, 8001ffc <HAL_I2C_IsDeviceReady+0x94>
        return HAL_TIMEOUT;
 8001ff8:	2003      	movs	r0, #3
 8001ffa:	e7c4      	b.n	8001f86 <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ffc:	6823      	ldr	r3, [r4, #0]
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001ffe:	27a0      	movs	r7, #160	; 0xa0
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002000:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 8002004:	f7fe ffe4 	bl	8000fd0 <HAL_GetTick>
 8002008:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800200a:	6823      	ldr	r3, [r4, #0]
 800200c:	6959      	ldr	r1, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800200e:	695a      	ldr	r2, [r3, #20]
      tmp3 = hi2c->State;
 8002010:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002014:	f3c1 0140 	ubfx	r1, r1, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002018:	f3c2 2280 	ubfx	r2, r2, #10, #1
      tmp3 = hi2c->State;
 800201c:	b2db      	uxtb	r3, r3
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 800201e:	b911      	cbnz	r1, 8002026 <HAL_I2C_IsDeviceReady+0xbe>
 8002020:	b90a      	cbnz	r2, 8002026 <HAL_I2C_IsDeviceReady+0xbe>
 8002022:	2ba0      	cmp	r3, #160	; 0xa0
 8002024:	d120      	bne.n	8002068 <HAL_I2C_IsDeviceReady+0x100>
      hi2c->State = HAL_I2C_STATE_READY;
 8002026:	2720      	movs	r7, #32
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002028:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 800202a:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800202e:	695a      	ldr	r2, [r3, #20]
 8002030:	f012 0f02 	tst.w	r2, #2
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800203a:	601a      	str	r2, [r3, #0]
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800203c:	d02a      	beq.n	8002094 <HAL_I2C_IsDeviceReady+0x12c>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800203e:	2200      	movs	r2, #0
 8002040:	9203      	str	r2, [sp, #12]
 8002042:	695a      	ldr	r2, [r3, #20]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002044:	491e      	ldr	r1, [pc, #120]	; (80020c0 <HAL_I2C_IsDeviceReady+0x158>)
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002046:	9203      	str	r2, [sp, #12]
 8002048:	699b      	ldr	r3, [r3, #24]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800204a:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800204c:	9303      	str	r3, [sp, #12]
 800204e:	9b03      	ldr	r3, [sp, #12]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002050:	9600      	str	r6, [sp, #0]
 8002052:	2319      	movs	r3, #25
 8002054:	4620      	mov	r0, r4
 8002056:	f7ff f984 	bl	8001362 <I2C_WaitOnFlagUntilTimeout>
 800205a:	2800      	cmp	r0, #0
 800205c:	d1cc      	bne.n	8001ff8 <HAL_I2C_IsDeviceReady+0x90>
        hi2c->State = HAL_I2C_STATE_READY;
 800205e:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8002062:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 8002066:	e78e      	b.n	8001f86 <HAL_I2C_IsDeviceReady+0x1e>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002068:	f1b8 0f00 	cmp.w	r8, #0
 800206c:	d10c      	bne.n	8002088 <HAL_I2C_IsDeviceReady+0x120>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800206e:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002072:	6823      	ldr	r3, [r4, #0]
 8002074:	6959      	ldr	r1, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002076:	695a      	ldr	r2, [r3, #20]
        tmp3 = hi2c->State;
 8002078:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800207c:	f3c1 0140 	ubfx	r1, r1, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002080:	f3c2 2280 	ubfx	r2, r2, #10, #1
        tmp3 = hi2c->State;
 8002084:	b2db      	uxtb	r3, r3
 8002086:	e7ca      	b.n	800201e <HAL_I2C_IsDeviceReady+0xb6>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002088:	f7fe ffa2 	bl	8000fd0 <HAL_GetTick>
 800208c:	1b80      	subs	r0, r0, r6
 800208e:	4580      	cmp	r8, r0
 8002090:	d3ed      	bcc.n	800206e <HAL_I2C_IsDeviceReady+0x106>
 8002092:	e7ee      	b.n	8002072 <HAL_I2C_IsDeviceReady+0x10a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002094:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002098:	4659      	mov	r1, fp
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800209a:	615a      	str	r2, [r3, #20]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800209c:	4620      	mov	r0, r4
 800209e:	9600      	str	r6, [sp, #0]
 80020a0:	2319      	movs	r3, #25
 80020a2:	2201      	movs	r2, #1
 80020a4:	f7ff f95d 	bl	8001362 <I2C_WaitOnFlagUntilTimeout>
 80020a8:	2800      	cmp	r0, #0
 80020aa:	d1a5      	bne.n	8001ff8 <HAL_I2C_IsDeviceReady+0x90>
 80020ac:	3501      	adds	r5, #1
    }while(I2C_Trials++ < Trials);
 80020ae:	45aa      	cmp	sl, r5
 80020b0:	d894      	bhi.n	8001fdc <HAL_I2C_IsDeviceReady+0x74>
    __HAL_UNLOCK(hi2c);
 80020b2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80020b6:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
    return HAL_ERROR;
 80020ba:	2001      	movs	r0, #1
 80020bc:	e763      	b.n	8001f86 <HAL_I2C_IsDeviceReady+0x1e>
 80020be:	bf00      	nop
 80020c0:	00100002 	.word	0x00100002
 80020c4:	ffff0000 	.word	0xffff0000

080020c8 <HAL_I2C_GetState>:
  return hi2c->State;
 80020c8:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 80020cc:	4770      	bx	lr

080020ce <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 80020ce:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 80020d0:	4770      	bx	lr
	...

080020d4 <HAL_RCC_OscConfig>:
	/* Check the parameters */
	assert_param(RCC_OscInitStruct != NULL);
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 80020d4:	6803      	ldr	r3, [r0, #0]
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct) {
 80020d6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 80020da:	07db      	lsls	r3, r3, #31
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct) {
 80020dc:	4605      	mov	r5, r0
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 80020de:	d410      	bmi.n	8002102 <HAL_RCC_OscConfig+0x2e>
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 80020e0:	682b      	ldr	r3, [r5, #0]
 80020e2:	079f      	lsls	r7, r3, #30
 80020e4:	d45e      	bmi.n	80021a4 <HAL_RCC_OscConfig+0xd0>
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 80020e6:	682b      	ldr	r3, [r5, #0]
 80020e8:	0719      	lsls	r1, r3, #28
 80020ea:	f100 8095 	bmi.w	8002218 <HAL_RCC_OscConfig+0x144>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 80020ee:	682b      	ldr	r3, [r5, #0]
 80020f0:	075a      	lsls	r2, r3, #29
 80020f2:	f100 80bf 	bmi.w	8002274 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 80020f6:	69ea      	ldr	r2, [r5, #28]
 80020f8:	2a00      	cmp	r2, #0
 80020fa:	f040 812d 	bne.w	8002358 <HAL_RCC_OscConfig+0x284>
		} else {
			return HAL_ERROR;
		}
	}

	return HAL_OK;
 80020fe:	2000      	movs	r0, #0
 8002100:	e014      	b.n	800212c <HAL_RCC_OscConfig+0x58>
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002102:	4c90      	ldr	r4, [pc, #576]	; (8002344 <HAL_RCC_OscConfig+0x270>)
 8002104:	6863      	ldr	r3, [r4, #4]
 8002106:	f003 030c 	and.w	r3, r3, #12
 800210a:	2b04      	cmp	r3, #4
 800210c:	d007      	beq.n	800211e <HAL_RCC_OscConfig+0x4a>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 800210e:	6863      	ldr	r3, [r4, #4]
 8002110:	f003 030c 	and.w	r3, r3, #12
 8002114:	2b08      	cmp	r3, #8
 8002116:	d10c      	bne.n	8002132 <HAL_RCC_OscConfig+0x5e>
						&& (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE))) {
 8002118:	6863      	ldr	r3, [r4, #4]
 800211a:	03de      	lsls	r6, r3, #15
 800211c:	d509      	bpl.n	8002132 <HAL_RCC_OscConfig+0x5e>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800211e:	6823      	ldr	r3, [r4, #0]
 8002120:	039c      	lsls	r4, r3, #14
 8002122:	d5dd      	bpl.n	80020e0 <HAL_RCC_OscConfig+0xc>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8002124:	686b      	ldr	r3, [r5, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1da      	bne.n	80020e0 <HAL_RCC_OscConfig+0xc>
				return HAL_ERROR;
 800212a:	2001      	movs	r0, #1
}
 800212c:	b002      	add	sp, #8
 800212e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002132:	686b      	ldr	r3, [r5, #4]
 8002134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002138:	d110      	bne.n	800215c <HAL_RCC_OscConfig+0x88>
 800213a:	6823      	ldr	r3, [r4, #0]
 800213c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002140:	6023      	str	r3, [r4, #0]
				tickstart = HAL_GetTick();
 8002142:	f7fe ff45 	bl	8000fd0 <HAL_GetTick>
 8002146:	4606      	mov	r6, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8002148:	6823      	ldr	r3, [r4, #0]
 800214a:	0398      	lsls	r0, r3, #14
 800214c:	d4c8      	bmi.n	80020e0 <HAL_RCC_OscConfig+0xc>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 800214e:	f7fe ff3f 	bl	8000fd0 <HAL_GetTick>
 8002152:	1b80      	subs	r0, r0, r6
 8002154:	2864      	cmp	r0, #100	; 0x64
 8002156:	d9f7      	bls.n	8002148 <HAL_RCC_OscConfig+0x74>
						return HAL_TIMEOUT;
 8002158:	2003      	movs	r0, #3
 800215a:	e7e7      	b.n	800212c <HAL_RCC_OscConfig+0x58>
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800215c:	b99b      	cbnz	r3, 8002186 <HAL_RCC_OscConfig+0xb2>
 800215e:	6823      	ldr	r3, [r4, #0]
 8002160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002164:	6023      	str	r3, [r4, #0]
 8002166:	6823      	ldr	r3, [r4, #0]
 8002168:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800216c:	6023      	str	r3, [r4, #0]
				tickstart = HAL_GetTick();
 800216e:	f7fe ff2f 	bl	8000fd0 <HAL_GetTick>
 8002172:	4606      	mov	r6, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8002174:	6823      	ldr	r3, [r4, #0]
 8002176:	0399      	lsls	r1, r3, #14
 8002178:	d5b2      	bpl.n	80020e0 <HAL_RCC_OscConfig+0xc>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 800217a:	f7fe ff29 	bl	8000fd0 <HAL_GetTick>
 800217e:	1b80      	subs	r0, r0, r6
 8002180:	2864      	cmp	r0, #100	; 0x64
 8002182:	d9f7      	bls.n	8002174 <HAL_RCC_OscConfig+0xa0>
 8002184:	e7e8      	b.n	8002158 <HAL_RCC_OscConfig+0x84>
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002186:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800218a:	6823      	ldr	r3, [r4, #0]
 800218c:	d103      	bne.n	8002196 <HAL_RCC_OscConfig+0xc2>
 800218e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002192:	6023      	str	r3, [r4, #0]
 8002194:	e7d1      	b.n	800213a <HAL_RCC_OscConfig+0x66>
 8002196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800219a:	6023      	str	r3, [r4, #0]
 800219c:	6823      	ldr	r3, [r4, #0]
 800219e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a2:	e7cd      	b.n	8002140 <HAL_RCC_OscConfig+0x6c>
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021a4:	4c67      	ldr	r4, [pc, #412]	; (8002344 <HAL_RCC_OscConfig+0x270>)
 80021a6:	6863      	ldr	r3, [r4, #4]
 80021a8:	f013 0f0c 	tst.w	r3, #12
 80021ac:	d007      	beq.n	80021be <HAL_RCC_OscConfig+0xea>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 80021ae:	6863      	ldr	r3, [r4, #4]
 80021b0:	f003 030c 	and.w	r3, r3, #12
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d110      	bne.n	80021da <HAL_RCC_OscConfig+0x106>
						&& (__HAL_RCC_GET_PLL_OSCSOURCE()
 80021b8:	6863      	ldr	r3, [r4, #4]
 80021ba:	03da      	lsls	r2, r3, #15
 80021bc:	d40d      	bmi.n	80021da <HAL_RCC_OscConfig+0x106>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021be:	6823      	ldr	r3, [r4, #0]
 80021c0:	079b      	lsls	r3, r3, #30
 80021c2:	d502      	bpl.n	80021ca <HAL_RCC_OscConfig+0xf6>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 80021c4:	692b      	ldr	r3, [r5, #16]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d1af      	bne.n	800212a <HAL_RCC_OscConfig+0x56>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 80021ca:	6823      	ldr	r3, [r4, #0]
 80021cc:	696a      	ldr	r2, [r5, #20]
 80021ce:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80021d2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80021d6:	6023      	str	r3, [r4, #0]
 80021d8:	e785      	b.n	80020e6 <HAL_RCC_OscConfig+0x12>
			if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF) {
 80021da:	692a      	ldr	r2, [r5, #16]
 80021dc:	4b5a      	ldr	r3, [pc, #360]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 80021de:	b16a      	cbz	r2, 80021fc <HAL_RCC_OscConfig+0x128>
				__HAL_RCC_HSI_ENABLE();
 80021e0:	2201      	movs	r2, #1
 80021e2:	601a      	str	r2, [r3, #0]
				tickstart = HAL_GetTick();
 80021e4:	f7fe fef4 	bl	8000fd0 <HAL_GetTick>
 80021e8:	4606      	mov	r6, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 80021ea:	6823      	ldr	r3, [r4, #0]
 80021ec:	079f      	lsls	r7, r3, #30
 80021ee:	d4ec      	bmi.n	80021ca <HAL_RCC_OscConfig+0xf6>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 80021f0:	f7fe feee 	bl	8000fd0 <HAL_GetTick>
 80021f4:	1b80      	subs	r0, r0, r6
 80021f6:	2802      	cmp	r0, #2
 80021f8:	d9f7      	bls.n	80021ea <HAL_RCC_OscConfig+0x116>
 80021fa:	e7ad      	b.n	8002158 <HAL_RCC_OscConfig+0x84>
				__HAL_RCC_HSI_DISABLE();
 80021fc:	601a      	str	r2, [r3, #0]
				tickstart = HAL_GetTick();
 80021fe:	f7fe fee7 	bl	8000fd0 <HAL_GetTick>
 8002202:	4606      	mov	r6, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8002204:	6823      	ldr	r3, [r4, #0]
 8002206:	0798      	lsls	r0, r3, #30
 8002208:	f57f af6d 	bpl.w	80020e6 <HAL_RCC_OscConfig+0x12>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 800220c:	f7fe fee0 	bl	8000fd0 <HAL_GetTick>
 8002210:	1b80      	subs	r0, r0, r6
 8002212:	2802      	cmp	r0, #2
 8002214:	d9f6      	bls.n	8002204 <HAL_RCC_OscConfig+0x130>
 8002216:	e79f      	b.n	8002158 <HAL_RCC_OscConfig+0x84>
		if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF) {
 8002218:	69aa      	ldr	r2, [r5, #24]
 800221a:	4c4a      	ldr	r4, [pc, #296]	; (8002344 <HAL_RCC_OscConfig+0x270>)
 800221c:	4b4b      	ldr	r3, [pc, #300]	; (800234c <HAL_RCC_OscConfig+0x278>)
 800221e:	b1da      	cbz	r2, 8002258 <HAL_RCC_OscConfig+0x184>
			__HAL_RCC_LSI_ENABLE();
 8002220:	2201      	movs	r2, #1
 8002222:	601a      	str	r2, [r3, #0]
			tickstart = HAL_GetTick();
 8002224:	f7fe fed4 	bl	8000fd0 <HAL_GetTick>
 8002228:	4606      	mov	r6, r0
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 800222a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800222c:	079b      	lsls	r3, r3, #30
 800222e:	d50d      	bpl.n	800224c <HAL_RCC_OscConfig+0x178>
 * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
 * @param  mdelay: specifies the delay time length, in milliseconds.
 * @retval None
 */
static void RCC_Delay(uint32_t mdelay) {
	__IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002230:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002234:	4b46      	ldr	r3, [pc, #280]	; (8002350 <HAL_RCC_OscConfig+0x27c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	fbb3 f3f2 	udiv	r3, r3, r2
 800223c:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800223e:	bf00      	nop
	do {
		__NOP();
	} while (Delay--);
 8002240:	9b01      	ldr	r3, [sp, #4]
 8002242:	1e5a      	subs	r2, r3, #1
 8002244:	9201      	str	r2, [sp, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f9      	bne.n	800223e <HAL_RCC_OscConfig+0x16a>
 800224a:	e750      	b.n	80020ee <HAL_RCC_OscConfig+0x1a>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 800224c:	f7fe fec0 	bl	8000fd0 <HAL_GetTick>
 8002250:	1b80      	subs	r0, r0, r6
 8002252:	2802      	cmp	r0, #2
 8002254:	d9e9      	bls.n	800222a <HAL_RCC_OscConfig+0x156>
 8002256:	e77f      	b.n	8002158 <HAL_RCC_OscConfig+0x84>
			__HAL_RCC_LSI_DISABLE();
 8002258:	601a      	str	r2, [r3, #0]
			tickstart = HAL_GetTick();
 800225a:	f7fe feb9 	bl	8000fd0 <HAL_GetTick>
 800225e:	4606      	mov	r6, r0
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8002260:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002262:	079f      	lsls	r7, r3, #30
 8002264:	f57f af43 	bpl.w	80020ee <HAL_RCC_OscConfig+0x1a>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8002268:	f7fe feb2 	bl	8000fd0 <HAL_GetTick>
 800226c:	1b80      	subs	r0, r0, r6
 800226e:	2802      	cmp	r0, #2
 8002270:	d9f6      	bls.n	8002260 <HAL_RCC_OscConfig+0x18c>
 8002272:	e771      	b.n	8002158 <HAL_RCC_OscConfig+0x84>
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 8002274:	4c33      	ldr	r4, [pc, #204]	; (8002344 <HAL_RCC_OscConfig+0x270>)
 8002276:	69e3      	ldr	r3, [r4, #28]
 8002278:	00d8      	lsls	r0, r3, #3
 800227a:	d424      	bmi.n	80022c6 <HAL_RCC_OscConfig+0x1f2>
			pwrclkchanged = SET;
 800227c:	2701      	movs	r7, #1
			__HAL_RCC_PWR_CLK_ENABLE()
 800227e:	69e3      	ldr	r3, [r4, #28]
 8002280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002284:	61e3      	str	r3, [r4, #28]
 8002286:	69e3      	ldr	r3, [r4, #28]
 8002288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	9b00      	ldr	r3, [sp, #0]
		if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8002290:	4e30      	ldr	r6, [pc, #192]	; (8002354 <HAL_RCC_OscConfig+0x280>)
 8002292:	6833      	ldr	r3, [r6, #0]
 8002294:	05d9      	lsls	r1, r3, #23
 8002296:	d518      	bpl.n	80022ca <HAL_RCC_OscConfig+0x1f6>
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002298:	68eb      	ldr	r3, [r5, #12]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d126      	bne.n	80022ec <HAL_RCC_OscConfig+0x218>
 800229e:	6a23      	ldr	r3, [r4, #32]
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6223      	str	r3, [r4, #32]
			tickstart = HAL_GetTick();
 80022a6:	f7fe fe93 	bl	8000fd0 <HAL_GetTick>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80022aa:	f241 3688 	movw	r6, #5000	; 0x1388
			tickstart = HAL_GetTick();
 80022ae:	4680      	mov	r8, r0
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 80022b0:	6a23      	ldr	r3, [r4, #32]
 80022b2:	079b      	lsls	r3, r3, #30
 80022b4:	d53f      	bpl.n	8002336 <HAL_RCC_OscConfig+0x262>
		if (pwrclkchanged == SET) {
 80022b6:	2f00      	cmp	r7, #0
 80022b8:	f43f af1d 	beq.w	80020f6 <HAL_RCC_OscConfig+0x22>
			__HAL_RCC_PWR_CLK_DISABLE();
 80022bc:	69e3      	ldr	r3, [r4, #28]
 80022be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022c2:	61e3      	str	r3, [r4, #28]
 80022c4:	e717      	b.n	80020f6 <HAL_RCC_OscConfig+0x22>
		FlagStatus pwrclkchanged = RESET;
 80022c6:	2700      	movs	r7, #0
 80022c8:	e7e2      	b.n	8002290 <HAL_RCC_OscConfig+0x1bc>
			SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ca:	6833      	ldr	r3, [r6, #0]
 80022cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d0:	6033      	str	r3, [r6, #0]
			tickstart = HAL_GetTick();
 80022d2:	f7fe fe7d 	bl	8000fd0 <HAL_GetTick>
 80022d6:	4680      	mov	r8, r0
			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 80022d8:	6833      	ldr	r3, [r6, #0]
 80022da:	05da      	lsls	r2, r3, #23
 80022dc:	d4dc      	bmi.n	8002298 <HAL_RCC_OscConfig+0x1c4>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 80022de:	f7fe fe77 	bl	8000fd0 <HAL_GetTick>
 80022e2:	eba0 0008 	sub.w	r0, r0, r8
 80022e6:	2864      	cmp	r0, #100	; 0x64
 80022e8:	d9f6      	bls.n	80022d8 <HAL_RCC_OscConfig+0x204>
 80022ea:	e735      	b.n	8002158 <HAL_RCC_OscConfig+0x84>
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ec:	b9ab      	cbnz	r3, 800231a <HAL_RCC_OscConfig+0x246>
 80022ee:	6a23      	ldr	r3, [r4, #32]
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80022f0:	f241 3888 	movw	r8, #5000	; 0x1388
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f4:	f023 0301 	bic.w	r3, r3, #1
 80022f8:	6223      	str	r3, [r4, #32]
 80022fa:	6a23      	ldr	r3, [r4, #32]
 80022fc:	f023 0304 	bic.w	r3, r3, #4
 8002300:	6223      	str	r3, [r4, #32]
			tickstart = HAL_GetTick();
 8002302:	f7fe fe65 	bl	8000fd0 <HAL_GetTick>
 8002306:	4606      	mov	r6, r0
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8002308:	6a23      	ldr	r3, [r4, #32]
 800230a:	0798      	lsls	r0, r3, #30
 800230c:	d5d3      	bpl.n	80022b6 <HAL_RCC_OscConfig+0x1e2>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 800230e:	f7fe fe5f 	bl	8000fd0 <HAL_GetTick>
 8002312:	1b80      	subs	r0, r0, r6
 8002314:	4540      	cmp	r0, r8
 8002316:	d9f7      	bls.n	8002308 <HAL_RCC_OscConfig+0x234>
 8002318:	e71e      	b.n	8002158 <HAL_RCC_OscConfig+0x84>
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800231a:	2b05      	cmp	r3, #5
 800231c:	6a23      	ldr	r3, [r4, #32]
 800231e:	d103      	bne.n	8002328 <HAL_RCC_OscConfig+0x254>
 8002320:	f043 0304 	orr.w	r3, r3, #4
 8002324:	6223      	str	r3, [r4, #32]
 8002326:	e7ba      	b.n	800229e <HAL_RCC_OscConfig+0x1ca>
 8002328:	f023 0301 	bic.w	r3, r3, #1
 800232c:	6223      	str	r3, [r4, #32]
 800232e:	6a23      	ldr	r3, [r4, #32]
 8002330:	f023 0304 	bic.w	r3, r3, #4
 8002334:	e7b6      	b.n	80022a4 <HAL_RCC_OscConfig+0x1d0>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8002336:	f7fe fe4b 	bl	8000fd0 <HAL_GetTick>
 800233a:	eba0 0008 	sub.w	r0, r0, r8
 800233e:	42b0      	cmp	r0, r6
 8002340:	d9b6      	bls.n	80022b0 <HAL_RCC_OscConfig+0x1dc>
 8002342:	e709      	b.n	8002158 <HAL_RCC_OscConfig+0x84>
 8002344:	40021000 	.word	0x40021000
 8002348:	42420000 	.word	0x42420000
 800234c:	42420480 	.word	0x42420480
 8002350:	20000020 	.word	0x20000020
 8002354:	40007000 	.word	0x40007000
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {
 8002358:	4c22      	ldr	r4, [pc, #136]	; (80023e4 <HAL_RCC_OscConfig+0x310>)
 800235a:	6863      	ldr	r3, [r4, #4]
 800235c:	f003 030c 	and.w	r3, r3, #12
 8002360:	2b08      	cmp	r3, #8
 8002362:	f43f aee2 	beq.w	800212a <HAL_RCC_OscConfig+0x56>
 8002366:	2300      	movs	r3, #0
 8002368:	4e1f      	ldr	r6, [pc, #124]	; (80023e8 <HAL_RCC_OscConfig+0x314>)
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 800236a:	2a02      	cmp	r2, #2
				__HAL_RCC_PLL_DISABLE();
 800236c:	6033      	str	r3, [r6, #0]
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 800236e:	d12b      	bne.n	80023c8 <HAL_RCC_OscConfig+0x2f4>
				tickstart = HAL_GetTick();
 8002370:	f7fe fe2e 	bl	8000fd0 <HAL_GetTick>
 8002374:	4607      	mov	r7, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8002376:	6823      	ldr	r3, [r4, #0]
 8002378:	0199      	lsls	r1, r3, #6
 800237a:	d41f      	bmi.n	80023bc <HAL_RCC_OscConfig+0x2e8>
				if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE) {
 800237c:	6a2b      	ldr	r3, [r5, #32]
 800237e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002382:	d105      	bne.n	8002390 <HAL_RCC_OscConfig+0x2bc>
					__HAL_RCC_HSE_PREDIV_CONFIG(
 8002384:	6862      	ldr	r2, [r4, #4]
 8002386:	68a9      	ldr	r1, [r5, #8]
 8002388:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800238c:	430a      	orrs	r2, r1
 800238e:	6062      	str	r2, [r4, #4]
				__HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002390:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002392:	6862      	ldr	r2, [r4, #4]
 8002394:	430b      	orrs	r3, r1
 8002396:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800239a:	4313      	orrs	r3, r2
 800239c:	6063      	str	r3, [r4, #4]
				__HAL_RCC_PLL_ENABLE();
 800239e:	2301      	movs	r3, #1
 80023a0:	6033      	str	r3, [r6, #0]
				tickstart = HAL_GetTick();
 80023a2:	f7fe fe15 	bl	8000fd0 <HAL_GetTick>
 80023a6:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 80023a8:	6823      	ldr	r3, [r4, #0]
 80023aa:	019a      	lsls	r2, r3, #6
 80023ac:	f53f aea7 	bmi.w	80020fe <HAL_RCC_OscConfig+0x2a>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 80023b0:	f7fe fe0e 	bl	8000fd0 <HAL_GetTick>
 80023b4:	1b40      	subs	r0, r0, r5
 80023b6:	2802      	cmp	r0, #2
 80023b8:	d9f6      	bls.n	80023a8 <HAL_RCC_OscConfig+0x2d4>
 80023ba:	e6cd      	b.n	8002158 <HAL_RCC_OscConfig+0x84>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 80023bc:	f7fe fe08 	bl	8000fd0 <HAL_GetTick>
 80023c0:	1bc0      	subs	r0, r0, r7
 80023c2:	2802      	cmp	r0, #2
 80023c4:	d9d7      	bls.n	8002376 <HAL_RCC_OscConfig+0x2a2>
 80023c6:	e6c7      	b.n	8002158 <HAL_RCC_OscConfig+0x84>
				tickstart = HAL_GetTick();
 80023c8:	f7fe fe02 	bl	8000fd0 <HAL_GetTick>
 80023cc:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 80023ce:	6823      	ldr	r3, [r4, #0]
 80023d0:	019b      	lsls	r3, r3, #6
 80023d2:	f57f ae94 	bpl.w	80020fe <HAL_RCC_OscConfig+0x2a>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 80023d6:	f7fe fdfb 	bl	8000fd0 <HAL_GetTick>
 80023da:	1b40      	subs	r0, r0, r5
 80023dc:	2802      	cmp	r0, #2
 80023de:	d9f6      	bls.n	80023ce <HAL_RCC_OscConfig+0x2fa>
 80023e0:	e6ba      	b.n	8002158 <HAL_RCC_OscConfig+0x84>
 80023e2:	bf00      	nop
 80023e4:	40021000 	.word	0x40021000
 80023e8:	42420060 	.word	0x42420060

080023ec <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void) {
 80023ec:	b530      	push	{r4, r5, lr}
	const uint8_t aPLLMULFactorTable[16] = { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
 80023ee:	4b19      	ldr	r3, [pc, #100]	; (8002454 <HAL_RCC_GetSysClockFreq+0x68>)
uint32_t HAL_RCC_GetSysClockFreq(void) {
 80023f0:	b087      	sub	sp, #28
	const uint8_t aPLLMULFactorTable[16] = { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
 80023f2:	ac02      	add	r4, sp, #8
 80023f4:	f103 0510 	add.w	r5, r3, #16
 80023f8:	4622      	mov	r2, r4
 80023fa:	6818      	ldr	r0, [r3, #0]
 80023fc:	6859      	ldr	r1, [r3, #4]
 80023fe:	3308      	adds	r3, #8
 8002400:	c203      	stmia	r2!, {r0, r1}
 8002402:	42ab      	cmp	r3, r5
 8002404:	4614      	mov	r4, r2
 8002406:	d1f7      	bne.n	80023f8 <HAL_RCC_GetSysClockFreq+0xc>
	const uint8_t aPredivFactorTable[2] = { 1, 2 };
 8002408:	2301      	movs	r3, #1
 800240a:	f88d 3004 	strb.w	r3, [sp, #4]
 800240e:	2302      	movs	r3, #2
	tmpreg = RCC->CFGR;
 8002410:	4911      	ldr	r1, [pc, #68]	; (8002458 <HAL_RCC_GetSysClockFreq+0x6c>)
	const uint8_t aPredivFactorTable[2] = { 1, 2 };
 8002412:	f88d 3005 	strb.w	r3, [sp, #5]
	tmpreg = RCC->CFGR;
 8002416:	684b      	ldr	r3, [r1, #4]
	switch (tmpreg & RCC_CFGR_SWS) {
 8002418:	f003 020c 	and.w	r2, r3, #12
 800241c:	2a08      	cmp	r2, #8
 800241e:	d117      	bne.n	8002450 <HAL_RCC_GetSysClockFreq+0x64>
				>> RCC_CFGR_PLLMULL_Pos];
 8002420:	f3c3 4283 	ubfx	r2, r3, #18, #4
		pllmul = aPLLMULFactorTable[(uint32_t) (tmpreg & RCC_CFGR_PLLMULL)
 8002424:	a806      	add	r0, sp, #24
 8002426:	4402      	add	r2, r0
		if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2) {
 8002428:	03db      	lsls	r3, r3, #15
		pllmul = aPLLMULFactorTable[(uint32_t) (tmpreg & RCC_CFGR_PLLMULL)
 800242a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
		if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2) {
 800242e:	d50c      	bpl.n	800244a <HAL_RCC_GetSysClockFreq+0x5e>
			prediv = aPredivFactorTable[(uint32_t) (RCC->CFGR
 8002430:	684b      	ldr	r3, [r1, #4]
			pllclk = (uint32_t) ((HSE_VALUE * pllmul) / prediv);
 8002432:	480a      	ldr	r0, [pc, #40]	; (800245c <HAL_RCC_GetSysClockFreq+0x70>)
					& RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002434:	f3c3 4340 	ubfx	r3, r3, #17, #1
			pllclk = (uint32_t) ((HSE_VALUE * pllmul) / prediv);
 8002438:	4350      	muls	r0, r2
			prediv = aPredivFactorTable[(uint32_t) (RCC->CFGR
 800243a:	aa06      	add	r2, sp, #24
 800243c:	4413      	add	r3, r2
 800243e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
			pllclk = (uint32_t) ((HSE_VALUE * pllmul) / prediv);
 8002442:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002446:	b007      	add	sp, #28
 8002448:	bd30      	pop	{r4, r5, pc}
			pllclk = (uint32_t) ((HSI_VALUE >> 1) * pllmul);
 800244a:	4805      	ldr	r0, [pc, #20]	; (8002460 <HAL_RCC_GetSysClockFreq+0x74>)
 800244c:	4350      	muls	r0, r2
 800244e:	e7fa      	b.n	8002446 <HAL_RCC_GetSysClockFreq+0x5a>
		sysclockfreq = HSE_VALUE;
 8002450:	4802      	ldr	r0, [pc, #8]	; (800245c <HAL_RCC_GetSysClockFreq+0x70>)
	return sysclockfreq;
 8002452:	e7f8      	b.n	8002446 <HAL_RCC_GetSysClockFreq+0x5a>
 8002454:	08005b68 	.word	0x08005b68
 8002458:	40021000 	.word	0x40021000
 800245c:	007a1200 	.word	0x007a1200
 8002460:	003d0900 	.word	0x003d0900

08002464 <HAL_RCC_ClockConfig>:
	if (FLatency > (FLASH->ACR & FLASH_ACR_LATENCY)) {
 8002464:	4a54      	ldr	r2, [pc, #336]	; (80025b8 <HAL_RCC_ClockConfig+0x154>)
		uint32_t FLatency) {
 8002466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (FLatency > (FLASH->ACR & FLASH_ACR_LATENCY)) {
 800246a:	6813      	ldr	r3, [r2, #0]
		uint32_t FLatency) {
 800246c:	4605      	mov	r5, r0
	if (FLatency > (FLASH->ACR & FLASH_ACR_LATENCY)) {
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	428b      	cmp	r3, r1
		uint32_t FLatency) {
 8002474:	460e      	mov	r6, r1
	if (FLatency > (FLASH->ACR & FLASH_ACR_LATENCY)) {
 8002476:	d32a      	bcc.n	80024ce <HAL_RCC_ClockConfig+0x6a>
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 8002478:	6829      	ldr	r1, [r5, #0]
 800247a:	078c      	lsls	r4, r1, #30
 800247c:	d434      	bmi.n	80024e8 <HAL_RCC_ClockConfig+0x84>
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 800247e:	07ca      	lsls	r2, r1, #31
 8002480:	d447      	bmi.n	8002512 <HAL_RCC_ClockConfig+0xae>
	if (FLatency < (FLASH->ACR & FLASH_ACR_LATENCY)) {
 8002482:	4a4d      	ldr	r2, [pc, #308]	; (80025b8 <HAL_RCC_ClockConfig+0x154>)
 8002484:	6813      	ldr	r3, [r2, #0]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	429e      	cmp	r6, r3
 800248c:	f0c0 8082 	bcc.w	8002594 <HAL_RCC_ClockConfig+0x130>
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8002490:	682a      	ldr	r2, [r5, #0]
 8002492:	4c4a      	ldr	r4, [pc, #296]	; (80025bc <HAL_RCC_ClockConfig+0x158>)
 8002494:	f012 0f04 	tst.w	r2, #4
 8002498:	f040 8087 	bne.w	80025aa <HAL_RCC_ClockConfig+0x146>
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 800249c:	0713      	lsls	r3, r2, #28
 800249e:	d506      	bpl.n	80024ae <HAL_RCC_ClockConfig+0x4a>
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 80024a0:	6863      	ldr	r3, [r4, #4]
 80024a2:	692a      	ldr	r2, [r5, #16]
 80024a4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80024a8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80024ac:	6063      	str	r3, [r4, #4]
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 80024ae:	f7ff ff9d 	bl	80023ec <HAL_RCC_GetSysClockFreq>
			>> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024b2:	6863      	ldr	r3, [r4, #4]
 80024b4:	4a42      	ldr	r2, [pc, #264]	; (80025c0 <HAL_RCC_ClockConfig+0x15c>)
 80024b6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80024ba:	5cd3      	ldrb	r3, [r2, r3]
 80024bc:	40d8      	lsrs	r0, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 80024be:	4b41      	ldr	r3, [pc, #260]	; (80025c4 <HAL_RCC_ClockConfig+0x160>)
 80024c0:	6018      	str	r0, [r3, #0]
	HAL_InitTick(TICK_INT_PRIORITY);
 80024c2:	2000      	movs	r0, #0
 80024c4:	f7fe fd42 	bl	8000f4c <HAL_InitTick>
	return HAL_OK;
 80024c8:	2000      	movs	r0, #0
}
 80024ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		__HAL_FLASH_SET_LATENCY(FLatency);
 80024ce:	6813      	ldr	r3, [r2, #0]
 80024d0:	f023 0307 	bic.w	r3, r3, #7
 80024d4:	430b      	orrs	r3, r1
 80024d6:	6013      	str	r3, [r2, #0]
		if ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency) {
 80024d8:	6813      	ldr	r3, [r2, #0]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	4299      	cmp	r1, r3
 80024e0:	d0ca      	beq.n	8002478 <HAL_RCC_ClockConfig+0x14>
			return HAL_ERROR;
 80024e2:	2001      	movs	r0, #1
 80024e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024e8:	4b34      	ldr	r3, [pc, #208]	; (80025bc <HAL_RCC_ClockConfig+0x158>)
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 80024ea:	f011 0f04 	tst.w	r1, #4
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024ee:	bf1e      	ittt	ne
 80024f0:	685a      	ldrne	r2, [r3, #4]
 80024f2:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80024f6:	605a      	strne	r2, [r3, #4]
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 80024f8:	0708      	lsls	r0, r1, #28
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024fa:	bf42      	ittt	mi
 80024fc:	685a      	ldrmi	r2, [r3, #4]
 80024fe:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8002502:	605a      	strmi	r2, [r3, #4]
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	68a8      	ldr	r0, [r5, #8]
 8002508:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800250c:	4302      	orrs	r2, r0
 800250e:	605a      	str	r2, [r3, #4]
 8002510:	e7b5      	b.n	800247e <HAL_RCC_ClockConfig+0x1a>
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8002512:	686a      	ldr	r2, [r5, #4]
 8002514:	4c29      	ldr	r4, [pc, #164]	; (80025bc <HAL_RCC_ClockConfig+0x158>)
 8002516:	2a01      	cmp	r2, #1
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8002518:	6823      	ldr	r3, [r4, #0]
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 800251a:	d11c      	bne.n	8002556 <HAL_RCC_ClockConfig+0xf2>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 800251c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8002520:	d0df      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x7e>
		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002522:	6863      	ldr	r3, [r4, #4]
				if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8002524:	f241 3888 	movw	r8, #5000	; 0x1388
		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002528:	f023 0303 	bic.w	r3, r3, #3
 800252c:	4313      	orrs	r3, r2
 800252e:	6063      	str	r3, [r4, #4]
		tickstart = HAL_GetTick();
 8002530:	f7fe fd4e 	bl	8000fd0 <HAL_GetTick>
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8002534:	686b      	ldr	r3, [r5, #4]
		tickstart = HAL_GetTick();
 8002536:	4607      	mov	r7, r0
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8002538:	2b01      	cmp	r3, #1
 800253a:	d114      	bne.n	8002566 <HAL_RCC_ClockConfig+0x102>
			while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE) {
 800253c:	6863      	ldr	r3, [r4, #4]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	2b04      	cmp	r3, #4
 8002544:	d09d      	beq.n	8002482 <HAL_RCC_ClockConfig+0x1e>
				if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8002546:	f7fe fd43 	bl	8000fd0 <HAL_GetTick>
 800254a:	1bc0      	subs	r0, r0, r7
 800254c:	4540      	cmp	r0, r8
 800254e:	d9f5      	bls.n	800253c <HAL_RCC_ClockConfig+0xd8>
					return HAL_TIMEOUT;
 8002550:	2003      	movs	r0, #3
 8002552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {
 8002556:	2a02      	cmp	r2, #2
 8002558:	d102      	bne.n	8002560 <HAL_RCC_ClockConfig+0xfc>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 800255a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800255e:	e7df      	b.n	8002520 <HAL_RCC_ClockConfig+0xbc>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8002560:	f013 0f02 	tst.w	r3, #2
 8002564:	e7dc      	b.n	8002520 <HAL_RCC_ClockConfig+0xbc>
		} else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {
 8002566:	2b02      	cmp	r3, #2
 8002568:	d10f      	bne.n	800258a <HAL_RCC_ClockConfig+0x126>
			while (__HAL_RCC_GET_SYSCLK_SOURCE()
 800256a:	6863      	ldr	r3, [r4, #4]
 800256c:	f003 030c 	and.w	r3, r3, #12
 8002570:	2b08      	cmp	r3, #8
 8002572:	d086      	beq.n	8002482 <HAL_RCC_ClockConfig+0x1e>
				if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8002574:	f7fe fd2c 	bl	8000fd0 <HAL_GetTick>
 8002578:	1bc0      	subs	r0, r0, r7
 800257a:	4540      	cmp	r0, r8
 800257c:	d9f5      	bls.n	800256a <HAL_RCC_ClockConfig+0x106>
 800257e:	e7e7      	b.n	8002550 <HAL_RCC_ClockConfig+0xec>
				if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8002580:	f7fe fd26 	bl	8000fd0 <HAL_GetTick>
 8002584:	1bc0      	subs	r0, r0, r7
 8002586:	4540      	cmp	r0, r8
 8002588:	d8e2      	bhi.n	8002550 <HAL_RCC_ClockConfig+0xec>
			while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI) {
 800258a:	6863      	ldr	r3, [r4, #4]
 800258c:	f013 0f0c 	tst.w	r3, #12
 8002590:	d1f6      	bne.n	8002580 <HAL_RCC_ClockConfig+0x11c>
 8002592:	e776      	b.n	8002482 <HAL_RCC_ClockConfig+0x1e>
		__HAL_FLASH_SET_LATENCY(FLatency);
 8002594:	6813      	ldr	r3, [r2, #0]
 8002596:	f023 0307 	bic.w	r3, r3, #7
 800259a:	4333      	orrs	r3, r6
 800259c:	6013      	str	r3, [r2, #0]
		if ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency) {
 800259e:	6813      	ldr	r3, [r2, #0]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	429e      	cmp	r6, r3
 80025a6:	d19c      	bne.n	80024e2 <HAL_RCC_ClockConfig+0x7e>
 80025a8:	e772      	b.n	8002490 <HAL_RCC_ClockConfig+0x2c>
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 80025aa:	6863      	ldr	r3, [r4, #4]
 80025ac:	68e9      	ldr	r1, [r5, #12]
 80025ae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80025b2:	430b      	orrs	r3, r1
 80025b4:	6063      	str	r3, [r4, #4]
 80025b6:	e771      	b.n	800249c <HAL_RCC_ClockConfig+0x38>
 80025b8:	40022000 	.word	0x40022000
 80025bc:	40021000 	.word	0x40021000
 80025c0:	080064c6 	.word	0x080064c6
 80025c4:	20000020 	.word	0x20000020

080025c8 <HAL_RCC_GetPCLK1Freq>:
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025c8:	4b04      	ldr	r3, [pc, #16]	; (80025dc <HAL_RCC_GetPCLK1Freq+0x14>)
 80025ca:	4a05      	ldr	r2, [pc, #20]	; (80025e0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80025d2:	5cd3      	ldrb	r3, [r2, r3]
 80025d4:	4a03      	ldr	r2, [pc, #12]	; (80025e4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80025d6:	6810      	ldr	r0, [r2, #0]
}
 80025d8:	40d8      	lsrs	r0, r3
 80025da:	4770      	bx	lr
 80025dc:	40021000 	.word	0x40021000
 80025e0:	080064d6 	.word	0x080064d6
 80025e4:	20000020 	.word	0x20000020

080025e8 <TIM_OC1_SetConfig>:
	uint32_t tmpccmrx = 0U;
	uint32_t tmpccer = 0U;
	uint32_t tmpcr2 = 0U;

	/* Disable the Channel 1: Reset the CC1E Bit */
	TIMx->CCER &= ~TIM_CCER_CC1E;
 80025e8:	6a03      	ldr	r3, [r0, #32]
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config) {
 80025ea:	b570      	push	{r4, r5, r6, lr}
	TIMx->CCER &= ~TIM_CCER_CC1E;
 80025ec:	f023 0301 	bic.w	r3, r3, #1
 80025f0:	6203      	str	r3, [r0, #32]

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 80025f2:	6a03      	ldr	r3, [r0, #32]
	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 80025f4:	6844      	ldr	r4, [r0, #4]

	/* Get the TIMx CCMR1 register value */
	tmpccmrx = TIMx->CCMR1;
 80025f6:	6982      	ldr	r2, [r0, #24]

	/* Reset the Output Compare Mode Bits */
	tmpccmrx &= ~TIM_CCMR1_OC1M;
	tmpccmrx &= ~TIM_CCMR1_CC1S;
	/* Select the Output Compare Mode */
	tmpccmrx |= OC_Config->OCMode;
 80025f8:	680d      	ldr	r5, [r1, #0]
	tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025fa:	f022 0273 	bic.w	r2, r2, #115	; 0x73
	tmpccmrx |= OC_Config->OCMode;
 80025fe:	432a      	orrs	r2, r5

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC1P;
	/* Set the Output Compare Polarity */
	tmpccer |= OC_Config->OCPolarity;
 8002600:	688d      	ldr	r5, [r1, #8]
	tmpccer &= ~TIM_CCER_CC1P;
 8002602:	f023 0302 	bic.w	r3, r3, #2
	tmpccer |= OC_Config->OCPolarity;
 8002606:	432b      	orrs	r3, r5

	if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1)) {
 8002608:	4d0a      	ldr	r5, [pc, #40]	; (8002634 <TIM_OC1_SetConfig+0x4c>)
 800260a:	42a8      	cmp	r0, r5
 800260c:	d10b      	bne.n	8002626 <TIM_OC1_SetConfig+0x3e>
		assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

		/* Reset the Output N Polarity level */
		tmpccer &= ~TIM_CCER_CC1NP;
		/* Set the Output N Polarity */
		tmpccer |= OC_Config->OCNPolarity;
 800260e:	68cd      	ldr	r5, [r1, #12]
		tmpccer &= ~TIM_CCER_CC1NP;
 8002610:	f023 0308 	bic.w	r3, r3, #8
		tmpccer |= OC_Config->OCNPolarity;
 8002614:	432b      	orrs	r3, r5
		tmpcr2 &= ~TIM_CR2_OIS1;
		tmpcr2 &= ~TIM_CR2_OIS1N;
		/* Set the Output Idle state */
		tmpcr2 |= OC_Config->OCIdleState;
		/* Set the Output N Idle state */
		tmpcr2 |= OC_Config->OCNIdleState;
 8002616:	698e      	ldr	r6, [r1, #24]
 8002618:	694d      	ldr	r5, [r1, #20]
		tmpcr2 &= ~TIM_CR2_OIS1N;
 800261a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
		tmpcr2 |= OC_Config->OCNIdleState;
 800261e:	4335      	orrs	r5, r6
		tmpccer &= ~TIM_CCER_CC1NE;
 8002620:	f023 0304 	bic.w	r3, r3, #4
		tmpcr2 |= OC_Config->OCNIdleState;
 8002624:	432c      	orrs	r4, r5
	}
	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 8002626:	6044      	str	r4, [r0, #4]

	/* Write to TIMx CCMR1 */
	TIMx->CCMR1 = tmpccmrx;
 8002628:	6182      	str	r2, [r0, #24]

	/* Set the Capture Compare Register value */
	TIMx->CCR1 = OC_Config->Pulse;
 800262a:	684a      	ldr	r2, [r1, #4]
 800262c:	6342      	str	r2, [r0, #52]	; 0x34

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 800262e:	6203      	str	r3, [r0, #32]
 8002630:	bd70      	pop	{r4, r5, r6, pc}
 8002632:	bf00      	nop
 8002634:	40012c00 	.word	0x40012c00

08002638 <TIM_OC3_SetConfig>:
	uint32_t tmpccmrx = 0U;
	uint32_t tmpccer = 0U;
	uint32_t tmpcr2 = 0U;

	/* Disable the Channel 3: Reset the CC2E Bit */
	TIMx->CCER &= ~TIM_CCER_CC3E;
 8002638:	6a03      	ldr	r3, [r0, #32]
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config) {
 800263a:	b570      	push	{r4, r5, r6, lr}
	TIMx->CCER &= ~TIM_CCER_CC3E;
 800263c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002640:	6203      	str	r3, [r0, #32]

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 8002642:	6a03      	ldr	r3, [r0, #32]
	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 8002644:	6844      	ldr	r4, [r0, #4]

	/* Get the TIMx CCMR2 register value */
	tmpccmrx = TIMx->CCMR2;
 8002646:	69c2      	ldr	r2, [r0, #28]

	/* Reset the Output Compare mode and Capture/Compare selection Bits */
	tmpccmrx &= ~TIM_CCMR2_OC3M;
	tmpccmrx &= ~TIM_CCMR2_CC3S;
	/* Select the Output Compare Mode */
	tmpccmrx |= OC_Config->OCMode;
 8002648:	680d      	ldr	r5, [r1, #0]
	tmpccmrx &= ~TIM_CCMR2_CC3S;
 800264a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
	tmpccmrx |= OC_Config->OCMode;
 800264e:	432a      	orrs	r2, r5

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC3P;
	/* Set the Output Compare Polarity */
	tmpccer |= (OC_Config->OCPolarity << 8U);
 8002650:	688d      	ldr	r5, [r1, #8]
	tmpccer &= ~TIM_CCER_CC3P;
 8002652:	f423 7300 	bic.w	r3, r3, #512	; 0x200
	tmpccer |= (OC_Config->OCPolarity << 8U);
 8002656:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

	if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3)) {
 800265a:	4d0b      	ldr	r5, [pc, #44]	; (8002688 <TIM_OC3_SetConfig+0x50>)
 800265c:	42a8      	cmp	r0, r5
 800265e:	d10d      	bne.n	800267c <TIM_OC3_SetConfig+0x44>
		assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

		/* Reset the Output N Polarity level */
		tmpccer &= ~TIM_CCER_CC3NP;
		/* Set the Output N Polarity */
		tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002660:	68cd      	ldr	r5, [r1, #12]
		tmpccer &= ~TIM_CCER_CC3NP;
 8002662:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
		tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002666:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		tmpcr2 &= ~TIM_CR2_OIS3;
		tmpcr2 &= ~TIM_CR2_OIS3N;
		/* Set the Output Idle state */
		tmpcr2 |= (OC_Config->OCIdleState << 4U);
		/* Set the Output N Idle state */
		tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800266a:	698e      	ldr	r6, [r1, #24]
		tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800266c:	694d      	ldr	r5, [r1, #20]
		tmpcr2 &= ~TIM_CR2_OIS3N;
 800266e:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
		tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002672:	4335      	orrs	r5, r6
		tmpccer &= ~TIM_CCER_CC3NE;
 8002674:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
		tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002678:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
	}

	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 800267c:	6044      	str	r4, [r0, #4]

	/* Write to TIMx CCMR2 */
	TIMx->CCMR2 = tmpccmrx;
 800267e:	61c2      	str	r2, [r0, #28]

	/* Set the Capture Compare Register value */
	TIMx->CCR3 = OC_Config->Pulse;
 8002680:	684a      	ldr	r2, [r1, #4]
 8002682:	63c2      	str	r2, [r0, #60]	; 0x3c

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 8002684:	6203      	str	r3, [r0, #32]
 8002686:	bd70      	pop	{r4, r5, r6, pc}
 8002688:	40012c00 	.word	0x40012c00

0800268c <TIM_OC4_SetConfig>:
	uint32_t tmpccmrx = 0U;
	uint32_t tmpccer = 0U;
	uint32_t tmpcr2 = 0U;

	/* Disable the Channel 4: Reset the CC4E Bit */
	TIMx->CCER &= ~TIM_CCER_CC4E;
 800268c:	6a03      	ldr	r3, [r0, #32]
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config) {
 800268e:	b530      	push	{r4, r5, lr}
	TIMx->CCER &= ~TIM_CCER_CC4E;
 8002690:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002694:	6203      	str	r3, [r0, #32]

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 8002696:	6a03      	ldr	r3, [r0, #32]
	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 8002698:	6844      	ldr	r4, [r0, #4]

	/* Get the TIMx CCMR2 register value */
	tmpccmrx = TIMx->CCMR2;
 800269a:	69c2      	ldr	r2, [r0, #28]
	/* Reset the Output Compare mode and Capture/Compare selection Bits */
	tmpccmrx &= ~TIM_CCMR2_OC4M;
	tmpccmrx &= ~TIM_CCMR2_CC4S;

	/* Select the Output Compare Mode */
	tmpccmrx |= (OC_Config->OCMode << 8U);
 800269c:	680d      	ldr	r5, [r1, #0]
	tmpccmrx &= ~TIM_CCMR2_CC4S;
 800269e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
	tmpccmrx |= (OC_Config->OCMode << 8U);
 80026a2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC4P;
	/* Set the Output Compare Polarity */
	tmpccer |= (OC_Config->OCPolarity << 12U);
 80026a6:	688d      	ldr	r5, [r1, #8]
	tmpccer &= ~TIM_CCER_CC4P;
 80026a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
	tmpccer |= (OC_Config->OCPolarity << 12U);
 80026ac:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

	if (IS_TIM_BREAK_INSTANCE(TIMx)) {
 80026b0:	4d06      	ldr	r5, [pc, #24]	; (80026cc <TIM_OC4_SetConfig+0x40>)
 80026b2:	42a8      	cmp	r0, r5
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

		/* Reset the Output Compare IDLE State */
		tmpcr2 &= ~TIM_CR2_OIS4;
		/* Set the Output Idle state */
		tmpcr2 |= (OC_Config->OCIdleState << 6);
 80026b4:	bf02      	ittt	eq
 80026b6:	694d      	ldreq	r5, [r1, #20]
		tmpcr2 &= ~TIM_CR2_OIS4;
 80026b8:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
		tmpcr2 |= (OC_Config->OCIdleState << 6);
 80026bc:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
	}

	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 80026c0:	6044      	str	r4, [r0, #4]

	/* Write to TIMx CCMR2 */
	TIMx->CCMR2 = tmpccmrx;
 80026c2:	61c2      	str	r2, [r0, #28]

	/* Set the Capture Compare Register value */
	TIMx->CCR4 = OC_Config->Pulse;
 80026c4:	684a      	ldr	r2, [r1, #4]
 80026c6:	6402      	str	r2, [r0, #64]	; 0x40

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 80026c8:	6203      	str	r3, [r0, #32]
 80026ca:	bd30      	pop	{r4, r5, pc}
 80026cc:	40012c00 	.word	0x40012c00

080026d0 <HAL_TIM_Base_DeInit>:
	htim->State = HAL_TIM_STATE_BUSY;
 80026d0:	2302      	movs	r3, #2
	__HAL_TIM_DISABLE(htim);
 80026d2:	f241 1211 	movw	r2, #4369	; 0x1111
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim) {
 80026d6:	b510      	push	{r4, lr}
	htim->State = HAL_TIM_STATE_BUSY;
 80026d8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
	__HAL_TIM_DISABLE(htim);
 80026dc:	6803      	ldr	r3, [r0, #0]
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim) {
 80026de:	4604      	mov	r4, r0
	__HAL_TIM_DISABLE(htim);
 80026e0:	6a19      	ldr	r1, [r3, #32]
 80026e2:	4211      	tst	r1, r2
 80026e4:	d108      	bne.n	80026f8 <HAL_TIM_Base_DeInit+0x28>
 80026e6:	f240 4244 	movw	r2, #1092	; 0x444
 80026ea:	6a19      	ldr	r1, [r3, #32]
 80026ec:	4211      	tst	r1, r2
 80026ee:	bf02      	ittt	eq
 80026f0:	681a      	ldreq	r2, [r3, #0]
 80026f2:	f022 0201 	biceq.w	r2, r2, #1
 80026f6:	601a      	streq	r2, [r3, #0]
	HAL_TIM_Base_MspDeInit(htim);
 80026f8:	4620      	mov	r0, r4
 80026fa:	f002 fd1b 	bl	8005134 <HAL_TIM_Base_MspDeInit>
	htim->State = HAL_TIM_STATE_RESET;
 80026fe:	2000      	movs	r0, #0
 8002700:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
	__HAL_UNLOCK(htim);
 8002704:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002708:	bd10      	pop	{r4, pc}

0800270a <HAL_TIM_Base_Start_IT>:
	__HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800270a:	6803      	ldr	r3, [r0, #0]
}
 800270c:	2000      	movs	r0, #0
	__HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	f042 0201 	orr.w	r2, r2, #1
 8002714:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE(htim);
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	f042 0201 	orr.w	r2, r2, #1
 800271c:	601a      	str	r2, [r3, #0]
}
 800271e:	4770      	bx	lr

08002720 <HAL_TIM_PWM_MspInit>:
 8002720:	4770      	bx	lr

08002722 <HAL_TIM_ConfigClockSource>:
	__HAL_LOCK(htim);
 8002722:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
		TIM_ClockConfigTypeDef * sClockSourceConfig) {
 8002726:	b570      	push	{r4, r5, r6, lr}
	__HAL_LOCK(htim);
 8002728:	2b01      	cmp	r3, #1
 800272a:	f04f 0302 	mov.w	r3, #2
 800272e:	d01c      	beq.n	800276a <HAL_TIM_ConfigClockSource+0x48>
 8002730:	2201      	movs	r2, #1
	htim->State = HAL_TIM_STATE_BUSY;
 8002732:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
	tmpsmcr = htim->Instance->SMCR;
 8002736:	6803      	ldr	r3, [r0, #0]
	__HAL_LOCK(htim);
 8002738:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
	tmpsmcr = htim->Instance->SMCR;
 800273c:	689a      	ldr	r2, [r3, #8]
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800273e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002742:	f022 0277 	bic.w	r2, r2, #119	; 0x77
	htim->Instance->SMCR = tmpsmcr;
 8002746:	609a      	str	r2, [r3, #8]
	switch (sClockSourceConfig->ClockSource) {
 8002748:	680a      	ldr	r2, [r1, #0]
 800274a:	2a40      	cmp	r2, #64	; 0x40
 800274c:	d079      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0x120>
 800274e:	d819      	bhi.n	8002784 <HAL_TIM_ConfigClockSource+0x62>
 8002750:	2a10      	cmp	r2, #16
 8002752:	f000 8093 	beq.w	800287c <HAL_TIM_ConfigClockSource+0x15a>
 8002756:	d80a      	bhi.n	800276e <HAL_TIM_ConfigClockSource+0x4c>
 8002758:	2a00      	cmp	r2, #0
 800275a:	f000 8089 	beq.w	8002870 <HAL_TIM_ConfigClockSource+0x14e>
	htim->State = HAL_TIM_STATE_READY;
 800275e:	2301      	movs	r3, #1
 8002760:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
	__HAL_UNLOCK(htim);
 8002764:	2300      	movs	r3, #0
 8002766:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
	__HAL_LOCK(htim);
 800276a:	4618      	mov	r0, r3
}
 800276c:	bd70      	pop	{r4, r5, r6, pc}
	switch (sClockSourceConfig->ClockSource) {
 800276e:	2a20      	cmp	r2, #32
 8002770:	f000 808a 	beq.w	8002888 <HAL_TIM_ConfigClockSource+0x166>
 8002774:	2a30      	cmp	r2, #48	; 0x30
 8002776:	d1f2      	bne.n	800275e <HAL_TIM_ConfigClockSource+0x3c>
 */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource) {
	uint32_t tmpsmcr = 0U;

	/* Get the TIMx SMCR register value */
	tmpsmcr = TIMx->SMCR;
 8002778:	689a      	ldr	r2, [r3, #8]
	/* Reset the TS Bits */
	tmpsmcr &= ~TIM_SMCR_TS;
 800277a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
	/* Set the Input Trigger source and the slave mode*/
	tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800277e:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8002782:	e036      	b.n	80027f2 <HAL_TIM_ConfigClockSource+0xd0>
	switch (sClockSourceConfig->ClockSource) {
 8002784:	2a70      	cmp	r2, #112	; 0x70
 8002786:	d036      	beq.n	80027f6 <HAL_TIM_ConfigClockSource+0xd4>
 8002788:	d81b      	bhi.n	80027c2 <HAL_TIM_ConfigClockSource+0xa0>
 800278a:	2a50      	cmp	r2, #80	; 0x50
 800278c:	d042      	beq.n	8002814 <HAL_TIM_ConfigClockSource+0xf2>
 800278e:	2a60      	cmp	r2, #96	; 0x60
 8002790:	d1e5      	bne.n	800275e <HAL_TIM_ConfigClockSource+0x3c>
	TIMx->CCER &= ~TIM_CCER_CC2E;
 8002792:	6a1c      	ldr	r4, [r3, #32]
		TIM_TI2_ConfigInputStage(htim->Instance,
 8002794:	684d      	ldr	r5, [r1, #4]
	TIMx->CCER &= ~TIM_CCER_CC2E;
 8002796:	f024 0410 	bic.w	r4, r4, #16
		TIM_TI2_ConfigInputStage(htim->Instance,
 800279a:	68ce      	ldr	r6, [r1, #12]
	TIMx->CCER &= ~TIM_CCER_CC2E;
 800279c:	621c      	str	r4, [r3, #32]
	tmpccmr1 = TIMx->CCMR1;
 800279e:	6999      	ldr	r1, [r3, #24]
	tmpccer = TIMx->CCER;
 80027a0:	6a1a      	ldr	r2, [r3, #32]
	tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027a2:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
	tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
	tmpccer |= (TIM_ICPolarity << 4U);
 80027aa:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
	tmpccmr1 |= (TIM_ICFilter << 12U);
 80027ae:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
	TIMx->CCMR1 = tmpccmr1;
 80027b2:	6199      	str	r1, [r3, #24]
	TIMx->CCER = tmpccer;
 80027b4:	621a      	str	r2, [r3, #32]
	tmpsmcr = TIMx->SMCR;
 80027b6:	689a      	ldr	r2, [r3, #8]
	tmpsmcr &= ~TIM_SMCR_TS;
 80027b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
	tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80027bc:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80027c0:	e017      	b.n	80027f2 <HAL_TIM_ConfigClockSource+0xd0>
	switch (sClockSourceConfig->ClockSource) {
 80027c2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80027c6:	d011      	beq.n	80027ec <HAL_TIM_ConfigClockSource+0xca>
 80027c8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80027cc:	d1c7      	bne.n	800275e <HAL_TIM_ConfigClockSource+0x3c>
	/* Reset the ETR Bits */
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

	/* Set the Prescaler, the Filter value and the Polarity */
	tmpsmcr |= (uint32_t) (TIM_ExtTRGPrescaler
			| (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027ce:	688a      	ldr	r2, [r1, #8]
 80027d0:	684d      	ldr	r5, [r1, #4]
	tmpsmcr = TIMx->SMCR;
 80027d2:	689c      	ldr	r4, [r3, #8]
			| (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027d4:	68c9      	ldr	r1, [r1, #12]
 80027d6:	432a      	orrs	r2, r5
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027d8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
			| (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027dc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	tmpsmcr |= (uint32_t) (TIM_ExtTRGPrescaler
 80027e0:	4322      	orrs	r2, r4

	/* Write to TIMx SMCR */
	TIMx->SMCR = tmpsmcr;
 80027e2:	609a      	str	r2, [r3, #8]
		htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027ea:	e002      	b.n	80027f2 <HAL_TIM_ConfigClockSource+0xd0>
		htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	f022 0207 	bic.w	r2, r2, #7
	TIMx->SMCR = tmpsmcr;
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	e7b3      	b.n	800275e <HAL_TIM_ConfigClockSource+0x3c>
			| (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027f6:	688a      	ldr	r2, [r1, #8]
 80027f8:	684d      	ldr	r5, [r1, #4]
	tmpsmcr = TIMx->SMCR;
 80027fa:	689c      	ldr	r4, [r3, #8]
			| (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027fc:	68c9      	ldr	r1, [r1, #12]
 80027fe:	432a      	orrs	r2, r5
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002800:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
			| (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002804:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	tmpsmcr |= (uint32_t) (TIM_ExtTRGPrescaler
 8002808:	4322      	orrs	r2, r4
	TIMx->SMCR = tmpsmcr;
 800280a:	609a      	str	r2, [r3, #8]
		tmpsmcr = htim->Instance->SMCR;
 800280c:	689a      	ldr	r2, [r3, #8]
		tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800280e:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8002812:	e7ee      	b.n	80027f2 <HAL_TIM_ConfigClockSource+0xd0>
		TIM_TI1_ConfigInputStage(htim->Instance,
 8002814:	684c      	ldr	r4, [r1, #4]
 8002816:	68ce      	ldr	r6, [r1, #12]
	tmpccer = TIMx->CCER;
 8002818:	6a19      	ldr	r1, [r3, #32]
	TIMx->CCER &= ~TIM_CCER_CC1E;
 800281a:	6a1d      	ldr	r5, [r3, #32]
	tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800281c:	f021 010a 	bic.w	r1, r1, #10
	TIMx->CCER &= ~TIM_CCER_CC1E;
 8002820:	f025 0501 	bic.w	r5, r5, #1
 8002824:	621d      	str	r5, [r3, #32]
	tmpccmr1 = TIMx->CCMR1;
 8002826:	699a      	ldr	r2, [r3, #24]
	tmpccer |= TIM_ICPolarity;
 8002828:	4321      	orrs	r1, r4
	tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800282a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
	tmpccmr1 |= (TIM_ICFilter << 4U);
 800282e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
	TIMx->CCMR1 = tmpccmr1;
 8002832:	619a      	str	r2, [r3, #24]
	TIMx->CCER = tmpccer;
 8002834:	6219      	str	r1, [r3, #32]
	tmpsmcr = TIMx->SMCR;
 8002836:	689a      	ldr	r2, [r3, #8]
	tmpsmcr &= ~TIM_SMCR_TS;
 8002838:	f022 0270 	bic.w	r2, r2, #112	; 0x70
	tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800283c:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8002840:	e7d7      	b.n	80027f2 <HAL_TIM_ConfigClockSource+0xd0>
		TIM_TI1_ConfigInputStage(htim->Instance,
 8002842:	684c      	ldr	r4, [r1, #4]
 8002844:	68ce      	ldr	r6, [r1, #12]
	tmpccer = TIMx->CCER;
 8002846:	6a19      	ldr	r1, [r3, #32]
	TIMx->CCER &= ~TIM_CCER_CC1E;
 8002848:	6a1d      	ldr	r5, [r3, #32]
	tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800284a:	f021 010a 	bic.w	r1, r1, #10
	TIMx->CCER &= ~TIM_CCER_CC1E;
 800284e:	f025 0501 	bic.w	r5, r5, #1
 8002852:	621d      	str	r5, [r3, #32]
	tmpccmr1 = TIMx->CCMR1;
 8002854:	699a      	ldr	r2, [r3, #24]
	tmpccer |= TIM_ICPolarity;
 8002856:	4321      	orrs	r1, r4
	tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002858:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
	tmpccmr1 |= (TIM_ICFilter << 4U);
 800285c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
	TIMx->CCMR1 = tmpccmr1;
 8002860:	619a      	str	r2, [r3, #24]
	TIMx->CCER = tmpccer;
 8002862:	6219      	str	r1, [r3, #32]
	tmpsmcr = TIMx->SMCR;
 8002864:	689a      	ldr	r2, [r3, #8]
	tmpsmcr &= ~TIM_SMCR_TS;
 8002866:	f022 0270 	bic.w	r2, r2, #112	; 0x70
	tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800286a:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 800286e:	e7c0      	b.n	80027f2 <HAL_TIM_ConfigClockSource+0xd0>
	tmpsmcr = TIMx->SMCR;
 8002870:	689a      	ldr	r2, [r3, #8]
	tmpsmcr &= ~TIM_SMCR_TS;
 8002872:	f022 0270 	bic.w	r2, r2, #112	; 0x70
	tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002876:	f042 0207 	orr.w	r2, r2, #7
 800287a:	e7ba      	b.n	80027f2 <HAL_TIM_ConfigClockSource+0xd0>
	tmpsmcr = TIMx->SMCR;
 800287c:	689a      	ldr	r2, [r3, #8]
	tmpsmcr &= ~TIM_SMCR_TS;
 800287e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
	tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002882:	f042 0217 	orr.w	r2, r2, #23
 8002886:	e7b4      	b.n	80027f2 <HAL_TIM_ConfigClockSource+0xd0>
	tmpsmcr = TIMx->SMCR;
 8002888:	689a      	ldr	r2, [r3, #8]
	tmpsmcr &= ~TIM_SMCR_TS;
 800288a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
	tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800288e:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8002892:	e7ae      	b.n	80027f2 <HAL_TIM_ConfigClockSource+0xd0>

08002894 <HAL_TIM_OC_DelayElapsedCallback>:
 8002894:	4770      	bx	lr

08002896 <HAL_TIM_IC_CaptureCallback>:
 8002896:	4770      	bx	lr

08002898 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002898:	4770      	bx	lr

0800289a <HAL_TIM_TriggerCallback>:
 800289a:	4770      	bx	lr

0800289c <HAL_TIM_IRQHandler>:
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET) {
 800289c:	6803      	ldr	r3, [r0, #0]
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim) {
 800289e:	b510      	push	{r4, lr}
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET) {
 80028a0:	691a      	ldr	r2, [r3, #16]
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim) {
 80028a2:	4604      	mov	r4, r0
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET) {
 80028a4:	0791      	lsls	r1, r2, #30
 80028a6:	d50e      	bpl.n	80028c6 <HAL_TIM_IRQHandler+0x2a>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET) {
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	0792      	lsls	r2, r2, #30
 80028ac:	d50b      	bpl.n	80028c6 <HAL_TIM_IRQHandler+0x2a>
				__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028ae:	f06f 0202 	mvn.w	r2, #2
 80028b2:	611a      	str	r2, [r3, #16]
				htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028b4:	2201      	movs	r2, #1
				if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U) {
 80028b6:	699b      	ldr	r3, [r3, #24]
				htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028b8:	7702      	strb	r2, [r0, #28]
				if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U) {
 80028ba:	079b      	lsls	r3, r3, #30
 80028bc:	d077      	beq.n	80029ae <HAL_TIM_IRQHandler+0x112>
					HAL_TIM_IC_CaptureCallback(htim);
 80028be:	f7ff ffea 	bl	8002896 <HAL_TIM_IC_CaptureCallback>
				htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028c2:	2300      	movs	r3, #0
 80028c4:	7723      	strb	r3, [r4, #28]
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET) {
 80028c6:	6823      	ldr	r3, [r4, #0]
 80028c8:	691a      	ldr	r2, [r3, #16]
 80028ca:	0750      	lsls	r0, r2, #29
 80028cc:	d510      	bpl.n	80028f0 <HAL_TIM_IRQHandler+0x54>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET) {
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	0751      	lsls	r1, r2, #29
 80028d2:	d50d      	bpl.n	80028f0 <HAL_TIM_IRQHandler+0x54>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028d4:	f06f 0204 	mvn.w	r2, #4
 80028d8:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028da:	2202      	movs	r2, #2
			if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U) {
 80028dc:	699b      	ldr	r3, [r3, #24]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028de:	7722      	strb	r2, [r4, #28]
			if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U) {
 80028e0:	f413 7f40 	tst.w	r3, #768	; 0x300
				HAL_TIM_IC_CaptureCallback(htim);
 80028e4:	4620      	mov	r0, r4
			if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U) {
 80028e6:	d068      	beq.n	80029ba <HAL_TIM_IRQHandler+0x11e>
				HAL_TIM_IC_CaptureCallback(htim);
 80028e8:	f7ff ffd5 	bl	8002896 <HAL_TIM_IC_CaptureCallback>
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ec:	2300      	movs	r3, #0
 80028ee:	7723      	strb	r3, [r4, #28]
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET) {
 80028f0:	6823      	ldr	r3, [r4, #0]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	0712      	lsls	r2, r2, #28
 80028f6:	d50f      	bpl.n	8002918 <HAL_TIM_IRQHandler+0x7c>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET) {
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	0710      	lsls	r0, r2, #28
 80028fc:	d50c      	bpl.n	8002918 <HAL_TIM_IRQHandler+0x7c>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028fe:	f06f 0208 	mvn.w	r2, #8
 8002902:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002904:	2204      	movs	r2, #4
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U) {
 8002906:	69db      	ldr	r3, [r3, #28]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002908:	7722      	strb	r2, [r4, #28]
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U) {
 800290a:	0799      	lsls	r1, r3, #30
				HAL_TIM_IC_CaptureCallback(htim);
 800290c:	4620      	mov	r0, r4
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U) {
 800290e:	d05a      	beq.n	80029c6 <HAL_TIM_IRQHandler+0x12a>
				HAL_TIM_IC_CaptureCallback(htim);
 8002910:	f7ff ffc1 	bl	8002896 <HAL_TIM_IC_CaptureCallback>
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002914:	2300      	movs	r3, #0
 8002916:	7723      	strb	r3, [r4, #28]
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET) {
 8002918:	6823      	ldr	r3, [r4, #0]
 800291a:	691a      	ldr	r2, [r3, #16]
 800291c:	06d2      	lsls	r2, r2, #27
 800291e:	d510      	bpl.n	8002942 <HAL_TIM_IRQHandler+0xa6>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET) {
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	06d0      	lsls	r0, r2, #27
 8002924:	d50d      	bpl.n	8002942 <HAL_TIM_IRQHandler+0xa6>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002926:	f06f 0210 	mvn.w	r2, #16
 800292a:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800292c:	2208      	movs	r2, #8
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U) {
 800292e:	69db      	ldr	r3, [r3, #28]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002930:	7722      	strb	r2, [r4, #28]
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U) {
 8002932:	f413 7f40 	tst.w	r3, #768	; 0x300
				HAL_TIM_IC_CaptureCallback(htim);
 8002936:	4620      	mov	r0, r4
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U) {
 8002938:	d04b      	beq.n	80029d2 <HAL_TIM_IRQHandler+0x136>
				HAL_TIM_IC_CaptureCallback(htim);
 800293a:	f7ff ffac 	bl	8002896 <HAL_TIM_IC_CaptureCallback>
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800293e:	2300      	movs	r3, #0
 8002940:	7723      	strb	r3, [r4, #28]
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET) {
 8002942:	6823      	ldr	r3, [r4, #0]
 8002944:	691a      	ldr	r2, [r3, #16]
 8002946:	07d1      	lsls	r1, r2, #31
 8002948:	d508      	bpl.n	800295c <HAL_TIM_IRQHandler+0xc0>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET) {
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	07d2      	lsls	r2, r2, #31
 800294e:	d505      	bpl.n	800295c <HAL_TIM_IRQHandler+0xc0>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002950:	f06f 0201 	mvn.w	r2, #1
			HAL_TIM_PeriodElapsedCallback(htim);
 8002954:	4620      	mov	r0, r4
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002956:	611a      	str	r2, [r3, #16]
			HAL_TIM_PeriodElapsedCallback(htim);
 8002958:	f000 f9e6 	bl	8002d28 <HAL_TIM_PeriodElapsedCallback>
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET) {
 800295c:	6823      	ldr	r3, [r4, #0]
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	0610      	lsls	r0, r2, #24
 8002962:	d508      	bpl.n	8002976 <HAL_TIM_IRQHandler+0xda>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET) {
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	0611      	lsls	r1, r2, #24
 8002968:	d505      	bpl.n	8002976 <HAL_TIM_IRQHandler+0xda>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800296a:	f06f 0280 	mvn.w	r2, #128	; 0x80
			HAL_TIMEx_BreakCallback(htim);
 800296e:	4620      	mov	r0, r4
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002970:	611a      	str	r2, [r3, #16]
			HAL_TIMEx_BreakCallback(htim);
 8002972:	f000 f9d8 	bl	8002d26 <HAL_TIMEx_BreakCallback>
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET) {
 8002976:	6823      	ldr	r3, [r4, #0]
 8002978:	691a      	ldr	r2, [r3, #16]
 800297a:	0652      	lsls	r2, r2, #25
 800297c:	d508      	bpl.n	8002990 <HAL_TIM_IRQHandler+0xf4>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET) {
 800297e:	68da      	ldr	r2, [r3, #12]
 8002980:	0650      	lsls	r0, r2, #25
 8002982:	d505      	bpl.n	8002990 <HAL_TIM_IRQHandler+0xf4>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002984:	f06f 0240 	mvn.w	r2, #64	; 0x40
			HAL_TIM_TriggerCallback(htim);
 8002988:	4620      	mov	r0, r4
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800298a:	611a      	str	r2, [r3, #16]
			HAL_TIM_TriggerCallback(htim);
 800298c:	f7ff ff85 	bl	800289a <HAL_TIM_TriggerCallback>
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET) {
 8002990:	6823      	ldr	r3, [r4, #0]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	0691      	lsls	r1, r2, #26
 8002996:	d522      	bpl.n	80029de <HAL_TIM_IRQHandler+0x142>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET) {
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	0692      	lsls	r2, r2, #26
 800299c:	d51f      	bpl.n	80029de <HAL_TIM_IRQHandler+0x142>
			__HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800299e:	f06f 0220 	mvn.w	r2, #32
			HAL_TIMEx_CommutationCallback(htim);
 80029a2:	4620      	mov	r0, r4
}
 80029a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			__HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029a8:	611a      	str	r2, [r3, #16]
			HAL_TIMEx_CommutationCallback(htim);
 80029aa:	f000 b9bb 	b.w	8002d24 <HAL_TIMEx_CommutationCallback>
					HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ae:	f7ff ff71 	bl	8002894 <HAL_TIM_OC_DelayElapsedCallback>
					HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b2:	4620      	mov	r0, r4
 80029b4:	f7ff ff70 	bl	8002898 <HAL_TIM_PWM_PulseFinishedCallback>
 80029b8:	e783      	b.n	80028c2 <HAL_TIM_IRQHandler+0x26>
				HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ba:	f7ff ff6b 	bl	8002894 <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029be:	4620      	mov	r0, r4
 80029c0:	f7ff ff6a 	bl	8002898 <HAL_TIM_PWM_PulseFinishedCallback>
 80029c4:	e792      	b.n	80028ec <HAL_TIM_IRQHandler+0x50>
				HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c6:	f7ff ff65 	bl	8002894 <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ca:	4620      	mov	r0, r4
 80029cc:	f7ff ff64 	bl	8002898 <HAL_TIM_PWM_PulseFinishedCallback>
 80029d0:	e7a0      	b.n	8002914 <HAL_TIM_IRQHandler+0x78>
				HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d2:	f7ff ff5f 	bl	8002894 <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d6:	4620      	mov	r0, r4
 80029d8:	f7ff ff5e 	bl	8002898 <HAL_TIM_PWM_PulseFinishedCallback>
 80029dc:	e7af      	b.n	800293e <HAL_TIM_IRQHandler+0xa2>
 80029de:	bd10      	pop	{r4, pc}

080029e0 <TIM_Base_SetConfig>:
	if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx)) {
 80029e0:	4a1a      	ldr	r2, [pc, #104]	; (8002a4c <TIM_Base_SetConfig+0x6c>)
	tmpcr1 = TIMx->CR1;
 80029e2:	6803      	ldr	r3, [r0, #0]
	if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx)) {
 80029e4:	4290      	cmp	r0, r2
 80029e6:	d00a      	beq.n	80029fe <TIM_Base_SetConfig+0x1e>
 80029e8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80029ec:	d007      	beq.n	80029fe <TIM_Base_SetConfig+0x1e>
 80029ee:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80029f2:	4290      	cmp	r0, r2
 80029f4:	d003      	beq.n	80029fe <TIM_Base_SetConfig+0x1e>
 80029f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029fa:	4290      	cmp	r0, r2
 80029fc:	d115      	bne.n	8002a2a <TIM_Base_SetConfig+0x4a>
		tmpcr1 |= Structure->CounterMode;
 80029fe:	684a      	ldr	r2, [r1, #4]
		tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		tmpcr1 |= Structure->CounterMode;
 8002a04:	4313      	orrs	r3, r2
	if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx)) {
 8002a06:	4a11      	ldr	r2, [pc, #68]	; (8002a4c <TIM_Base_SetConfig+0x6c>)
 8002a08:	4290      	cmp	r0, r2
 8002a0a:	d00a      	beq.n	8002a22 <TIM_Base_SetConfig+0x42>
 8002a0c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002a10:	d007      	beq.n	8002a22 <TIM_Base_SetConfig+0x42>
 8002a12:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002a16:	4290      	cmp	r0, r2
 8002a18:	d003      	beq.n	8002a22 <TIM_Base_SetConfig+0x42>
 8002a1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a1e:	4290      	cmp	r0, r2
 8002a20:	d103      	bne.n	8002a2a <TIM_Base_SetConfig+0x4a>
		tmpcr1 |= (uint32_t) Structure->ClockDivision;
 8002a22:	68ca      	ldr	r2, [r1, #12]
		tmpcr1 &= ~TIM_CR1_CKD;
 8002a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
		tmpcr1 |= (uint32_t) Structure->ClockDivision;
 8002a28:	4313      	orrs	r3, r2
	tmpcr1 |= (uint32_t) Structure->AutoReloadPreload;
 8002a2a:	694a      	ldr	r2, [r1, #20]
	tmpcr1 &= ~TIM_CR1_ARPE;
 8002a2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
	tmpcr1 |= (uint32_t) Structure->AutoReloadPreload;
 8002a30:	4313      	orrs	r3, r2
	TIMx->CR1 = tmpcr1;
 8002a32:	6003      	str	r3, [r0, #0]
	TIMx->ARR = (uint32_t) Structure->Period;
 8002a34:	688b      	ldr	r3, [r1, #8]
 8002a36:	62c3      	str	r3, [r0, #44]	; 0x2c
	TIMx->PSC = (uint32_t) Structure->Prescaler;
 8002a38:	680b      	ldr	r3, [r1, #0]
 8002a3a:	6283      	str	r3, [r0, #40]	; 0x28
	if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx)) {
 8002a3c:	4b03      	ldr	r3, [pc, #12]	; (8002a4c <TIM_Base_SetConfig+0x6c>)
 8002a3e:	4298      	cmp	r0, r3
		TIMx->RCR = Structure->RepetitionCounter;
 8002a40:	bf04      	itt	eq
 8002a42:	690b      	ldreq	r3, [r1, #16]
 8002a44:	6303      	streq	r3, [r0, #48]	; 0x30
	TIMx->EGR = TIM_EGR_UG;
 8002a46:	2301      	movs	r3, #1
 8002a48:	6143      	str	r3, [r0, #20]
 8002a4a:	4770      	bx	lr
 8002a4c:	40012c00 	.word	0x40012c00

08002a50 <HAL_TIM_Base_Init>:
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim) {
 8002a50:	b510      	push	{r4, lr}
	if (htim == NULL) {
 8002a52:	4604      	mov	r4, r0
 8002a54:	b1a0      	cbz	r0, 8002a80 <HAL_TIM_Base_Init+0x30>
	if (htim->State == HAL_TIM_STATE_RESET) {
 8002a56:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002a5a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a5e:	b91b      	cbnz	r3, 8002a68 <HAL_TIM_Base_Init+0x18>
		htim->Lock = HAL_UNLOCKED;
 8002a60:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
		HAL_TIM_Base_MspInit(htim);
 8002a64:	f002 faae 	bl	8004fc4 <HAL_TIM_Base_MspInit>
	htim->State = HAL_TIM_STATE_BUSY;
 8002a68:	2302      	movs	r3, #2
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a6a:	6820      	ldr	r0, [r4, #0]
	htim->State = HAL_TIM_STATE_BUSY;
 8002a6c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a70:	1d21      	adds	r1, r4, #4
 8002a72:	f7ff ffb5 	bl	80029e0 <TIM_Base_SetConfig>
	htim->State = HAL_TIM_STATE_READY;
 8002a76:	2301      	movs	r3, #1
	return HAL_OK;
 8002a78:	2000      	movs	r0, #0
	htim->State = HAL_TIM_STATE_READY;
 8002a7a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	return HAL_OK;
 8002a7e:	bd10      	pop	{r4, pc}
		return HAL_ERROR;
 8002a80:	2001      	movs	r0, #1
}
 8002a82:	bd10      	pop	{r4, pc}

08002a84 <HAL_TIM_PWM_Init>:
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim) {
 8002a84:	b510      	push	{r4, lr}
	if (htim == NULL) {
 8002a86:	4604      	mov	r4, r0
 8002a88:	b1a0      	cbz	r0, 8002ab4 <HAL_TIM_PWM_Init+0x30>
	if (htim->State == HAL_TIM_STATE_RESET) {
 8002a8a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002a8e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a92:	b91b      	cbnz	r3, 8002a9c <HAL_TIM_PWM_Init+0x18>
		htim->Lock = HAL_UNLOCKED;
 8002a94:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
		HAL_TIM_PWM_MspInit(htim);
 8002a98:	f7ff fe42 	bl	8002720 <HAL_TIM_PWM_MspInit>
	htim->State = HAL_TIM_STATE_BUSY;
 8002a9c:	2302      	movs	r3, #2
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a9e:	6820      	ldr	r0, [r4, #0]
	htim->State = HAL_TIM_STATE_BUSY;
 8002aa0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aa4:	1d21      	adds	r1, r4, #4
 8002aa6:	f7ff ff9b 	bl	80029e0 <TIM_Base_SetConfig>
	htim->State = HAL_TIM_STATE_READY;
 8002aaa:	2301      	movs	r3, #1
	return HAL_OK;
 8002aac:	2000      	movs	r0, #0
	htim->State = HAL_TIM_STATE_READY;
 8002aae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	return HAL_OK;
 8002ab2:	bd10      	pop	{r4, pc}
		return HAL_ERROR;
 8002ab4:	2001      	movs	r0, #1
}
 8002ab6:	bd10      	pop	{r4, pc}

08002ab8 <TIM_OC2_SetConfig>:
	TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ab8:	6a03      	ldr	r3, [r0, #32]
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config) {
 8002aba:	b570      	push	{r4, r5, r6, lr}
	TIMx->CCER &= ~TIM_CCER_CC2E;
 8002abc:	f023 0310 	bic.w	r3, r3, #16
 8002ac0:	6203      	str	r3, [r0, #32]
	tmpccer = TIMx->CCER;
 8002ac2:	6a03      	ldr	r3, [r0, #32]
	tmpcr2 = TIMx->CR2;
 8002ac4:	6844      	ldr	r4, [r0, #4]
	tmpccmrx = TIMx->CCMR1;
 8002ac6:	6982      	ldr	r2, [r0, #24]
	tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ac8:	680d      	ldr	r5, [r1, #0]
	tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002aca:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
	tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ace:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
	tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ad2:	688d      	ldr	r5, [r1, #8]
	tmpccer &= ~TIM_CCER_CC2P;
 8002ad4:	f023 0320 	bic.w	r3, r3, #32
	tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ad8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
	if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2)) {
 8002adc:	4d0b      	ldr	r5, [pc, #44]	; (8002b0c <TIM_OC2_SetConfig+0x54>)
 8002ade:	42a8      	cmp	r0, r5
 8002ae0:	d10d      	bne.n	8002afe <TIM_OC2_SetConfig+0x46>
		tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ae2:	68cd      	ldr	r5, [r1, #12]
		tmpccer &= ~TIM_CCER_CC2NP;
 8002ae4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
		tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ae8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
		tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002aec:	698e      	ldr	r6, [r1, #24]
		tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002aee:	694d      	ldr	r5, [r1, #20]
		tmpcr2 &= ~TIM_CR2_OIS2N;
 8002af0:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
		tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002af4:	4335      	orrs	r5, r6
		tmpccer &= ~TIM_CCER_CC2NE;
 8002af6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
		tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002afa:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
	TIMx->CR2 = tmpcr2;
 8002afe:	6044      	str	r4, [r0, #4]
	TIMx->CCMR1 = tmpccmrx;
 8002b00:	6182      	str	r2, [r0, #24]
	TIMx->CCR2 = OC_Config->Pulse;
 8002b02:	684a      	ldr	r2, [r1, #4]
 8002b04:	6382      	str	r2, [r0, #56]	; 0x38
	TIMx->CCER = tmpccer;
 8002b06:	6203      	str	r3, [r0, #32]
 8002b08:	bd70      	pop	{r4, r5, r6, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40012c00 	.word	0x40012c00

08002b10 <HAL_TIM_PWM_ConfigChannel>:
		TIM_OC_InitTypeDef* sConfig, uint32_t Channel) {
 8002b10:	b538      	push	{r3, r4, r5, lr}
	__HAL_LOCK(htim);
 8002b12:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
		TIM_OC_InitTypeDef* sConfig, uint32_t Channel) {
 8002b16:	4604      	mov	r4, r0
	__HAL_LOCK(htim);
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	f04f 0002 	mov.w	r0, #2
 8002b1e:	d025      	beq.n	8002b6c <HAL_TIM_PWM_ConfigChannel+0x5c>
 8002b20:	2301      	movs	r3, #1
	htim->State = HAL_TIM_STATE_BUSY;
 8002b22:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
	__HAL_LOCK(htim);
 8002b26:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	switch (Channel) {
 8002b2a:	2a0c      	cmp	r2, #12
 8002b2c:	d818      	bhi.n	8002b60 <HAL_TIM_PWM_ConfigChannel+0x50>
 8002b2e:	e8df f002 	tbb	[pc, r2]
 8002b32:	1707      	.short	0x1707
 8002b34:	171e1717 	.word	0x171e1717
 8002b38:	172f1717 	.word	0x172f1717
 8002b3c:	1717      	.short	0x1717
 8002b3e:	40          	.byte	0x40
 8002b3f:	00          	.byte	0x00
		TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b40:	6820      	ldr	r0, [r4, #0]
 8002b42:	f7ff fd51 	bl	80025e8 <TIM_OC1_SetConfig>
		htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b46:	6823      	ldr	r3, [r4, #0]
		htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b48:	6909      	ldr	r1, [r1, #16]
		htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b4a:	699a      	ldr	r2, [r3, #24]
 8002b4c:	f042 0208 	orr.w	r2, r2, #8
 8002b50:	619a      	str	r2, [r3, #24]
		htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b52:	699a      	ldr	r2, [r3, #24]
 8002b54:	f022 0204 	bic.w	r2, r2, #4
 8002b58:	619a      	str	r2, [r3, #24]
		htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b5a:	699a      	ldr	r2, [r3, #24]
 8002b5c:	430a      	orrs	r2, r1
		htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002b5e:	619a      	str	r2, [r3, #24]
	htim->State = HAL_TIM_STATE_READY;
 8002b60:	2301      	movs	r3, #1
	__HAL_UNLOCK(htim);
 8002b62:	2000      	movs	r0, #0
	htim->State = HAL_TIM_STATE_READY;
 8002b64:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	__HAL_UNLOCK(htim);
 8002b68:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002b6c:	bd38      	pop	{r3, r4, r5, pc}
		TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b6e:	6820      	ldr	r0, [r4, #0]
 8002b70:	f7ff ffa2 	bl	8002ab8 <TIM_OC2_SetConfig>
		htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b74:	6823      	ldr	r3, [r4, #0]
		htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002b76:	6909      	ldr	r1, [r1, #16]
		htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b78:	699a      	ldr	r2, [r3, #24]
 8002b7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b7e:	619a      	str	r2, [r3, #24]
		htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b80:	699a      	ldr	r2, [r3, #24]
 8002b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b86:	619a      	str	r2, [r3, #24]
		htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002b88:	699a      	ldr	r2, [r3, #24]
 8002b8a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002b8e:	e7e6      	b.n	8002b5e <HAL_TIM_PWM_ConfigChannel+0x4e>
		TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b90:	6820      	ldr	r0, [r4, #0]
 8002b92:	f7ff fd51 	bl	8002638 <TIM_OC3_SetConfig>
		htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b96:	6823      	ldr	r3, [r4, #0]
		htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b98:	6909      	ldr	r1, [r1, #16]
		htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b9a:	69da      	ldr	r2, [r3, #28]
 8002b9c:	f042 0208 	orr.w	r2, r2, #8
 8002ba0:	61da      	str	r2, [r3, #28]
		htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ba2:	69da      	ldr	r2, [r3, #28]
 8002ba4:	f022 0204 	bic.w	r2, r2, #4
 8002ba8:	61da      	str	r2, [r3, #28]
		htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002baa:	69da      	ldr	r2, [r3, #28]
 8002bac:	430a      	orrs	r2, r1
		htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002bae:	61da      	str	r2, [r3, #28]
		break;
 8002bb0:	e7d6      	b.n	8002b60 <HAL_TIM_PWM_ConfigChannel+0x50>
		TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bb2:	6820      	ldr	r0, [r4, #0]
 8002bb4:	f7ff fd6a 	bl	800268c <TIM_OC4_SetConfig>
		htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bb8:	6823      	ldr	r3, [r4, #0]
		htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002bba:	6909      	ldr	r1, [r1, #16]
		htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bbc:	69da      	ldr	r2, [r3, #28]
 8002bbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bc2:	61da      	str	r2, [r3, #28]
		htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bc4:	69da      	ldr	r2, [r3, #28]
 8002bc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bca:	61da      	str	r2, [r3, #28]
		htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002bcc:	69da      	ldr	r2, [r3, #28]
 8002bce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002bd2:	e7ec      	b.n	8002bae <HAL_TIM_PWM_ConfigChannel+0x9e>

08002bd4 <TIM_CCxChannelCmd>:
 * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
 *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
 * @retval None
 */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel,
		uint32_t ChannelState) {
 8002bd4:	b510      	push	{r4, lr}

	/* Check the parameters */
	assert_param(IS_TIM_CC1_INSTANCE(TIMx));
	assert_param(IS_TIM_CHANNELS(Channel));

	tmp = TIM_CCER_CC1E << Channel;
 8002bd6:	2401      	movs	r4, #1

	/* Reset the CCxE Bit */
	TIMx->CCER &= ~tmp;
 8002bd8:	6a03      	ldr	r3, [r0, #32]
	tmp = TIM_CCER_CC1E << Channel;
 8002bda:	408c      	lsls	r4, r1
	TIMx->CCER &= ~tmp;
 8002bdc:	ea23 0304 	bic.w	r3, r3, r4
 8002be0:	6203      	str	r3, [r0, #32]

	/* Set or reset the CCxE Bit */
	TIMx->CCER |= (uint32_t) (ChannelState << Channel);
 8002be2:	6a03      	ldr	r3, [r0, #32]
 8002be4:	408a      	lsls	r2, r1
 8002be6:	431a      	orrs	r2, r3
 8002be8:	6202      	str	r2, [r0, #32]
 8002bea:	bd10      	pop	{r4, pc}

08002bec <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel) {
 8002bec:	b510      	push	{r4, lr}
 8002bee:	4604      	mov	r4, r0
	TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	6800      	ldr	r0, [r0, #0]
 8002bf4:	f7ff ffee 	bl	8002bd4 <TIM_CCxChannelCmd>
	if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 8002bf8:	6823      	ldr	r3, [r4, #0]
 8002bfa:	4a06      	ldr	r2, [pc, #24]	; (8002c14 <HAL_TIM_PWM_Start+0x28>)
}
 8002bfc:	2000      	movs	r0, #0
	if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 8002bfe:	4293      	cmp	r3, r2
		__HAL_TIM_MOE_ENABLE(htim);
 8002c00:	bf02      	ittt	eq
 8002c02:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8002c04:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8002c08:	645a      	streq	r2, [r3, #68]	; 0x44
	__HAL_TIM_ENABLE(htim);
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	f042 0201 	orr.w	r2, r2, #1
 8002c10:	601a      	str	r2, [r3, #0]
}
 8002c12:	bd10      	pop	{r4, pc}
 8002c14:	40012c00 	.word	0x40012c00

08002c18 <HAL_TIM_PWM_Stop>:
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel) {
 8002c18:	b510      	push	{r4, lr}
 8002c1a:	4604      	mov	r4, r0
	TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	6800      	ldr	r0, [r0, #0]
 8002c20:	f7ff ffd8 	bl	8002bd4 <TIM_CCxChannelCmd>
	if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 8002c24:	6823      	ldr	r3, [r4, #0]
 8002c26:	4a12      	ldr	r2, [pc, #72]	; (8002c70 <HAL_TIM_PWM_Stop+0x58>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d10d      	bne.n	8002c48 <HAL_TIM_PWM_Stop+0x30>
		__HAL_TIM_MOE_DISABLE(htim);
 8002c2c:	f241 1211 	movw	r2, #4369	; 0x1111
 8002c30:	6a19      	ldr	r1, [r3, #32]
 8002c32:	4211      	tst	r1, r2
 8002c34:	d108      	bne.n	8002c48 <HAL_TIM_PWM_Stop+0x30>
 8002c36:	f240 4244 	movw	r2, #1092	; 0x444
 8002c3a:	6a19      	ldr	r1, [r3, #32]
 8002c3c:	4211      	tst	r1, r2
 8002c3e:	bf02      	ittt	eq
 8002c40:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8002c42:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 8002c46:	645a      	streq	r2, [r3, #68]	; 0x44
	__HAL_TIM_DISABLE(htim);
 8002c48:	f241 1211 	movw	r2, #4369	; 0x1111
 8002c4c:	6a19      	ldr	r1, [r3, #32]
 8002c4e:	4211      	tst	r1, r2
 8002c50:	d108      	bne.n	8002c64 <HAL_TIM_PWM_Stop+0x4c>
 8002c52:	f240 4244 	movw	r2, #1092	; 0x444
 8002c56:	6a19      	ldr	r1, [r3, #32]
 8002c58:	4211      	tst	r1, r2
 8002c5a:	bf02      	ittt	eq
 8002c5c:	681a      	ldreq	r2, [r3, #0]
 8002c5e:	f022 0201 	biceq.w	r2, r2, #1
 8002c62:	601a      	streq	r2, [r3, #0]
	htim->State = HAL_TIM_STATE_READY;
 8002c64:	2301      	movs	r3, #1
}
 8002c66:	2000      	movs	r0, #0
	htim->State = HAL_TIM_STATE_READY;
 8002c68:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002c6c:	bd10      	pop	{r4, pc}
 8002c6e:	bf00      	nop
 8002c70:	40012c00 	.word	0x40012c00

08002c74 <HAL_TIM_PWM_Start_IT>:
		uint32_t Channel) {
 8002c74:	b510      	push	{r4, lr}
 8002c76:	4604      	mov	r4, r0
	switch (Channel) {
 8002c78:	290c      	cmp	r1, #12
 8002c7a:	d80d      	bhi.n	8002c98 <HAL_TIM_PWM_Start_IT+0x24>
 8002c7c:	e8df f001 	tbb	[pc, r1]
 8002c80:	0c0c0c07 	.word	0x0c0c0c07
 8002c84:	0c0c0c1e 	.word	0x0c0c0c1e
 8002c88:	0c0c0c23 	.word	0x0c0c0c23
 8002c8c:	28          	.byte	0x28
 8002c8d:	00          	.byte	0x00
		__HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002c8e:	6802      	ldr	r2, [r0, #0]
 8002c90:	68d3      	ldr	r3, [r2, #12]
 8002c92:	f043 0302 	orr.w	r3, r3, #2
		__HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002c96:	60d3      	str	r3, [r2, #12]
	TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c98:	6820      	ldr	r0, [r4, #0]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f7ff ff9a 	bl	8002bd4 <TIM_CCxChannelCmd>
	if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 8002ca0:	6823      	ldr	r3, [r4, #0]
 8002ca2:	4a0e      	ldr	r2, [pc, #56]	; (8002cdc <HAL_TIM_PWM_Start_IT+0x68>)
}
 8002ca4:	2000      	movs	r0, #0
	if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 8002ca6:	4293      	cmp	r3, r2
		__HAL_TIM_MOE_ENABLE(htim);
 8002ca8:	bf02      	ittt	eq
 8002caa:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8002cac:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8002cb0:	645a      	streq	r2, [r3, #68]	; 0x44
	__HAL_TIM_ENABLE(htim);
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	f042 0201 	orr.w	r2, r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]
}
 8002cba:	bd10      	pop	{r4, pc}
		__HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002cbc:	6802      	ldr	r2, [r0, #0]
 8002cbe:	68d3      	ldr	r3, [r2, #12]
 8002cc0:	f043 0304 	orr.w	r3, r3, #4
 8002cc4:	e7e7      	b.n	8002c96 <HAL_TIM_PWM_Start_IT+0x22>
		__HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002cc6:	6802      	ldr	r2, [r0, #0]
 8002cc8:	68d3      	ldr	r3, [r2, #12]
 8002cca:	f043 0308 	orr.w	r3, r3, #8
 8002cce:	e7e2      	b.n	8002c96 <HAL_TIM_PWM_Start_IT+0x22>
		__HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002cd0:	6802      	ldr	r2, [r0, #0]
 8002cd2:	68d3      	ldr	r3, [r2, #12]
 8002cd4:	f043 0310 	orr.w	r3, r3, #16
 8002cd8:	e7dd      	b.n	8002c96 <HAL_TIM_PWM_Start_IT+0x22>
 8002cda:	bf00      	nop
 8002cdc:	40012c00 	.word	0x40012c00

08002ce0 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002ce0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002ce4:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	f04f 0302 	mov.w	r3, #2
 8002cec:	d018      	beq.n	8002d20 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8002cee:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002cf2:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002cf4:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002cf6:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002cf8:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002cfa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002cfe:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	4322      	orrs	r2, r4
 8002d04:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d0c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002d14:	2301      	movs	r3, #1
 8002d16:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002d20:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002d22:	bd10      	pop	{r4, pc}

08002d24 <HAL_TIMEx_CommutationCallback>:
 8002d24:	4770      	bx	lr

08002d26 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d26:	4770      	bx	lr

08002d28 <HAL_TIM_PeriodElapsedCallback>:
#include "IRremote.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002d28:	b508      	push	{r3, lr}
	if (htim == &htim4) {
 8002d2a:	4b27      	ldr	r3, [pc, #156]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002d2c:	4283      	cmp	r3, r0
 8002d2e:	d145      	bne.n	8002dbc <HAL_TIM_PeriodElapsedCallback+0x94>
		uint8_t irdata = RECIV_PIN; // пин для приёма
 8002d30:	2120      	movs	r1, #32
 8002d32:	4826      	ldr	r0, [pc, #152]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002d34:	f7fe faba 	bl	80012ac <HAL_GPIO_ReadPin>

		irparams.timer++;  // One more 50uS tick
 8002d38:	4b25      	ldr	r3, [pc, #148]	; (8002dd0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002d3a:	885a      	ldrh	r2, [r3, #2]
 8002d3c:	3201      	adds	r2, #1
 8002d3e:	b292      	uxth	r2, r2
 8002d40:	805a      	strh	r2, [r3, #2]
		if (irparams.rawlen >= RAWBUF)
 8002d42:	785a      	ldrb	r2, [r3, #1]
			irparams.rcvstate = STATE_OVERFLOW;  // Buffer overflow

		switch (irparams.rcvstate) {
 8002d44:	781a      	ldrb	r2, [r3, #0]
 8002d46:	3a02      	subs	r2, #2
 8002d48:	2a04      	cmp	r2, #4
 8002d4a:	d837      	bhi.n	8002dbc <HAL_TIM_PeriodElapsedCallback+0x94>
 8002d4c:	e8df f002 	tbb	[pc, r2]
 8002d50:	342c1b03 	.word	0x342c1b03
 8002d54:	37          	.byte	0x37
 8002d55:	00          	.byte	0x00
		case STATE_IDLE: // In the middle of a gap
			if (irdata == MARK) {
 8002d56:	2800      	cmp	r0, #0
 8002d58:	d130      	bne.n	8002dbc <HAL_TIM_PeriodElapsedCallback+0x94>
				if (irparams.timer < GAP_TICKS)  // Not big enough to be a gap.
 8002d5a:	885a      	ldrh	r2, [r3, #2]
 8002d5c:	b292      	uxth	r2, r2
 8002d5e:	2a63      	cmp	r2, #99	; 0x63
 8002d60:	d801      	bhi.n	8002d66 <HAL_TIM_PeriodElapsedCallback+0x3e>

			break;

		case STATE_STOP:  // Waiting; Measuring Gap
			if (irdata == MARK)
				irparams.timer = 0;  // Reset gap timer
 8002d62:	8058      	strh	r0, [r3, #2]
 8002d64:	bd08      	pop	{r3, pc}
					irparams.overflow = false;
 8002d66:	f883 0204 	strb.w	r0, [r3, #516]	; 0x204
					irparams.rawlen = 0;
 8002d6a:	7058      	strb	r0, [r3, #1]
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 8002d6c:	785a      	ldrb	r2, [r3, #1]
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	1c51      	adds	r1, r2, #1
 8002d72:	b2c9      	uxtb	r1, r1
 8002d74:	7059      	strb	r1, [r3, #1]
 8002d76:	8859      	ldrh	r1, [r3, #2]
 8002d78:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8002d7c:	b289      	uxth	r1, r1
 8002d7e:	8091      	strh	r1, [r2, #4]
				irparams.timer = 0;
 8002d80:	8058      	strh	r0, [r3, #2]
				irparams.rcvstate = STATE_MARK;
 8002d82:	2203      	movs	r2, #3
 8002d84:	e00e      	b.n	8002da4 <HAL_TIM_PeriodElapsedCallback+0x7c>
			if (irdata == SPACE) // Mark ended; Record time
 8002d86:	2801      	cmp	r0, #1
 8002d88:	d118      	bne.n	8002dbc <HAL_TIM_PeriodElapsedCallback+0x94>
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 8002d8a:	785a      	ldrb	r2, [r3, #1]
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	1c51      	adds	r1, r2, #1
 8002d90:	b2c9      	uxtb	r1, r1
 8002d92:	7059      	strb	r1, [r3, #1]
 8002d94:	8859      	ldrh	r1, [r3, #2]
 8002d96:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8002d9a:	b289      	uxth	r1, r1
 8002d9c:	8091      	strh	r1, [r2, #4]
				irparams.timer = 0;
 8002d9e:	2200      	movs	r2, #0
 8002da0:	805a      	strh	r2, [r3, #2]
				irparams.rcvstate = STATE_SPACE;
 8002da2:	2204      	movs	r2, #4
			break;

		case STATE_OVERFLOW:  // Flag up a read overflow; Stop the State Machine
			irparams.overflow = true;
			irparams.rcvstate = STATE_STOP;
 8002da4:	701a      	strb	r2, [r3, #0]
			break;
		}
	}
}
 8002da6:	e009      	b.n	8002dbc <HAL_TIM_PeriodElapsedCallback+0x94>
			if (irdata == MARK) // Space just ended; Record time
 8002da8:	2800      	cmp	r0, #0
 8002daa:	d0df      	beq.n	8002d6c <HAL_TIM_PeriodElapsedCallback+0x44>
			} else if (irparams.timer > GAP_TICKS) // Space
 8002dac:	885a      	ldrh	r2, [r3, #2]
 8002dae:	b292      	uxth	r2, r2
 8002db0:	2a64      	cmp	r2, #100	; 0x64
 8002db2:	d903      	bls.n	8002dbc <HAL_TIM_PeriodElapsedCallback+0x94>
			irparams.rcvstate = STATE_STOP;
 8002db4:	2205      	movs	r2, #5
 8002db6:	e7f5      	b.n	8002da4 <HAL_TIM_PeriodElapsedCallback+0x7c>
			if (irdata == MARK)
 8002db8:	2800      	cmp	r0, #0
 8002dba:	d0d2      	beq.n	8002d62 <HAL_TIM_PeriodElapsedCallback+0x3a>
 8002dbc:	bd08      	pop	{r3, pc}
			irparams.overflow = true;
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8002dc4:	e7f6      	b.n	8002db4 <HAL_TIM_PeriodElapsedCallback+0x8c>
 8002dc6:	bf00      	nop
 8002dc8:	2000075c 	.word	0x2000075c
 8002dcc:	40010c00 	.word	0x40010c00
 8002dd0:	20000530 	.word	0x20000530

08002dd4 <MATCH>:

////////////////////////////////////////////////////////////////////////////////////////////
int MATCH(int measured, int desired) {
 8002dd4:	b5d0      	push	{r4, r6, r7, lr}
 8002dd6:	4604      	mov	r4, r0
	return ((measured >= TICKS_LOW(desired))
 8002dd8:	4608      	mov	r0, r1
 8002dda:	f7fd fb0b 	bl	80003f4 <__aeabi_i2d>
 8002dde:	2200      	movs	r2, #0
 8002de0:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <MATCH+0x54>)
 8002de2:	4606      	mov	r6, r0
 8002de4:	460f      	mov	r7, r1
 8002de6:	f7fd fb6b 	bl	80004c0 <__aeabi_dmul>
 8002dea:	2200      	movs	r2, #0
 8002dec:	4b0f      	ldr	r3, [pc, #60]	; (8002e2c <MATCH+0x58>)
 8002dee:	f7fd fc91 	bl	8000714 <__aeabi_ddiv>
 8002df2:	f7fd fdff 	bl	80009f4 <__aeabi_d2iz>
			&& (measured <= TICKS_HIGH(desired)));
 8002df6:	42a0      	cmp	r0, r4
 8002df8:	dc14      	bgt.n	8002e24 <MATCH+0x50>
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	4b0c      	ldr	r3, [pc, #48]	; (8002e30 <MATCH+0x5c>)
 8002dfe:	4630      	mov	r0, r6
 8002e00:	4639      	mov	r1, r7
 8002e02:	f7fd fb5d 	bl	80004c0 <__aeabi_dmul>
 8002e06:	2200      	movs	r2, #0
 8002e08:	4b08      	ldr	r3, [pc, #32]	; (8002e2c <MATCH+0x58>)
 8002e0a:	f7fd fc83 	bl	8000714 <__aeabi_ddiv>
 8002e0e:	2200      	movs	r2, #0
 8002e10:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <MATCH+0x60>)
 8002e12:	f7fd f9a3 	bl	800015c <__adddf3>
 8002e16:	f7fd fded 	bl	80009f4 <__aeabi_d2iz>
 8002e1a:	4284      	cmp	r4, r0
 8002e1c:	bfcc      	ite	gt
 8002e1e:	2000      	movgt	r0, #0
 8002e20:	2001      	movle	r0, #1
 8002e22:	bdd0      	pop	{r4, r6, r7, pc}
 8002e24:	2000      	movs	r0, #0
}
 8002e26:	bdd0      	pop	{r4, r6, r7, pc}
 8002e28:	3fe80000 	.word	0x3fe80000
 8002e2c:	40490000 	.word	0x40490000
 8002e30:	3ff40000 	.word	0x3ff40000
 8002e34:	3ff00000 	.word	0x3ff00000

08002e38 <MATCH_MARK>:

int MATCH_MARK(int measured_ticks, int desired_us) {
 8002e38:	b5d0      	push	{r4, r6, r7, lr}
 8002e3a:	4604      	mov	r4, r0
	return ((measured_ticks >= TICKS_LOW(desired_us + MARK_EXCESS))
 8002e3c:	f101 0064 	add.w	r0, r1, #100	; 0x64
 8002e40:	f7fd fad8 	bl	80003f4 <__aeabi_i2d>
 8002e44:	2200      	movs	r2, #0
 8002e46:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <MATCH_MARK+0x58>)
 8002e48:	4606      	mov	r6, r0
 8002e4a:	460f      	mov	r7, r1
 8002e4c:	f7fd fb38 	bl	80004c0 <__aeabi_dmul>
 8002e50:	2200      	movs	r2, #0
 8002e52:	4b10      	ldr	r3, [pc, #64]	; (8002e94 <MATCH_MARK+0x5c>)
 8002e54:	f7fd fc5e 	bl	8000714 <__aeabi_ddiv>
 8002e58:	f7fd fdcc 	bl	80009f4 <__aeabi_d2iz>
			&& (measured_ticks <= TICKS_HIGH(desired_us + MARK_EXCESS)));
 8002e5c:	42a0      	cmp	r0, r4
 8002e5e:	dc14      	bgt.n	8002e8a <MATCH_MARK+0x52>
 8002e60:	2200      	movs	r2, #0
 8002e62:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <MATCH_MARK+0x60>)
 8002e64:	4630      	mov	r0, r6
 8002e66:	4639      	mov	r1, r7
 8002e68:	f7fd fb2a 	bl	80004c0 <__aeabi_dmul>
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <MATCH_MARK+0x5c>)
 8002e70:	f7fd fc50 	bl	8000714 <__aeabi_ddiv>
 8002e74:	2200      	movs	r2, #0
 8002e76:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <MATCH_MARK+0x64>)
 8002e78:	f7fd f970 	bl	800015c <__adddf3>
 8002e7c:	f7fd fdba 	bl	80009f4 <__aeabi_d2iz>
 8002e80:	4284      	cmp	r4, r0
 8002e82:	bfcc      	ite	gt
 8002e84:	2000      	movgt	r0, #0
 8002e86:	2001      	movle	r0, #1
 8002e88:	bdd0      	pop	{r4, r6, r7, pc}
 8002e8a:	2000      	movs	r0, #0
}
 8002e8c:	bdd0      	pop	{r4, r6, r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	3fe80000 	.word	0x3fe80000
 8002e94:	40490000 	.word	0x40490000
 8002e98:	3ff40000 	.word	0x3ff40000
 8002e9c:	3ff00000 	.word	0x3ff00000

08002ea0 <MATCH_SPACE>:

int MATCH_SPACE(int measured_ticks, int desired_us) {
 8002ea0:	b5d0      	push	{r4, r6, r7, lr}
 8002ea2:	4604      	mov	r4, r0
	return ((measured_ticks >= TICKS_LOW(desired_us - MARK_EXCESS))
 8002ea4:	f1a1 0064 	sub.w	r0, r1, #100	; 0x64
 8002ea8:	f7fd faa4 	bl	80003f4 <__aeabi_i2d>
 8002eac:	2200      	movs	r2, #0
 8002eae:	4b12      	ldr	r3, [pc, #72]	; (8002ef8 <MATCH_SPACE+0x58>)
 8002eb0:	4606      	mov	r6, r0
 8002eb2:	460f      	mov	r7, r1
 8002eb4:	f7fd fb04 	bl	80004c0 <__aeabi_dmul>
 8002eb8:	2200      	movs	r2, #0
 8002eba:	4b10      	ldr	r3, [pc, #64]	; (8002efc <MATCH_SPACE+0x5c>)
 8002ebc:	f7fd fc2a 	bl	8000714 <__aeabi_ddiv>
 8002ec0:	f7fd fd98 	bl	80009f4 <__aeabi_d2iz>
			&& (measured_ticks <= TICKS_HIGH(desired_us - MARK_EXCESS)));
 8002ec4:	42a0      	cmp	r0, r4
 8002ec6:	dc14      	bgt.n	8002ef2 <MATCH_SPACE+0x52>
 8002ec8:	2200      	movs	r2, #0
 8002eca:	4b0d      	ldr	r3, [pc, #52]	; (8002f00 <MATCH_SPACE+0x60>)
 8002ecc:	4630      	mov	r0, r6
 8002ece:	4639      	mov	r1, r7
 8002ed0:	f7fd faf6 	bl	80004c0 <__aeabi_dmul>
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	4b09      	ldr	r3, [pc, #36]	; (8002efc <MATCH_SPACE+0x5c>)
 8002ed8:	f7fd fc1c 	bl	8000714 <__aeabi_ddiv>
 8002edc:	2200      	movs	r2, #0
 8002ede:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <MATCH_SPACE+0x64>)
 8002ee0:	f7fd f93c 	bl	800015c <__adddf3>
 8002ee4:	f7fd fd86 	bl	80009f4 <__aeabi_d2iz>
 8002ee8:	4284      	cmp	r4, r0
 8002eea:	bfcc      	ite	gt
 8002eec:	2000      	movgt	r0, #0
 8002eee:	2001      	movle	r0, #1
 8002ef0:	bdd0      	pop	{r4, r6, r7, pc}
 8002ef2:	2000      	movs	r0, #0
}
 8002ef4:	bdd0      	pop	{r4, r6, r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	3fe80000 	.word	0x3fe80000
 8002efc:	40490000 	.word	0x40490000
 8002f00:	3ff40000 	.word	0x3ff40000
 8002f04:	3ff00000 	.word	0x3ff00000

08002f08 <my_enableIRIn>:
	my_resume();
	return false;
}

void my_enableIRIn() // initialization
{
 8002f08:	b530      	push	{r4, r5, lr}
	DWT_Init(); // старт счётчика микросекунд

	HAL_TIM_Base_DeInit(&htim4);
 8002f0a:	4c18      	ldr	r4, [pc, #96]	; (8002f6c <my_enableIRIn+0x64>)
{
 8002f0c:	b087      	sub	sp, #28
	DWT_Init(); // старт счётчика микросекунд
 8002f0e:	f000 f8f5 	bl	80030fc <DWT_Init>
	HAL_TIM_Base_DeInit(&htim4);
 8002f12:	4620      	mov	r0, r4
 8002f14:	f7ff fbdc 	bl	80026d0 <HAL_TIM_Base_DeInit>

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002f18:	2100      	movs	r1, #0
 8002f1a:	2210      	movs	r2, #16
 8002f1c:	a802      	add	r0, sp, #8
 8002f1e:	f002 f9ed 	bl	80052fc <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };

	htim4.Instance = TIM4;
	htim4.Init.Prescaler = MYPRESCALER;
 8002f22:	2347      	movs	r3, #71	; 0x47
 8002f24:	4a12      	ldr	r2, [pc, #72]	; (8002f70 <my_enableIRIn+0x68>)
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002f26:	2500      	movs	r5, #0
	htim4.Init.Prescaler = MYPRESCALER;
 8002f28:	e884 000c 	stmia.w	r4, {r2, r3}
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim4.Init.Period = MYPERIOD;
 8002f2c:	2331      	movs	r3, #49	; 0x31
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	HAL_TIM_Base_Init(&htim4);
 8002f2e:	4620      	mov	r0, r4
	htim4.Init.Period = MYPERIOD;
 8002f30:	60e3      	str	r3, [r4, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002f32:	9500      	str	r5, [sp, #0]
 8002f34:	9501      	str	r5, [sp, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f36:	60a5      	str	r5, [r4, #8]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f38:	6125      	str	r5, [r4, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f3a:	61a5      	str	r5, [r4, #24]
	HAL_TIM_Base_Init(&htim4);
 8002f3c:	f7ff fd88 	bl	8002a50 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 8002f44:	a902      	add	r1, sp, #8
 8002f46:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f48:	9302      	str	r3, [sp, #8]
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 8002f4a:	f7ff fbea 	bl	8002722 <HAL_TIM_ConfigClockSource>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 8002f4e:	4669      	mov	r1, sp
 8002f50:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f52:	9500      	str	r5, [sp, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f54:	9501      	str	r5, [sp, #4]
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 8002f56:	f7ff fec3 	bl	8002ce0 <HAL_TIMEx_MasterConfigSynchronization>

	irparams.rcvstate = STATE_IDLE;
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <my_enableIRIn+0x6c>)
	irparams.rawlen = 0;

	HAL_TIM_Base_Start_IT(&htim4);
 8002f5e:	4620      	mov	r0, r4
	irparams.rcvstate = STATE_IDLE;
 8002f60:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 8002f62:	705d      	strb	r5, [r3, #1]
	HAL_TIM_Base_Start_IT(&htim4);
 8002f64:	f7ff fbd1 	bl	800270a <HAL_TIM_Base_Start_IT>
}
 8002f68:	b007      	add	sp, #28
 8002f6a:	bd30      	pop	{r4, r5, pc}
 8002f6c:	2000075c 	.word	0x2000075c
 8002f70:	40000800 	.word	0x40000800
 8002f74:	20000530 	.word	0x20000530

08002f78 <my_resume>:
			true : false;
}

void my_resume() // Restart the ISR state machine
{
	irparams.rcvstate = STATE_IDLE;
 8002f78:	2202      	movs	r2, #2
 8002f7a:	4b02      	ldr	r3, [pc, #8]	; (8002f84 <my_resume+0xc>)
 8002f7c:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 8002f7e:	2200      	movs	r2, #0
 8002f80:	705a      	strb	r2, [r3, #1]
 8002f82:	4770      	bx	lr
 8002f84:	20000530 	.word	0x20000530

08002f88 <compare>:
}

int compare(unsigned int oldval, unsigned int newval) {
 8002f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f8a:	4606      	mov	r6, r0
	if (newval < oldval * .8)
 8002f8c:	4608      	mov	r0, r1
 8002f8e:	f7fd fa21 	bl	80003d4 <__aeabi_ui2d>
 8002f92:	4604      	mov	r4, r0
 8002f94:	4630      	mov	r0, r6
 8002f96:	460d      	mov	r5, r1
 8002f98:	f7fd fa1c 	bl	80003d4 <__aeabi_ui2d>
 8002f9c:	a310      	add	r3, pc, #64	; (adr r3, 8002fe0 <compare+0x58>)
 8002f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa2:	4606      	mov	r6, r0
 8002fa4:	460f      	mov	r7, r1
 8002fa6:	f7fd fa8b 	bl	80004c0 <__aeabi_dmul>
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	4620      	mov	r0, r4
 8002fb0:	4629      	mov	r1, r5
 8002fb2:	f7fd fcf7 	bl	80009a4 <__aeabi_dcmplt>
 8002fb6:	b988      	cbnz	r0, 8002fdc <compare+0x54>
		return 0;
	else if (oldval < newval * .8)
 8002fb8:	a309      	add	r3, pc, #36	; (adr r3, 8002fe0 <compare+0x58>)
 8002fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	4629      	mov	r1, r5
 8002fc2:	f7fd fa7d 	bl	80004c0 <__aeabi_dmul>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4630      	mov	r0, r6
 8002fcc:	4639      	mov	r1, r7
 8002fce:	f7fd fce9 	bl	80009a4 <__aeabi_dcmplt>
 8002fd2:	2800      	cmp	r0, #0
		return 2;
	else
		return 1;
 8002fd4:	bf14      	ite	ne
 8002fd6:	2002      	movne	r0, #2
 8002fd8:	2001      	moveq	r0, #1
 8002fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
 8002fdc:	2000      	movs	r0, #0
}
 8002fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fe0:	9999999a 	.word	0x9999999a
 8002fe4:	3fe99999 	.word	0x3fe99999

08002fe8 <decodeHash>:

#define FNV_PRIME_32 16777619
#define FNV_BASIS_32 2166136261

int32_t decodeHash(decode_results *results) {
 8002fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int32_t hash = FNV_BASIS_32;

	// Require at least 6 samples to prevent triggering on noise
	if (results->rawlen < 6)
 8002fec:	f9b0 7010 	ldrsh.w	r7, [r0, #16]
int32_t decodeHash(decode_results *results) {
 8002ff0:	4606      	mov	r6, r0
	if (results->rawlen < 6)
 8002ff2:	2f05      	cmp	r7, #5
 8002ff4:	dd1f      	ble.n	8003036 <decodeHash+0x4e>
 8002ff6:	2401      	movs	r4, #1
 8002ff8:	4d10      	ldr	r5, [pc, #64]	; (800303c <decodeHash+0x54>)
		return false;

	for (int16_t i = 1; (i + 2) < results->rawlen; i++) {
		int16_t value = compare(results->rawbuf[i], results->rawbuf[i + 2]);
		hash = (hash * FNV_PRIME_32) ^ value; // Add value into the hash
 8002ffa:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8003040 <decodeHash+0x58>
	for (int16_t i = 1; (i + 2) < results->rawlen; i++) {
 8002ffe:	1ca3      	adds	r3, r4, #2
 8003000:	42bb      	cmp	r3, r7
 8003002:	db07      	blt.n	8003014 <decodeHash+0x2c>
	}

	results->value = hash;
	results->bits = 32;
 8003004:	2320      	movs	r3, #32
 8003006:	8133      	strh	r3, [r6, #8]
	results->decode_type = UNKNOWN;
 8003008:	2300      	movs	r3, #0
	results->value = hash;
 800300a:	6075      	str	r5, [r6, #4]
	results->decode_type = UNKNOWN;
 800300c:	7033      	strb	r3, [r6, #0]
	return true;
 800300e:	2001      	movs	r0, #1
 8003010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int16_t value = compare(results->rawbuf[i], results->rawbuf[i + 2]);
 8003014:	68f2      	ldr	r2, [r6, #12]
 8003016:	0063      	lsls	r3, r4, #1
 8003018:	3304      	adds	r3, #4
 800301a:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 800301e:	5ad1      	ldrh	r1, [r2, r3]
 8003020:	b280      	uxth	r0, r0
 8003022:	b289      	uxth	r1, r1
 8003024:	f7ff ffb0 	bl	8002f88 <compare>
		hash = (hash * FNV_PRIME_32) ^ value; // Add value into the hash
 8003028:	fb08 f505 	mul.w	r5, r8, r5
 800302c:	b200      	sxth	r0, r0
 800302e:	3401      	adds	r4, #1
 8003030:	4045      	eors	r5, r0
 8003032:	b224      	sxth	r4, r4
 8003034:	e7e3      	b.n	8002ffe <decodeHash+0x16>
		return false;
 8003036:	2000      	movs	r0, #0
}
 8003038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800303c:	811c9dc5 	.word	0x811c9dc5
 8003040:	01000193 	.word	0x01000193

08003044 <my_decode>:
int16_t my_decode(decode_results *results) {
 8003044:	b510      	push	{r4, lr}
	results->rawbuf = irparams.rawbuf;
 8003046:	4b2c      	ldr	r3, [pc, #176]	; (80030f8 <my_decode+0xb4>)
int16_t my_decode(decode_results *results) {
 8003048:	4604      	mov	r4, r0
	results->rawlen = irparams.rawlen;
 800304a:	f813 1c03 	ldrb.w	r1, [r3, #-3]
	results->rawbuf = irparams.rawbuf;
 800304e:	60c3      	str	r3, [r0, #12]
	results->rawlen = irparams.rawlen;
 8003050:	8201      	strh	r1, [r0, #16]
	results->overflow = irparams.overflow;
 8003052:	f893 2200 	ldrb.w	r2, [r3, #512]	; 0x200
	if (irparams.rcvstate != STATE_STOP)
 8003056:	f813 3c04 	ldrb.w	r3, [r3, #-4]
	results->overflow = irparams.overflow;
 800305a:	8242      	strh	r2, [r0, #18]
	if (irparams.rcvstate != STATE_STOP)
 800305c:	2b05      	cmp	r3, #5
 800305e:	d148      	bne.n	80030f2 <my_decode+0xae>
	if (decodeNEC(results))
 8003060:	f000 fa9e 	bl	80035a0 <decodeNEC>
 8003064:	b108      	cbz	r0, 800306a <my_decode+0x26>
		return true;
 8003066:	2001      	movs	r0, #1
 8003068:	bd10      	pop	{r4, pc}
	if (decodeSony(results))
 800306a:	4620      	mov	r0, r4
 800306c:	f000 fd4e 	bl	8003b0c <decodeSony>
 8003070:	2800      	cmp	r0, #0
 8003072:	d1f8      	bne.n	8003066 <my_decode+0x22>
	if (decodeSanyo(results))
 8003074:	4620      	mov	r0, r4
 8003076:	f000 fcdf 	bl	8003a38 <decodeSanyo>
 800307a:	2800      	cmp	r0, #0
 800307c:	d1f3      	bne.n	8003066 <my_decode+0x22>
	if (decodeMitsubishi(results))
 800307e:	4620      	mov	r0, r4
 8003080:	f000 fa38 	bl	80034f4 <decodeMitsubishi>
 8003084:	2800      	cmp	r0, #0
 8003086:	d1ee      	bne.n	8003066 <my_decode+0x22>
	if (decodeRC5(results))
 8003088:	4620      	mov	r0, r4
 800308a:	f000 fb79 	bl	8003780 <decodeRC5>
 800308e:	2800      	cmp	r0, #0
 8003090:	d1e9      	bne.n	8003066 <my_decode+0x22>
	if (decodeRC6(results))
 8003092:	4620      	mov	r0, r4
 8003094:	f000 fbca 	bl	800382c <decodeRC6>
 8003098:	2800      	cmp	r0, #0
 800309a:	d1e4      	bne.n	8003066 <my_decode+0x22>
	if (decodePanasonic(results))
 800309c:	4620      	mov	r0, r4
 800309e:	f000 fadf 	bl	8003660 <decodePanasonic>
 80030a2:	2800      	cmp	r0, #0
 80030a4:	d1df      	bne.n	8003066 <my_decode+0x22>
	if (decodeLG(results))
 80030a6:	4620      	mov	r0, r4
 80030a8:	f000 f9d0 	bl	800344c <decodeLG>
 80030ac:	2800      	cmp	r0, #0
 80030ae:	d1da      	bne.n	8003066 <my_decode+0x22>
	if (decodeJVC(results))
 80030b0:	4620      	mov	r0, r4
 80030b2:	f000 f959 	bl	8003368 <decodeJVC>
 80030b6:	2800      	cmp	r0, #0
 80030b8:	d1d5      	bne.n	8003066 <my_decode+0x22>
	if (decodeSAMSUNG(results))
 80030ba:	4620      	mov	r0, r4
 80030bc:	f000 fc5c 	bl	8003978 <decodeSAMSUNG>
 80030c0:	2800      	cmp	r0, #0
 80030c2:	d1d0      	bne.n	8003066 <my_decode+0x22>
	if (decodeWhynter(results))
 80030c4:	4620      	mov	r0, r4
 80030c6:	f000 fd83 	bl	8003bd0 <decodeWhynter>
 80030ca:	2800      	cmp	r0, #0
 80030cc:	d1cb      	bne.n	8003066 <my_decode+0x22>
	if (decodeAiwaRCT501(results))
 80030ce:	4620      	mov	r0, r4
 80030d0:	f000 f8a6 	bl	8003220 <decodeAiwaRCT501>
 80030d4:	2800      	cmp	r0, #0
 80030d6:	d1c6      	bne.n	8003066 <my_decode+0x22>
	if (decodeDenon(results))
 80030d8:	4620      	mov	r0, r4
 80030da:	f000 f8fd 	bl	80032d8 <decodeDenon>
 80030de:	2800      	cmp	r0, #0
 80030e0:	d1c1      	bne.n	8003066 <my_decode+0x22>
	if (decodeHash(results))
 80030e2:	4620      	mov	r0, r4
 80030e4:	f7ff ff80 	bl	8002fe8 <decodeHash>
 80030e8:	2800      	cmp	r0, #0
 80030ea:	d1bc      	bne.n	8003066 <my_decode+0x22>
	my_resume();
 80030ec:	f7ff ff44 	bl	8002f78 <my_resume>
	return false;
 80030f0:	bd10      	pop	{r4, pc}
		return false;
 80030f2:	2000      	movs	r0, #0
}
 80030f4:	bd10      	pop	{r4, pc}
 80030f6:	bf00      	nop
 80030f8:	20000534 	.word	0x20000534

080030fc <DWT_Init>:
///////////////////////////// счётчик микросекунд ///////////////////////////////
#define DWT_CONTROL *(volatile unsigned long *)0xE0001000
#define SCB_DEMCR *(volatile unsigned long *)0xE000EDFC

void DWT_Init() {
	SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 80030fc:	4a05      	ldr	r2, [pc, #20]	; (8003114 <DWT_Init+0x18>)
 80030fe:	6813      	ldr	r3, [r2, #0]
 8003100:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003104:	6013      	str	r3, [r2, #0]
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8003106:	4a04      	ldr	r2, [pc, #16]	; (8003118 <DWT_Init+0x1c>)
 8003108:	6813      	ldr	r3, [r2, #0]
 800310a:	f043 0301 	orr.w	r3, r3, #1
 800310e:	6013      	str	r3, [r2, #0]
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	e000edfc 	.word	0xe000edfc
 8003118:	e0001000 	.word	0xe0001000

0800311c <enableIROut>:
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
	if (time > 0)
		custom_delay_usec(time);
}

void enableIROut(uint8_t khz) {
 800311c:	b570      	push	{r4, r5, r6, lr}
	uint16_t pwm_freq = 0;
	uint16_t pwm_pulse = 0;
	pwm_freq = MYSYSCLOCK / (khz * 1000) - 1;
 800311e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8003122:	4370      	muls	r0, r6
	pwm_pulse = pwm_freq / 3;

	HAL_TIM_Base_DeInit(&htim4);
 8003124:	4c21      	ldr	r4, [pc, #132]	; (80031ac <enableIROut+0x90>)
	pwm_freq = MYSYSCLOCK / (khz * 1000) - 1;
 8003126:	4e22      	ldr	r6, [pc, #136]	; (80031b0 <enableIROut+0x94>)
void enableIROut(uint8_t khz) {
 8003128:	b08e      	sub	sp, #56	; 0x38
	pwm_freq = MYSYSCLOCK / (khz * 1000) - 1;
 800312a:	fb96 f6f0 	sdiv	r6, r6, r0
	HAL_TIM_Base_DeInit(&htim4);
 800312e:	4620      	mov	r0, r4
 8003130:	f7ff face 	bl	80026d0 <HAL_TIM_Base_DeInit>

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003134:	2210      	movs	r2, #16
 8003136:	2100      	movs	r1, #0
 8003138:	a803      	add	r0, sp, #12
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800313a:	2500      	movs	r5, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800313c:	f002 f8de 	bl	80052fc <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003140:	221c      	movs	r2, #28
 8003142:	4629      	mov	r1, r5
 8003144:	eb0d 0002 	add.w	r0, sp, r2
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003148:	9501      	str	r5, [sp, #4]
 800314a:	9502      	str	r5, [sp, #8]
	pwm_freq = MYSYSCLOCK / (khz * 1000) - 1;
 800314c:	3e01      	subs	r6, #1
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800314e:	f002 f8d5 	bl	80052fc <memset>

	htim4.Instance = TIM4;
 8003152:	4b18      	ldr	r3, [pc, #96]	; (80031b4 <enableIROut+0x98>)
	pwm_freq = MYSYSCLOCK / (khz * 1000) - 1;
 8003154:	b2b6      	uxth	r6, r6
	htim4.Init.Prescaler = 0;
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim4.Init.Period = pwm_freq;
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	HAL_TIM_Base_Init(&htim4);
 8003156:	4620      	mov	r0, r4
	htim4.Init.Prescaler = 0;
 8003158:	e884 0028 	stmia.w	r4, {r3, r5}
	htim4.Init.Period = pwm_freq;
 800315c:	60e6      	str	r6, [r4, #12]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800315e:	60a5      	str	r5, [r4, #8]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003160:	6125      	str	r5, [r4, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003162:	61a5      	str	r5, [r4, #24]
	HAL_TIM_Base_Init(&htim4);
 8003164:	f7ff fc74 	bl	8002a50 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 800316c:	a903      	add	r1, sp, #12
 800316e:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003170:	9303      	str	r3, [sp, #12]
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 8003172:	f7ff fad6 	bl	8002722 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim4);
 8003176:	4620      	mov	r0, r4
 8003178:	f7ff fc84 	bl	8002a84 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 800317c:	a901      	add	r1, sp, #4
 800317e:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003180:	9501      	str	r5, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003182:	9502      	str	r5, [sp, #8]
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 8003184:	f7ff fdac 	bl	8002ce0 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003188:	2360      	movs	r3, #96	; 0x60
 800318a:	9307      	str	r3, [sp, #28]
	sConfigOC.Pulse = pwm_pulse;
 800318c:	2303      	movs	r3, #3
 800318e:	fbb6 f6f3 	udiv	r6, r6, r3
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1);
 8003192:	462a      	mov	r2, r5
 8003194:	a907      	add	r1, sp, #28
 8003196:	4620      	mov	r0, r4
	sConfigOC.Pulse = pwm_pulse;
 8003198:	9608      	str	r6, [sp, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800319a:	9509      	str	r5, [sp, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800319c:	950b      	str	r5, [sp, #44]	; 0x2c
	HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1);
 800319e:	f7ff fcb7 	bl	8002b10 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim4);
 80031a2:	4620      	mov	r0, r4
 80031a4:	f001 ff86 	bl	80050b4 <HAL_TIM_MspPostInit>
}
 80031a8:	b00e      	add	sp, #56	; 0x38
 80031aa:	bd70      	pop	{r4, r5, r6, pc}
 80031ac:	2000075c 	.word	0x2000075c
 80031b0:	044aa200 	.word	0x044aa200
 80031b4:	40000800 	.word	0x40000800

080031b8 <custom_delay_usec>:

void custom_delay_usec(unsigned long us) {
	uint32_t us_count_tic = us * (SystemCoreClock / 1000000);
 80031b8:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <custom_delay_usec+0x1c>)
 80031ba:	4a07      	ldr	r2, [pc, #28]	; (80031d8 <custom_delay_usec+0x20>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	fbb3 f3f2 	udiv	r3, r3, r2
	DWT->CYCCNT = 0U; // обнуляем счётчик
 80031c2:	2200      	movs	r2, #0
	uint32_t us_count_tic = us * (SystemCoreClock / 1000000);
 80031c4:	4358      	muls	r0, r3
	DWT->CYCCNT = 0U; // обнуляем счётчик
 80031c6:	4b05      	ldr	r3, [pc, #20]	; (80031dc <custom_delay_usec+0x24>)
 80031c8:	605a      	str	r2, [r3, #4]
	while (DWT->CYCCNT < us_count_tic)
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	4290      	cmp	r0, r2
 80031ce:	d8fc      	bhi.n	80031ca <custom_delay_usec+0x12>
		;
}
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	20000020 	.word	0x20000020
 80031d8:	000f4240 	.word	0x000f4240
 80031dc:	e0001000 	.word	0xe0001000

080031e0 <mark>:
void mark(unsigned int time) {
 80031e0:	b510      	push	{r4, lr}
 80031e2:	4604      	mov	r4, r0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80031e4:	2100      	movs	r1, #0
 80031e6:	4805      	ldr	r0, [pc, #20]	; (80031fc <mark+0x1c>)
 80031e8:	f7ff fd00 	bl	8002bec <HAL_TIM_PWM_Start>
	if (time > 0)
 80031ec:	b124      	cbz	r4, 80031f8 <mark+0x18>
		custom_delay_usec(time);
 80031ee:	4620      	mov	r0, r4
}
 80031f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		custom_delay_usec(time);
 80031f4:	f7ff bfe0 	b.w	80031b8 <custom_delay_usec>
 80031f8:	bd10      	pop	{r4, pc}
 80031fa:	bf00      	nop
 80031fc:	2000075c 	.word	0x2000075c

08003200 <space>:
void space(unsigned int time) {
 8003200:	b510      	push	{r4, lr}
 8003202:	4604      	mov	r4, r0
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8003204:	2100      	movs	r1, #0
 8003206:	4805      	ldr	r0, [pc, #20]	; (800321c <space+0x1c>)
 8003208:	f7ff fd06 	bl	8002c18 <HAL_TIM_PWM_Stop>
	if (time > 0)
 800320c:	b124      	cbz	r4, 8003218 <space+0x18>
		custom_delay_usec(time);
 800320e:	4620      	mov	r0, r4
}
 8003210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		custom_delay_usec(time);
 8003214:	f7ff bfd0 	b.w	80031b8 <custom_delay_usec>
 8003218:	bd10      	pop	{r4, pc}
 800321a:	bf00      	nop
 800321c:	2000075c 	.word	0x2000075c

08003220 <decodeAiwaRCT501>:
#endif

//+=============================================================================
#if DECODE_AIWA_RC_T501
uint8_t decodeAiwaRCT501(decode_results *results)
{
 8003220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int  data   = 0;
	int  offset = 1;

	// Check SIZE
	if (irparams.rawlen < 2 * (AIWA_RC_T501_SUM_BITS) + 4)  return false ;
 8003224:	4b2b      	ldr	r3, [pc, #172]	; (80032d4 <decodeAiwaRCT501+0xb4>)
{
 8003226:	4604      	mov	r4, r0
	if (irparams.rawlen < 2 * (AIWA_RC_T501_SUM_BITS) + 4)  return false ;
 8003228:	785a      	ldrb	r2, [r3, #1]
 800322a:	4698      	mov	r8, r3
 800322c:	2a57      	cmp	r2, #87	; 0x57
 800322e:	d802      	bhi.n	8003236 <decodeAiwaRCT501+0x16>
 8003230:	2000      	movs	r0, #0
 8003232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	// Check HDR Mark/Space
	if (!MATCH_MARK (results->rawbuf[offset++], AIWA_RC_T501_HDR_MARK ))  return false ;
 8003236:	68c3      	ldr	r3, [r0, #12]
 8003238:	f242 2160 	movw	r1, #8800	; 0x2260
 800323c:	8858      	ldrh	r0, [r3, #2]
 800323e:	b280      	uxth	r0, r0
 8003240:	f7ff fdfa 	bl	8002e38 <MATCH_MARK>
 8003244:	2800      	cmp	r0, #0
 8003246:	d0f3      	beq.n	8003230 <decodeAiwaRCT501+0x10>
	if (!MATCH_SPACE(results->rawbuf[offset++], AIWA_RC_T501_HDR_SPACE))  return false ;
 8003248:	68e3      	ldr	r3, [r4, #12]
 800324a:	f241 1194 	movw	r1, #4500	; 0x1194
 800324e:	8898      	ldrh	r0, [r3, #4]
 8003250:	b280      	uxth	r0, r0
 8003252:	f7ff fe25 	bl	8002ea0 <MATCH_SPACE>
 8003256:	2800      	cmp	r0, #0
 8003258:	d0ea      	beq.n	8003230 <decodeAiwaRCT501+0x10>
 800325a:	271d      	movs	r7, #29
 800325c:	2500      	movs	r5, #0

	offset += 26;  // skip pre-data - optional
	while(offset < irparams.rawlen - 4) {
 800325e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003262:	3b04      	subs	r3, #4
 8003264:	429f      	cmp	r7, r3
 8003266:	db0c      	blt.n	8003282 <decodeAiwaRCT501+0x62>
 8003268:	463e      	mov	r6, r7
		else if (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ZERO_SPACE))  data = (data << 1) | 0 ;
		else                                                                     break ;  // End of one & zero detected
		offset++;
	}

	results->bits = (offset - 1) / 2;
 800326a:	3e01      	subs	r6, #1
 800326c:	f346 064f 	sbfx	r6, r6, #1, #16
	if (results->bits < 42)  return false ;
 8003270:	2e29      	cmp	r6, #41	; 0x29
	results->bits = (offset - 1) / 2;
 8003272:	8126      	strh	r6, [r4, #8]
	if (results->bits < 42)  return false ;
 8003274:	dddc      	ble.n	8003230 <decodeAiwaRCT501+0x10>

	results->value       = data;
	results->decode_type = AIWA_RC_T501;
 8003276:	2309      	movs	r3, #9
	results->value       = data;
 8003278:	6065      	str	r5, [r4, #4]
	results->decode_type = AIWA_RC_T501;
 800327a:	7023      	strb	r3, [r4, #0]
	return true;
 800327c:	2001      	movs	r0, #1
}
 800327e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (MATCH_MARK(results->rawbuf[offset], AIWA_RC_T501_BIT_MARK))  offset++ ;
 8003282:	68e3      	ldr	r3, [r4, #12]
 8003284:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003288:	f833 0017 	ldrh.w	r0, [r3, r7, lsl #1]
 800328c:	ea4f 0947 	mov.w	r9, r7, lsl #1
 8003290:	b280      	uxth	r0, r0
 8003292:	f7ff fdd1 	bl	8002e38 <MATCH_MARK>
 8003296:	2800      	cmp	r0, #0
 8003298:	d0ca      	beq.n	8003230 <decodeAiwaRCT501+0x10>
		if      (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ONE_SPACE))   data = (data << 1) | 1 ;
 800329a:	68e3      	ldr	r3, [r4, #12]
 800329c:	f109 0902 	add.w	r9, r9, #2
 80032a0:	f833 0009 	ldrh.w	r0, [r3, r9]
 80032a4:	f44f 7116 	mov.w	r1, #600	; 0x258
 80032a8:	b280      	uxth	r0, r0
 80032aa:	1c7e      	adds	r6, r7, #1
 80032ac:	f7ff fdf8 	bl	8002ea0 <MATCH_SPACE>
 80032b0:	b120      	cbz	r0, 80032bc <decodeAiwaRCT501+0x9c>
 80032b2:	006d      	lsls	r5, r5, #1
 80032b4:	f045 0501 	orr.w	r5, r5, #1
		offset++;
 80032b8:	3702      	adds	r7, #2
 80032ba:	e7d0      	b.n	800325e <decodeAiwaRCT501+0x3e>
		else if (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ZERO_SPACE))  data = (data << 1) | 0 ;
 80032bc:	68e3      	ldr	r3, [r4, #12]
 80032be:	f240 61a4 	movw	r1, #1700	; 0x6a4
 80032c2:	f833 0009 	ldrh.w	r0, [r3, r9]
 80032c6:	b280      	uxth	r0, r0
 80032c8:	f7ff fdea 	bl	8002ea0 <MATCH_SPACE>
 80032cc:	2800      	cmp	r0, #0
 80032ce:	d0cc      	beq.n	800326a <decodeAiwaRCT501+0x4a>
 80032d0:	006d      	lsls	r5, r5, #1
 80032d2:	e7f1      	b.n	80032b8 <decodeAiwaRCT501+0x98>
 80032d4:	20000530 	.word	0x20000530

080032d8 <decodeDenon>:
#endif

//+=============================================================================
//
#if DECODE_DENON
uint8_t decodeDenon(decode_results *results) {
 80032d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned long data = 0;  // Somewhere to build our code
	int offset = 1;  // Skip the Gap reading

	// Check we have the right amount of data
	if (irparams.rawlen != 1 + 2 + (2 * BITS) + 1)
 80032da:	4b22      	ldr	r3, [pc, #136]	; (8003364 <decodeDenon+0x8c>)
uint8_t decodeDenon(decode_results *results) {
 80032dc:	4604      	mov	r4, r0
	if (irparams.rawlen != 1 + 2 + (2 * BITS) + 1)
 80032de:	785b      	ldrb	r3, [r3, #1]
 80032e0:	2b20      	cmp	r3, #32
 80032e2:	d001      	beq.n	80032e8 <decodeDenon+0x10>
		return false;
 80032e4:	2000      	movs	r0, #0
 80032e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	// Check initial Mark+Space match
	if (!MATCH_MARK(results->rawbuf[offset++], HDR_MARK))
 80032e8:	68c3      	ldr	r3, [r0, #12]
 80032ea:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80032ee:	8858      	ldrh	r0, [r3, #2]
 80032f0:	b280      	uxth	r0, r0
 80032f2:	f7ff fda1 	bl	8002e38 <MATCH_MARK>
 80032f6:	2800      	cmp	r0, #0
 80032f8:	d0f4      	beq.n	80032e4 <decodeDenon+0xc>
		return false;
	if (!MATCH_SPACE(results->rawbuf[offset++], HDR_SPACE))
 80032fa:	68e3      	ldr	r3, [r4, #12]
 80032fc:	f240 21ee 	movw	r1, #750	; 0x2ee
 8003300:	8898      	ldrh	r0, [r3, #4]
 8003302:	b280      	uxth	r0, r0
 8003304:	f7ff fdcc 	bl	8002ea0 <MATCH_SPACE>
 8003308:	2800      	cmp	r0, #0
 800330a:	d0eb      	beq.n	80032e4 <decodeDenon+0xc>
 800330c:	2706      	movs	r7, #6
 800330e:	2500      	movs	r5, #0

	// Read the bits in
	for (int i = 0; i < BITS; i++) {
		// Each bit looks like: MARK + SPACE_1 -> 1
		//                 or : MARK + SPACE_0 -> 0
		if (!MATCH_MARK(results->rawbuf[offset++], BIT_MARK))
 8003310:	68e3      	ldr	r3, [r4, #12]
 8003312:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003316:	5bd8      	ldrh	r0, [r3, r7]
 8003318:	b280      	uxth	r0, r0
 800331a:	f7ff fd8d 	bl	8002e38 <MATCH_MARK>
 800331e:	2800      	cmp	r0, #0
 8003320:	d0e0      	beq.n	80032e4 <decodeDenon+0xc>
			return false;

		// IR data is big-endian, so we shuffle it in from the right:
		if (MATCH_SPACE(results->rawbuf[offset], ONE_SPACE))
 8003322:	68e3      	ldr	r3, [r4, #12]
 8003324:	1cbe      	adds	r6, r7, #2
 8003326:	5b98      	ldrh	r0, [r3, r6]
 8003328:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 800332c:	b280      	uxth	r0, r0
 800332e:	f7ff fdb7 	bl	8002ea0 <MATCH_SPACE>
 8003332:	b160      	cbz	r0, 800334e <decodeDenon+0x76>
			data = (data << 1) | 1;
 8003334:	006d      	lsls	r5, r5, #1
 8003336:	f045 0501 	orr.w	r5, r5, #1
 800333a:	3704      	adds	r7, #4
	for (int i = 0; i < BITS; i++) {
 800333c:	2f3e      	cmp	r7, #62	; 0x3e
 800333e:	d1e7      	bne.n	8003310 <decodeDenon+0x38>
			return false;
		offset++;
	}

	// Success
	results->bits = BITS;
 8003340:	230e      	movs	r3, #14
 8003342:	8123      	strh	r3, [r4, #8]
	results->value = data;
	results->decode_type = DENON;
 8003344:	230f      	movs	r3, #15
	results->value = data;
 8003346:	6065      	str	r5, [r4, #4]
	results->decode_type = DENON;
 8003348:	7023      	strb	r3, [r4, #0]
	return true;
 800334a:	2001      	movs	r0, #1
}
 800334c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		else if (MATCH_SPACE(results->rawbuf[offset], ZERO_SPACE))
 800334e:	68e3      	ldr	r3, [r4, #12]
 8003350:	f240 21ee 	movw	r1, #750	; 0x2ee
 8003354:	5b98      	ldrh	r0, [r3, r6]
 8003356:	b280      	uxth	r0, r0
 8003358:	f7ff fda2 	bl	8002ea0 <MATCH_SPACE>
 800335c:	2800      	cmp	r0, #0
 800335e:	d0c1      	beq.n	80032e4 <decodeDenon+0xc>
			data = (data << 1) | 0;
 8003360:	006d      	lsls	r5, r5, #1
 8003362:	e7ea      	b.n	800333a <decodeDenon+0x62>
 8003364:	20000530 	.word	0x20000530

08003368 <decodeJVC>:
}
#endif

//+=============================================================================
#if DECODE_JVC
uint8_t decodeJVC(decode_results *results) {
 8003368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	long data = 0;
	int offset = 1; // Skip first space

	// Check for repeat
	if ((irparams.rawlen - 1 == 33)
 800336a:	4d37      	ldr	r5, [pc, #220]	; (8003448 <decodeJVC+0xe0>)
uint8_t decodeJVC(decode_results *results) {
 800336c:	4604      	mov	r4, r0
	if ((irparams.rawlen - 1 == 33)
 800336e:	786b      	ldrb	r3, [r5, #1]
 8003370:	462e      	mov	r6, r5
 8003372:	2b22      	cmp	r3, #34	; 0x22
 8003374:	d11d      	bne.n	80033b2 <decodeJVC+0x4a>
			&& MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK)
 8003376:	68c3      	ldr	r3, [r0, #12]
 8003378:	f44f 7116 	mov.w	r1, #600	; 0x258
 800337c:	8858      	ldrh	r0, [r3, #2]
 800337e:	b280      	uxth	r0, r0
 8003380:	f7ff fd5a 	bl	8002e38 <MATCH_MARK>
 8003384:	b1a8      	cbz	r0, 80033b2 <decodeJVC+0x4a>
			&& MATCH_MARK(results->rawbuf[irparams.rawlen - 1], JVC_BIT_MARK)) {
 8003386:	786b      	ldrb	r3, [r5, #1]
 8003388:	68e2      	ldr	r2, [r4, #12]
 800338a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800338e:	3b01      	subs	r3, #1
 8003390:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8003394:	f44f 7116 	mov.w	r1, #600	; 0x258
 8003398:	b280      	uxth	r0, r0
 800339a:	f7ff fd4d 	bl	8002e38 <MATCH_MARK>
 800339e:	b140      	cbz	r0, 80033b2 <decodeJVC+0x4a>
		results->bits = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	8123      	strh	r3, [r4, #8]
		results->value = REPEAT;
 80033a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033a8:	6063      	str	r3, [r4, #4]
		return false;

	// Success
	results->bits = JVC_BITS;
	results->value = data;
	results->decode_type = JVC;
 80033aa:	2306      	movs	r3, #6

	return true;
 80033ac:	2001      	movs	r0, #1
	results->decode_type = JVC;
 80033ae:	7023      	strb	r3, [r4, #0]
}
 80033b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!MATCH_MARK(results->rawbuf[offset++], JVC_HDR_MARK))
 80033b2:	68e3      	ldr	r3, [r4, #12]
 80033b4:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80033b8:	8858      	ldrh	r0, [r3, #2]
 80033ba:	b280      	uxth	r0, r0
 80033bc:	f7ff fd3c 	bl	8002e38 <MATCH_MARK>
 80033c0:	b908      	cbnz	r0, 80033c6 <decodeJVC+0x5e>
		return false;
 80033c2:	2000      	movs	r0, #0
 80033c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (irparams.rawlen < (2 * JVC_BITS) + 1)
 80033c6:	7873      	ldrb	r3, [r6, #1]
 80033c8:	2b20      	cmp	r3, #32
 80033ca:	d9fa      	bls.n	80033c2 <decodeJVC+0x5a>
	if (!MATCH_SPACE(results->rawbuf[offset++], JVC_HDR_SPACE))
 80033cc:	68e3      	ldr	r3, [r4, #12]
 80033ce:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80033d2:	8898      	ldrh	r0, [r3, #4]
 80033d4:	b280      	uxth	r0, r0
 80033d6:	f7ff fd63 	bl	8002ea0 <MATCH_SPACE>
 80033da:	2800      	cmp	r0, #0
 80033dc:	d0f1      	beq.n	80033c2 <decodeJVC+0x5a>
 80033de:	2603      	movs	r6, #3
 80033e0:	2500      	movs	r5, #0
		if (!MATCH_MARK(results->rawbuf[offset++], JVC_BIT_MARK))
 80033e2:	68e3      	ldr	r3, [r4, #12]
 80033e4:	f44f 7116 	mov.w	r1, #600	; 0x258
 80033e8:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 80033ec:	0077      	lsls	r7, r6, #1
 80033ee:	b280      	uxth	r0, r0
 80033f0:	f7ff fd22 	bl	8002e38 <MATCH_MARK>
 80033f4:	2800      	cmp	r0, #0
 80033f6:	d0e4      	beq.n	80033c2 <decodeJVC+0x5a>
		if (MATCH_SPACE(results->rawbuf[offset], JVC_ONE_SPACE))
 80033f8:	68e3      	ldr	r3, [r4, #12]
 80033fa:	3702      	adds	r7, #2
 80033fc:	5bd8      	ldrh	r0, [r3, r7]
 80033fe:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8003402:	b280      	uxth	r0, r0
 8003404:	f7ff fd4c 	bl	8002ea0 <MATCH_SPACE>
 8003408:	b198      	cbz	r0, 8003432 <decodeJVC+0xca>
			data = (data << 1) | 1;
 800340a:	006d      	lsls	r5, r5, #1
 800340c:	f045 0501 	orr.w	r5, r5, #1
		offset++;
 8003410:	3602      	adds	r6, #2
	for (int i = 0; i < JVC_BITS; i++) {
 8003412:	2e23      	cmp	r6, #35	; 0x23
 8003414:	d1e5      	bne.n	80033e2 <decodeJVC+0x7a>
	if (!MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK))
 8003416:	68e3      	ldr	r3, [r4, #12]
 8003418:	f44f 7116 	mov.w	r1, #600	; 0x258
 800341c:	f8b3 0046 	ldrh.w	r0, [r3, #70]	; 0x46
 8003420:	b280      	uxth	r0, r0
 8003422:	f7ff fd09 	bl	8002e38 <MATCH_MARK>
 8003426:	2800      	cmp	r0, #0
 8003428:	d0cb      	beq.n	80033c2 <decodeJVC+0x5a>
	results->bits = JVC_BITS;
 800342a:	2310      	movs	r3, #16
	results->value = data;
 800342c:	6065      	str	r5, [r4, #4]
	results->bits = JVC_BITS;
 800342e:	8123      	strh	r3, [r4, #8]
 8003430:	e7bb      	b.n	80033aa <decodeJVC+0x42>
		else if (MATCH_SPACE(results->rawbuf[offset], JVC_ZERO_SPACE))
 8003432:	68e3      	ldr	r3, [r4, #12]
 8003434:	f240 2126 	movw	r1, #550	; 0x226
 8003438:	5bd8      	ldrh	r0, [r3, r7]
 800343a:	b280      	uxth	r0, r0
 800343c:	f7ff fd30 	bl	8002ea0 <MATCH_SPACE>
 8003440:	2800      	cmp	r0, #0
 8003442:	d0be      	beq.n	80033c2 <decodeJVC+0x5a>
			data = (data << 1) | 0;
 8003444:	006d      	lsls	r5, r5, #1
 8003446:	e7e3      	b.n	8003410 <decodeJVC+0xa8>
 8003448:	20000530 	.word	0x20000530

0800344c <decodeLG>:
#define LG_ZERO_SPACE 550
#define LG_RPT_LENGTH 60000

//+=============================================================================
#if DECODE_LG
uint8_t decodeLG(decode_results *results) {
 800344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	long data = 0;
	int offset = 1; // Skip first space

	// Check we have the right amount of data
	if (irparams.rawlen < (2 * LG_BITS) + 1)
 800344e:	4b28      	ldr	r3, [pc, #160]	; (80034f0 <decodeLG+0xa4>)
uint8_t decodeLG(decode_results *results) {
 8003450:	4604      	mov	r4, r0
	if (irparams.rawlen < (2 * LG_BITS) + 1)
 8003452:	785b      	ldrb	r3, [r3, #1]
 8003454:	2b38      	cmp	r3, #56	; 0x38
 8003456:	d801      	bhi.n	800345c <decodeLG+0x10>
		return false;
 8003458:	2000      	movs	r0, #0
 800345a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	// Initial mark/space
	if (!MATCH_MARK(results->rawbuf[offset++], LG_HDR_MARK))
 800345c:	68c3      	ldr	r3, [r0, #12]
 800345e:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8003462:	8858      	ldrh	r0, [r3, #2]
 8003464:	b280      	uxth	r0, r0
 8003466:	f7ff fce7 	bl	8002e38 <MATCH_MARK>
 800346a:	2800      	cmp	r0, #0
 800346c:	d0f4      	beq.n	8003458 <decodeLG+0xc>
		return false;
	if (!MATCH_SPACE(results->rawbuf[offset++], LG_HDR_SPACE))
 800346e:	68e3      	ldr	r3, [r4, #12]
 8003470:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8003474:	8898      	ldrh	r0, [r3, #4]
 8003476:	b280      	uxth	r0, r0
 8003478:	f7ff fd12 	bl	8002ea0 <MATCH_SPACE>
 800347c:	2800      	cmp	r0, #0
 800347e:	d0eb      	beq.n	8003458 <decodeLG+0xc>
 8003480:	2603      	movs	r6, #3
 8003482:	2500      	movs	r5, #0
		return false;

	for (int i = 0; i < LG_BITS; i++) {
		if (!MATCH_MARK(results->rawbuf[offset++], LG_BIT_MARK))
 8003484:	68e3      	ldr	r3, [r4, #12]
 8003486:	f44f 7116 	mov.w	r1, #600	; 0x258
 800348a:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 800348e:	0077      	lsls	r7, r6, #1
 8003490:	b280      	uxth	r0, r0
 8003492:	f7ff fcd1 	bl	8002e38 <MATCH_MARK>
 8003496:	2800      	cmp	r0, #0
 8003498:	d0de      	beq.n	8003458 <decodeLG+0xc>
			return false;

		if (MATCH_SPACE(results->rawbuf[offset], LG_ONE_SPACE))
 800349a:	68e3      	ldr	r3, [r4, #12]
 800349c:	3702      	adds	r7, #2
 800349e:	5bd8      	ldrh	r0, [r3, r7]
 80034a0:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80034a4:	b280      	uxth	r0, r0
 80034a6:	f7ff fcfb 	bl	8002ea0 <MATCH_SPACE>
 80034aa:	b1b0      	cbz	r0, 80034da <decodeLG+0x8e>
			data = (data << 1) | 1;
 80034ac:	006d      	lsls	r5, r5, #1
 80034ae:	f045 0501 	orr.w	r5, r5, #1
		else if (MATCH_SPACE(results->rawbuf[offset], LG_ZERO_SPACE))
			data = (data << 1) | 0;
		else
			return false;
		offset++;
 80034b2:	3602      	adds	r6, #2
	for (int i = 0; i < LG_BITS; i++) {
 80034b4:	2e3b      	cmp	r6, #59	; 0x3b
 80034b6:	d1e5      	bne.n	8003484 <decodeLG+0x38>
	}

	// Stop bit
	if (!MATCH_MARK(results->rawbuf[offset], LG_BIT_MARK))
 80034b8:	68e3      	ldr	r3, [r4, #12]
 80034ba:	f44f 7116 	mov.w	r1, #600	; 0x258
 80034be:	f8b3 0076 	ldrh.w	r0, [r3, #118]	; 0x76
 80034c2:	b280      	uxth	r0, r0
 80034c4:	f7ff fcb8 	bl	8002e38 <MATCH_MARK>
 80034c8:	2800      	cmp	r0, #0
 80034ca:	d0c5      	beq.n	8003458 <decodeLG+0xc>
		return false;

	// Success
	results->bits = LG_BITS;
 80034cc:	231c      	movs	r3, #28
 80034ce:	8123      	strh	r3, [r4, #8]
	results->value = data;
	results->decode_type = LG;
 80034d0:	230a      	movs	r3, #10
	results->value = data;
 80034d2:	6065      	str	r5, [r4, #4]
	results->decode_type = LG;
 80034d4:	7023      	strb	r3, [r4, #0]
	return true;
 80034d6:	2001      	movs	r0, #1
}
 80034d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		else if (MATCH_SPACE(results->rawbuf[offset], LG_ZERO_SPACE))
 80034da:	68e3      	ldr	r3, [r4, #12]
 80034dc:	f240 2126 	movw	r1, #550	; 0x226
 80034e0:	5bd8      	ldrh	r0, [r3, r7]
 80034e2:	b280      	uxth	r0, r0
 80034e4:	f7ff fcdc 	bl	8002ea0 <MATCH_SPACE>
 80034e8:	2800      	cmp	r0, #0
 80034ea:	d0b5      	beq.n	8003458 <decodeLG+0xc>
			data = (data << 1) | 0;
 80034ec:	006d      	lsls	r5, r5, #1
 80034ee:	e7e0      	b.n	80034b2 <decodeLG+0x66>
 80034f0:	20000530 	.word	0x20000530

080034f4 <decodeMitsubishi>:
// #define MITSUBISHI_RPT_LENGTH 45000

//+=============================================================================
#if DECODE_MITSUBISHI
uint8_t decodeMitsubishi (decode_results *results)
{
 80034f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  // Serial.print("?!? decoding Mitsubishi:");Serial.print(irparams.rawlen); Serial.print(" want "); Serial.println( 2 * MITSUBISHI_BITS + 2);
  long data = 0;
  if (irparams.rawlen < 2 * MITSUBISHI_BITS + 2)  return false ;
 80034f8:	4b28      	ldr	r3, [pc, #160]	; (800359c <decodeMitsubishi+0xa8>)
{
 80034fa:	4604      	mov	r4, r0
  if (irparams.rawlen < 2 * MITSUBISHI_BITS + 2)  return false ;
 80034fc:	785a      	ldrb	r2, [r3, #1]
 80034fe:	4699      	mov	r9, r3
 8003500:	2a21      	cmp	r2, #33	; 0x21
 8003502:	d802      	bhi.n	800350a <decodeMitsubishi+0x16>
 8003504:	2000      	movs	r0, #0
 8003506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

  // Typical
  // 14200 7 41 7 42 7 42 7 17 7 17 7 18 7 41 7 18 7 17 7 17 7 18 7 41 8 17 7 17 7 18 7 17 7

  // Initial Space
  if (!MATCH_MARK(results->rawbuf[offset], MITSUBISHI_HDR_SPACE))  return false ;
 800350a:	68c3      	ldr	r3, [r0, #12]
 800350c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003510:	8858      	ldrh	r0, [r3, #2]
 8003512:	b280      	uxth	r0, r0
 8003514:	f7ff fc90 	bl	8002e38 <MATCH_MARK>
 8003518:	2800      	cmp	r0, #0
 800351a:	d0f3      	beq.n	8003504 <decodeMitsubishi+0x10>
 800351c:	2702      	movs	r7, #2
 800351e:	2600      	movs	r6, #0
  offset++;

  while (offset + 1 < irparams.rawlen) {
 8003520:	f899 3001 	ldrb.w	r3, [r9, #1]
 8003524:	1c7d      	adds	r5, r7, #1
 8003526:	42ab      	cmp	r3, r5
 8003528:	dc0f      	bgt.n	800354a <decodeMitsubishi+0x56>
 800352a:	463d      	mov	r5, r7
    if (!MATCH_SPACE(results->rawbuf[offset], MITSUBISHI_HDR_SPACE))  break ;
    offset++;
  }

  // Success
  results->bits = (offset - 1) / 2;
 800352c:	3d01      	subs	r5, #1
 800352e:	f345 054f 	sbfx	r5, r5, #1, #16
  if (results->bits < MITSUBISHI_BITS) {
 8003532:	2d0f      	cmp	r5, #15
    results->bits = 0;
 8003534:	bfd4      	ite	le
 8003536:	2000      	movle	r0, #0
    return false;
  }

  results->value       = data;
  results->decode_type = MITSUBISHI;
 8003538:	230c      	movgt	r3, #12
  results->bits = (offset - 1) / 2;
 800353a:	8125      	strh	r5, [r4, #8]
  results->value       = data;
 800353c:	bfc9      	itett	gt
 800353e:	6066      	strgt	r6, [r4, #4]
    results->bits = 0;
 8003540:	8120      	strhle	r0, [r4, #8]
  results->decode_type = MITSUBISHI;
 8003542:	7023      	strbgt	r3, [r4, #0]
  return true;
 8003544:	2001      	movgt	r0, #1
}
 8003546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if      (MATCH_MARK(results->rawbuf[offset], MITSUBISHI_ONE_MARK))   data = (data << 1) | 1 ;
 800354a:	68e3      	ldr	r3, [r4, #12]
 800354c:	f240 719e 	movw	r1, #1950	; 0x79e
 8003550:	f833 0017 	ldrh.w	r0, [r3, r7, lsl #1]
 8003554:	ea4f 0847 	mov.w	r8, r7, lsl #1
 8003558:	b280      	uxth	r0, r0
 800355a:	f7ff fc6d 	bl	8002e38 <MATCH_MARK>
 800355e:	b180      	cbz	r0, 8003582 <decodeMitsubishi+0x8e>
 8003560:	0076      	lsls	r6, r6, #1
 8003562:	f046 0601 	orr.w	r6, r6, #1
    if (!MATCH_SPACE(results->rawbuf[offset], MITSUBISHI_HDR_SPACE))  break ;
 8003566:	68e3      	ldr	r3, [r4, #12]
 8003568:	f108 0802 	add.w	r8, r8, #2
 800356c:	f833 0008 	ldrh.w	r0, [r3, r8]
 8003570:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003574:	b280      	uxth	r0, r0
 8003576:	f7ff fc93 	bl	8002ea0 <MATCH_SPACE>
 800357a:	2800      	cmp	r0, #0
 800357c:	d0d6      	beq.n	800352c <decodeMitsubishi+0x38>
    offset++;
 800357e:	3702      	adds	r7, #2
 8003580:	e7ce      	b.n	8003520 <decodeMitsubishi+0x2c>
    else if (MATCH_MARK(results->rawbuf[offset], MITSUBISHI_ZERO_MARK))  data <<= 1 ;
 8003582:	68e3      	ldr	r3, [r4, #12]
 8003584:	f240 21ee 	movw	r1, #750	; 0x2ee
 8003588:	f833 0017 	ldrh.w	r0, [r3, r7, lsl #1]
 800358c:	b280      	uxth	r0, r0
 800358e:	f7ff fc53 	bl	8002e38 <MATCH_MARK>
 8003592:	2800      	cmp	r0, #0
 8003594:	d0b6      	beq.n	8003504 <decodeMitsubishi+0x10>
 8003596:	0076      	lsls	r6, r6, #1
 8003598:	e7e5      	b.n	8003566 <decodeMitsubishi+0x72>
 800359a:	bf00      	nop
 800359c:	20000530 	.word	0x20000530

080035a0 <decodeNEC>:
//+=============================================================================
// NECs have a repeat only 4 items long
//
#if DECODE_NEC
uint8_t decodeNEC (decode_results *results)
{
 80035a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	long  data   = 0;  // We decode in to here; Start with nothing
	int   offset = 1;  // Index in to results; Skip first entry!?

	// Check header "mark"
	if (!MATCH_MARK(results->rawbuf[offset], NEC_HDR_MARK))  return false ;
 80035a2:	68c3      	ldr	r3, [r0, #12]
{
 80035a4:	4604      	mov	r4, r0
	if (!MATCH_MARK(results->rawbuf[offset], NEC_HDR_MARK))  return false ;
 80035a6:	8858      	ldrh	r0, [r3, #2]
 80035a8:	f242 3128 	movw	r1, #9000	; 0x2328
 80035ac:	b280      	uxth	r0, r0
 80035ae:	f7ff fc43 	bl	8002e38 <MATCH_MARK>
 80035b2:	b908      	cbnz	r0, 80035b8 <decodeNEC+0x18>
 80035b4:	2000      	movs	r0, #0
 80035b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	offset++;

	// Check for repeat
	if ( (irparams.rawlen == 4)
 80035b8:	4d28      	ldr	r5, [pc, #160]	; (800365c <decodeNEC+0xbc>)
 80035ba:	786a      	ldrb	r2, [r5, #1]
 80035bc:	2a04      	cmp	r2, #4
 80035be:	d118      	bne.n	80035f2 <decodeNEC+0x52>
	    && MATCH_SPACE(results->rawbuf[offset  ], NEC_RPT_SPACE)
 80035c0:	68e3      	ldr	r3, [r4, #12]
 80035c2:	f640 01ca 	movw	r1, #2250	; 0x8ca
 80035c6:	8898      	ldrh	r0, [r3, #4]
 80035c8:	b280      	uxth	r0, r0
 80035ca:	f7ff fc69 	bl	8002ea0 <MATCH_SPACE>
 80035ce:	b180      	cbz	r0, 80035f2 <decodeNEC+0x52>
	    && MATCH_MARK (results->rawbuf[offset+1], NEC_BIT_MARK )
 80035d0:	68e3      	ldr	r3, [r4, #12]
 80035d2:	f44f 710c 	mov.w	r1, #560	; 0x230
 80035d6:	88d8      	ldrh	r0, [r3, #6]
 80035d8:	b280      	uxth	r0, r0
 80035da:	f7ff fc2d 	bl	8002e38 <MATCH_MARK>
 80035de:	b140      	cbz	r0, 80035f2 <decodeNEC+0x52>
	   ) {
		results->bits        = 0;
 80035e0:	2300      	movs	r3, #0
 80035e2:	8123      	strh	r3, [r4, #8]
		results->value       = REPEAT;
 80035e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035e8:	6063      	str	r3, [r4, #4]
	}

	// Success
	results->bits        = NEC_BITS;
	results->value       = data;
	results->decode_type = NEC;
 80035ea:	2303      	movs	r3, #3

	return true;
 80035ec:	2001      	movs	r0, #1
	results->decode_type = NEC;
 80035ee:	7023      	strb	r3, [r4, #0]
}
 80035f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (irparams.rawlen < (2 * NEC_BITS) + 4)  return false ;
 80035f2:	786b      	ldrb	r3, [r5, #1]
 80035f4:	2b43      	cmp	r3, #67	; 0x43
 80035f6:	d9dd      	bls.n	80035b4 <decodeNEC+0x14>
	if (!MATCH_SPACE(results->rawbuf[offset], NEC_HDR_SPACE))  return false ;
 80035f8:	68e3      	ldr	r3, [r4, #12]
 80035fa:	f241 1194 	movw	r1, #4500	; 0x1194
 80035fe:	8898      	ldrh	r0, [r3, #4]
 8003600:	b280      	uxth	r0, r0
 8003602:	f7ff fc4d 	bl	8002ea0 <MATCH_SPACE>
 8003606:	2800      	cmp	r0, #0
 8003608:	d0d4      	beq.n	80035b4 <decodeNEC+0x14>
 800360a:	2706      	movs	r7, #6
 800360c:	2500      	movs	r5, #0
		if (!MATCH_MARK(results->rawbuf[offset], NEC_BIT_MARK))  return false ;
 800360e:	68e3      	ldr	r3, [r4, #12]
 8003610:	f44f 710c 	mov.w	r1, #560	; 0x230
 8003614:	5bd8      	ldrh	r0, [r3, r7]
 8003616:	b280      	uxth	r0, r0
 8003618:	f7ff fc0e 	bl	8002e38 <MATCH_MARK>
 800361c:	2800      	cmp	r0, #0
 800361e:	d0c9      	beq.n	80035b4 <decodeNEC+0x14>
		if      (MATCH_SPACE(results->rawbuf[offset], NEC_ONE_SPACE ))  data = (data << 1) | 1 ;
 8003620:	68e3      	ldr	r3, [r4, #12]
 8003622:	1cbe      	adds	r6, r7, #2
 8003624:	5b98      	ldrh	r0, [r3, r6]
 8003626:	f240 619a 	movw	r1, #1690	; 0x69a
 800362a:	b280      	uxth	r0, r0
 800362c:	f7ff fc38 	bl	8002ea0 <MATCH_SPACE>
 8003630:	b148      	cbz	r0, 8003646 <decodeNEC+0xa6>
 8003632:	006d      	lsls	r5, r5, #1
 8003634:	f045 0501 	orr.w	r5, r5, #1
 8003638:	3704      	adds	r7, #4
	for (int i = 0;  i < NEC_BITS;  i++) {
 800363a:	2f86      	cmp	r7, #134	; 0x86
 800363c:	d1e7      	bne.n	800360e <decodeNEC+0x6e>
	results->bits        = NEC_BITS;
 800363e:	2320      	movs	r3, #32
	results->value       = data;
 8003640:	6065      	str	r5, [r4, #4]
	results->bits        = NEC_BITS;
 8003642:	8123      	strh	r3, [r4, #8]
 8003644:	e7d1      	b.n	80035ea <decodeNEC+0x4a>
		else if (MATCH_SPACE(results->rawbuf[offset], NEC_ZERO_SPACE))  data = (data << 1) | 0 ;
 8003646:	68e3      	ldr	r3, [r4, #12]
 8003648:	f44f 710c 	mov.w	r1, #560	; 0x230
 800364c:	5b98      	ldrh	r0, [r3, r6]
 800364e:	b280      	uxth	r0, r0
 8003650:	f7ff fc26 	bl	8002ea0 <MATCH_SPACE>
 8003654:	2800      	cmp	r0, #0
 8003656:	d0ad      	beq.n	80035b4 <decodeNEC+0x14>
 8003658:	006d      	lsls	r5, r5, #1
 800365a:	e7ed      	b.n	8003638 <decodeNEC+0x98>
 800365c:	20000530 	.word	0x20000530

08003660 <decodePanasonic>:
uint8_t decodePanasonic (decode_results *results)
{
    unsigned long long  data   = 0;
    int                 offset = 1;

    if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_HDR_MARK ))  return false ;
 8003660:	68c3      	ldr	r3, [r0, #12]
{
 8003662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003666:	4606      	mov	r6, r0
    if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_HDR_MARK ))  return false ;
 8003668:	8858      	ldrh	r0, [r3, #2]
 800366a:	f640 51ae 	movw	r1, #3502	; 0xdae
 800366e:	b280      	uxth	r0, r0
 8003670:	f7ff fbe2 	bl	8002e38 <MATCH_MARK>
 8003674:	b910      	cbnz	r0, 800367c <decodePanasonic+0x1c>
 8003676:	2000      	movs	r0, #0
 8003678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_HDR_SPACE))  return false ;
 800367c:	68f3      	ldr	r3, [r6, #12]
 800367e:	f240 61d6 	movw	r1, #1750	; 0x6d6
 8003682:	8898      	ldrh	r0, [r3, #4]
 8003684:	b280      	uxth	r0, r0
 8003686:	f7ff fbd7 	bl	8002e38 <MATCH_MARK>
 800368a:	2800      	cmp	r0, #0
 800368c:	d0f3      	beq.n	8003676 <decodePanasonic+0x16>
 800368e:	2706      	movs	r7, #6
 8003690:	2400      	movs	r4, #0
 8003692:	2500      	movs	r5, #0

    // decode address
    for (int i = 0;  i < PANASONIC_BITS;  i++) {
        if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_BIT_MARK))  return false ;
 8003694:	68f3      	ldr	r3, [r6, #12]
 8003696:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 800369a:	5bd8      	ldrh	r0, [r3, r7]
 800369c:	b280      	uxth	r0, r0
 800369e:	f7ff fbcb 	bl	8002e38 <MATCH_MARK>
 80036a2:	2800      	cmp	r0, #0
 80036a4:	d0e7      	beq.n	8003676 <decodePanasonic+0x16>

        if      (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ONE_SPACE ))  data = (data << 1) | 1 ;
 80036a6:	68f3      	ldr	r3, [r6, #12]
 80036a8:	f107 0802 	add.w	r8, r7, #2
 80036ac:	f833 0008 	ldrh.w	r0, [r3, r8]
 80036b0:	f240 41dc 	movw	r1, #1244	; 0x4dc
 80036b4:	b280      	uxth	r0, r0
 80036b6:	f7ff fbf3 	bl	8002ea0 <MATCH_SPACE>
 80036ba:	b178      	cbz	r0, 80036dc <decodePanasonic+0x7c>
 80036bc:	1924      	adds	r4, r4, r4
 80036be:	416d      	adcs	r5, r5
 80036c0:	f044 0401 	orr.w	r4, r4, #1
 80036c4:	3704      	adds	r7, #4
    for (int i = 0;  i < PANASONIC_BITS;  i++) {
 80036c6:	2fc6      	cmp	r7, #198	; 0xc6
 80036c8:	d1e4      	bne.n	8003694 <decodePanasonic+0x34>
        offset++;
    }

    results->value       = (unsigned long)data;
    results->address     = (unsigned int)(data >> 32);
    results->decode_type = PANASONIC;
 80036ca:	2305      	movs	r3, #5
 80036cc:	7033      	strb	r3, [r6, #0]
    results->bits        = PANASONIC_BITS;
 80036ce:	2330      	movs	r3, #48	; 0x30
    results->value       = (unsigned long)data;
 80036d0:	6074      	str	r4, [r6, #4]
    results->address     = (unsigned int)(data >> 32);
 80036d2:	8075      	strh	r5, [r6, #2]
    results->bits        = PANASONIC_BITS;
 80036d4:	8133      	strh	r3, [r6, #8]

    return true;
 80036d6:	2001      	movs	r0, #1
}
 80036d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        else if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ZERO_SPACE))  data = (data << 1) | 0 ;
 80036dc:	68f3      	ldr	r3, [r6, #12]
 80036de:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80036e2:	f833 0008 	ldrh.w	r0, [r3, r8]
 80036e6:	b280      	uxth	r0, r0
 80036e8:	f7ff fbda 	bl	8002ea0 <MATCH_SPACE>
 80036ec:	2800      	cmp	r0, #0
 80036ee:	d0c2      	beq.n	8003676 <decodePanasonic+0x16>
 80036f0:	1924      	adds	r4, r4, r4
 80036f2:	416d      	adcs	r5, r5
 80036f4:	e7e6      	b.n	80036c4 <decodePanasonic+0x64>

080036f6 <getRClevel>:
// offset and used are updated to keep track of the current position.
// t1 is the time interval for a single bit in microseconds.
// Returns -1 for error (measured time interval is not a multiple of t1).
//
#if (DECODE_RC5 || DECODE_RC6)
int getRClevel(decode_results *results, int *offset, int *used, int t1) {
 80036f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036fa:	4690      	mov	r8, r2
 80036fc:	4699      	mov	r9, r3
	int width;
	int val;
	int correction;
	int avail;

	if (*offset >= results->rawlen)
 80036fe:	680a      	ldr	r2, [r1, #0]
 8003700:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
int getRClevel(decode_results *results, int *offset, int *used, int t1) {
 8003704:	460f      	mov	r7, r1
	if (*offset >= results->rawlen)
 8003706:	429a      	cmp	r2, r3
 8003708:	da34      	bge.n	8003774 <getRClevel+0x7e>
		return SPACE;  // After end of recorded buffer, assume SPACE.
	width = results->rawbuf[*offset];
	val = ((*offset) % 2) ? MARK : SPACE;
	correction = (val == MARK) ? MARK_EXCESS : - MARK_EXCESS;
 800370a:	f012 0f01 	tst.w	r2, #1
 800370e:	bf0c      	ite	eq
 8003710:	f06f 0463 	mvneq.w	r4, #99	; 0x63
 8003714:	2464      	movne	r4, #100	; 0x64
	val = ((*offset) % 2) ? MARK : SPACE;
 8003716:	43d5      	mvns	r5, r2
	width = results->rawbuf[*offset];
 8003718:	68c3      	ldr	r3, [r0, #12]

	if (MATCH(width, (t1) + correction))
 800371a:	444c      	add	r4, r9
	width = results->rawbuf[*offset];
 800371c:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
	if (MATCH(width, (t1) + correction))
 8003720:	4621      	mov	r1, r4
	width = results->rawbuf[*offset];
 8003722:	b2b6      	uxth	r6, r6
	if (MATCH(width, (t1) + correction))
 8003724:	4630      	mov	r0, r6
	val = ((*offset) % 2) ? MARK : SPACE;
 8003726:	f005 0501 	and.w	r5, r5, #1
	if (MATCH(width, (t1) + correction))
 800372a:	f7ff fb53 	bl	8002dd4 <MATCH>
 800372e:	b9e8      	cbnz	r0, 800376c <getRClevel+0x76>
		avail = 1;
	else if (MATCH(width, (2 * t1) + correction))
 8003730:	444c      	add	r4, r9
 8003732:	4621      	mov	r1, r4
 8003734:	4630      	mov	r0, r6
 8003736:	f7ff fb4d 	bl	8002dd4 <MATCH>
 800373a:	b9c8      	cbnz	r0, 8003770 <getRClevel+0x7a>
		avail = 2;
	else if (MATCH(width, (3 * t1) + correction))
 800373c:	eb09 0104 	add.w	r1, r9, r4
 8003740:	4630      	mov	r0, r6
 8003742:	f7ff fb47 	bl	8002dd4 <MATCH>
 8003746:	b1b8      	cbz	r0, 8003778 <getRClevel+0x82>
		avail = 3;
 8003748:	2203      	movs	r2, #3
	else
		return -1;

	(*used)++;
 800374a:	f8d8 3000 	ldr.w	r3, [r8]
 800374e:	3301      	adds	r3, #1
	if (*used >= avail) {
 8003750:	429a      	cmp	r2, r3
		*used = 0;
 8003752:	bfdd      	ittte	le
 8003754:	2300      	movle	r3, #0
 8003756:	f8c8 3000 	strle.w	r3, [r8]
		(*offset)++;
 800375a:	683b      	ldrle	r3, [r7, #0]
	(*used)++;
 800375c:	f8c8 3000 	strgt.w	r3, [r8]
		(*offset)++;
 8003760:	bfdc      	itt	le
 8003762:	3301      	addle	r3, #1
 8003764:	603b      	strle	r3, [r7, #0]
	}

	//DBG_PRINTLN( (val == MARK) ? "MARK" : "SPACE" );

	return val;
}
 8003766:	4628      	mov	r0, r5
 8003768:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		avail = 1;
 800376c:	2201      	movs	r2, #1
 800376e:	e7ec      	b.n	800374a <getRClevel+0x54>
		avail = 2;
 8003770:	2202      	movs	r2, #2
 8003772:	e7ea      	b.n	800374a <getRClevel+0x54>
		return SPACE;  // After end of recorded buffer, assume SPACE.
 8003774:	2501      	movs	r5, #1
 8003776:	e7f6      	b.n	8003766 <getRClevel+0x70>
		return -1;
 8003778:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800377c:	e7f3      	b.n	8003766 <getRClevel+0x70>
	...

08003780 <decodeRC5>:
#if DECODE_RC5
uint8_t decodeRC5(decode_results *results) {
	int nbits;
	long data = 0;
	int used = 0;
	int offset = 1;  // Skip gap space
 8003780:	2200      	movs	r2, #0
 8003782:	2301      	movs	r3, #1
uint8_t decodeRC5(decode_results *results) {
 8003784:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	int offset = 1;  // Skip gap space
 8003788:	e88d 000c 	stmia.w	sp, {r2, r3}

	if (irparams.rawlen < MIN_RC5_SAMPLES + 2)
 800378c:	4b26      	ldr	r3, [pc, #152]	; (8003828 <decodeRC5+0xa8>)
uint8_t decodeRC5(decode_results *results) {
 800378e:	4604      	mov	r4, r0
	if (irparams.rawlen < MIN_RC5_SAMPLES + 2)
 8003790:	785a      	ldrb	r2, [r3, #1]
 8003792:	4698      	mov	r8, r3
 8003794:	2a0c      	cmp	r2, #12
 8003796:	d803      	bhi.n	80037a0 <decodeRC5+0x20>
		return false;
 8003798:	2000      	movs	r0, #0
	// Success
	results->bits = nbits;
	results->value = data;
	results->decode_type = RC5;
	return true;
}
 800379a:	b002      	add	sp, #8
 800379c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (getRClevel(results, &offset, &used, RC5_T1) != MARK)
 80037a0:	f240 3379 	movw	r3, #889	; 0x379
 80037a4:	466a      	mov	r2, sp
 80037a6:	a901      	add	r1, sp, #4
 80037a8:	f7ff ffa5 	bl	80036f6 <getRClevel>
 80037ac:	2800      	cmp	r0, #0
 80037ae:	d1f3      	bne.n	8003798 <decodeRC5+0x18>
	if (getRClevel(results, &offset, &used, RC5_T1) != SPACE)
 80037b0:	f240 3379 	movw	r3, #889	; 0x379
 80037b4:	466a      	mov	r2, sp
 80037b6:	a901      	add	r1, sp, #4
 80037b8:	4620      	mov	r0, r4
 80037ba:	f7ff ff9c 	bl	80036f6 <getRClevel>
 80037be:	2801      	cmp	r0, #1
 80037c0:	d1ea      	bne.n	8003798 <decodeRC5+0x18>
	if (getRClevel(results, &offset, &used, RC5_T1) != MARK)
 80037c2:	f240 3379 	movw	r3, #889	; 0x379
 80037c6:	466a      	mov	r2, sp
 80037c8:	a901      	add	r1, sp, #4
 80037ca:	4620      	mov	r0, r4
 80037cc:	f7ff ff93 	bl	80036f6 <getRClevel>
 80037d0:	4606      	mov	r6, r0
 80037d2:	2800      	cmp	r0, #0
 80037d4:	d1e0      	bne.n	8003798 <decodeRC5+0x18>
 80037d6:	4605      	mov	r5, r0
	for (nbits = 0; offset < irparams.rawlen; nbits++) {
 80037d8:	f898 2001 	ldrb.w	r2, [r8, #1]
 80037dc:	9b01      	ldr	r3, [sp, #4]
 80037de:	429a      	cmp	r2, r3
 80037e0:	dc04      	bgt.n	80037ec <decodeRC5+0x6c>
	results->decode_type = RC5;
 80037e2:	2001      	movs	r0, #1
	results->bits = nbits;
 80037e4:	8126      	strh	r6, [r4, #8]
	results->value = data;
 80037e6:	6065      	str	r5, [r4, #4]
	results->decode_type = RC5;
 80037e8:	7020      	strb	r0, [r4, #0]
	return true;
 80037ea:	e7d6      	b.n	800379a <decodeRC5+0x1a>
		int levelA = getRClevel(results, &offset, &used, RC5_T1);
 80037ec:	f240 3379 	movw	r3, #889	; 0x379
 80037f0:	466a      	mov	r2, sp
 80037f2:	a901      	add	r1, sp, #4
 80037f4:	4620      	mov	r0, r4
 80037f6:	f7ff ff7e 	bl	80036f6 <getRClevel>
 80037fa:	4607      	mov	r7, r0
		int levelB = getRClevel(results, &offset, &used, RC5_T1);
 80037fc:	f240 3379 	movw	r3, #889	; 0x379
 8003800:	466a      	mov	r2, sp
 8003802:	a901      	add	r1, sp, #4
 8003804:	4620      	mov	r0, r4
 8003806:	f7ff ff76 	bl	80036f6 <getRClevel>
		if ((levelA == SPACE) && (levelB == MARK))
 800380a:	2f01      	cmp	r7, #1
 800380c:	d106      	bne.n	800381c <decodeRC5+0x9c>
 800380e:	2800      	cmp	r0, #0
 8003810:	d1c2      	bne.n	8003798 <decodeRC5+0x18>
			data = (data << 1) | 1;
 8003812:	006d      	lsls	r5, r5, #1
 8003814:	f045 0501 	orr.w	r5, r5, #1
	for (nbits = 0; offset < irparams.rawlen; nbits++) {
 8003818:	3601      	adds	r6, #1
 800381a:	e7dd      	b.n	80037d8 <decodeRC5+0x58>
		else if ((levelA == MARK) && (levelB == SPACE))
 800381c:	2f00      	cmp	r7, #0
 800381e:	d1bb      	bne.n	8003798 <decodeRC5+0x18>
 8003820:	2801      	cmp	r0, #1
 8003822:	d1b9      	bne.n	8003798 <decodeRC5+0x18>
			data = (data << 1) | 0;
 8003824:	006d      	lsls	r5, r5, #1
 8003826:	e7f7      	b.n	8003818 <decodeRC5+0x98>
 8003828:	20000530 	.word	0x20000530

0800382c <decodeRC6>:
//+=============================================================================
#if DECODE_RC6
uint8_t decodeRC6(decode_results *results) {
	int nbits;
	long data = 0;
	int used = 0;
 800382c:	2300      	movs	r3, #0
uint8_t decodeRC6(decode_results *results) {
 800382e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	int used = 0;
 8003832:	9300      	str	r3, [sp, #0]
	int offset = 1;  // Skip first space

	if (results->rawlen < MIN_RC6_SAMPLES)
 8003834:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
uint8_t decodeRC6(decode_results *results) {
 8003838:	4604      	mov	r4, r0
	if (results->rawlen < MIN_RC6_SAMPLES)
 800383a:	2b00      	cmp	r3, #0
 800383c:	dc03      	bgt.n	8003846 <decodeRC6+0x1a>
		return false;
 800383e:	2000      	movs	r0, #0
	// Success
	results->bits = nbits;
	results->value = data;
	results->decode_type = RC6;
	return true;
}
 8003840:	b002      	add	sp, #8
 8003842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!MATCH_MARK(results->rawbuf[offset++], RC6_HDR_MARK))
 8003846:	2202      	movs	r2, #2
 8003848:	68c3      	ldr	r3, [r0, #12]
 800384a:	f640 216a 	movw	r1, #2666	; 0xa6a
 800384e:	8858      	ldrh	r0, [r3, #2]
 8003850:	9201      	str	r2, [sp, #4]
 8003852:	b280      	uxth	r0, r0
 8003854:	f7ff faf0 	bl	8002e38 <MATCH_MARK>
 8003858:	2800      	cmp	r0, #0
 800385a:	d0f0      	beq.n	800383e <decodeRC6+0x12>
	if (!MATCH_SPACE(results->rawbuf[offset++], RC6_HDR_SPACE))
 800385c:	9b01      	ldr	r3, [sp, #4]
 800385e:	68e2      	ldr	r2, [r4, #12]
 8003860:	1c59      	adds	r1, r3, #1
 8003862:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8003866:	9101      	str	r1, [sp, #4]
 8003868:	b280      	uxth	r0, r0
 800386a:	f240 3179 	movw	r1, #889	; 0x379
 800386e:	f7ff fb17 	bl	8002ea0 <MATCH_SPACE>
 8003872:	2800      	cmp	r0, #0
 8003874:	d0e3      	beq.n	800383e <decodeRC6+0x12>
	if (getRClevel(results, &offset, &used, RC6_T1) != MARK)
 8003876:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 800387a:	466a      	mov	r2, sp
 800387c:	a901      	add	r1, sp, #4
 800387e:	4620      	mov	r0, r4
 8003880:	f7ff ff39 	bl	80036f6 <getRClevel>
 8003884:	4606      	mov	r6, r0
 8003886:	2800      	cmp	r0, #0
 8003888:	d1d9      	bne.n	800383e <decodeRC6+0x12>
	if (getRClevel(results, &offset, &used, RC6_T1) != SPACE)
 800388a:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 800388e:	466a      	mov	r2, sp
 8003890:	a901      	add	r1, sp, #4
 8003892:	4620      	mov	r0, r4
 8003894:	f7ff ff2f 	bl	80036f6 <getRClevel>
 8003898:	2801      	cmp	r0, #1
 800389a:	d1d0      	bne.n	800383e <decodeRC6+0x12>
 800389c:	4635      	mov	r5, r6
	for (nbits = 0; offset < results->rawlen; nbits++) {
 800389e:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 80038a2:	9b01      	ldr	r3, [sp, #4]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	dc05      	bgt.n	80038b4 <decodeRC6+0x88>
	results->decode_type = RC6;
 80038a8:	2302      	movs	r3, #2
	results->bits = nbits;
 80038aa:	8126      	strh	r6, [r4, #8]
	results->value = data;
 80038ac:	6065      	str	r5, [r4, #4]
	results->decode_type = RC6;
 80038ae:	7023      	strb	r3, [r4, #0]
	return true;
 80038b0:	2001      	movs	r0, #1
 80038b2:	e7c5      	b.n	8003840 <decodeRC6+0x14>
		levelA = getRClevel(results, &offset, &used, RC6_T1);
 80038b4:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 80038b8:	466a      	mov	r2, sp
 80038ba:	a901      	add	r1, sp, #4
 80038bc:	4620      	mov	r0, r4
 80038be:	f7ff ff1a 	bl	80036f6 <getRClevel>
		if (nbits == 3) {
 80038c2:	2e03      	cmp	r6, #3
		levelA = getRClevel(results, &offset, &used, RC6_T1);
 80038c4:	4680      	mov	r8, r0
		if (nbits == 3) {
 80038c6:	d01c      	beq.n	8003902 <decodeRC6+0xd6>
		levelB = getRClevel(results, &offset, &used, RC6_T1);
 80038c8:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 80038cc:	466a      	mov	r2, sp
 80038ce:	a901      	add	r1, sp, #4
 80038d0:	4620      	mov	r0, r4
 80038d2:	f7ff ff10 	bl	80036f6 <getRClevel>
		if (nbits == 3) {
 80038d6:	2e03      	cmp	r6, #3
		levelB = getRClevel(results, &offset, &used, RC6_T1);
 80038d8:	4607      	mov	r7, r0
		if (nbits == 3) {
 80038da:	d108      	bne.n	80038ee <decodeRC6+0xc2>
			if (levelB != getRClevel(results, &offset, &used, RC6_T1))
 80038dc:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 80038e0:	466a      	mov	r2, sp
 80038e2:	a901      	add	r1, sp, #4
 80038e4:	4620      	mov	r0, r4
 80038e6:	f7ff ff06 	bl	80036f6 <getRClevel>
 80038ea:	4287      	cmp	r7, r0
 80038ec:	d1a7      	bne.n	800383e <decodeRC6+0x12>
		if ((levelA == MARK) && (levelB == SPACE))
 80038ee:	f1b8 0f00 	cmp.w	r8, #0
 80038f2:	d010      	beq.n	8003916 <decodeRC6+0xea>
		else if ((levelA == SPACE) && (levelB == MARK))
 80038f4:	f1b8 0f01 	cmp.w	r8, #1
 80038f8:	d1a1      	bne.n	800383e <decodeRC6+0x12>
 80038fa:	2f00      	cmp	r7, #0
 80038fc:	d19f      	bne.n	800383e <decodeRC6+0x12>
			data = (data << 1) | 0;  // ...
 80038fe:	006d      	lsls	r5, r5, #1
 8003900:	e00e      	b.n	8003920 <decodeRC6+0xf4>
			if (levelA != getRClevel(results, &offset, &used, RC6_T1))
 8003902:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8003906:	466a      	mov	r2, sp
 8003908:	a901      	add	r1, sp, #4
 800390a:	4620      	mov	r0, r4
 800390c:	f7ff fef3 	bl	80036f6 <getRClevel>
 8003910:	4580      	cmp	r8, r0
 8003912:	d0d9      	beq.n	80038c8 <decodeRC6+0x9c>
 8003914:	e793      	b.n	800383e <decodeRC6+0x12>
		if ((levelA == MARK) && (levelB == SPACE))
 8003916:	2f01      	cmp	r7, #1
 8003918:	d191      	bne.n	800383e <decodeRC6+0x12>
			data = (data << 1) | 1;  // inverted compared to RC5
 800391a:	006d      	lsls	r5, r5, #1
 800391c:	f045 0501 	orr.w	r5, r5, #1
	for (nbits = 0; offset < results->rawlen; nbits++) {
 8003920:	3601      	adds	r6, #1
 8003922:	e7bc      	b.n	800389e <decodeRC6+0x72>

08003924 <sendSAMSUNG>:
#define SAMSUNG_RPT_SPACE   2250

//+=============================================================================
#if SEND_SAMSUNG
void sendSAMSUNG(unsigned long data,  int nbits)
{
 8003924:	b538      	push	{r3, r4, r5, lr}
 8003926:	460c      	mov	r4, r1
 8003928:	4605      	mov	r5, r0
	// Set IR carrier frequency
	enableIROut(38);
 800392a:	2026      	movs	r0, #38	; 0x26
 800392c:	f7ff fbf6 	bl	800311c <enableIROut>

	// Header
	mark(SAMSUNG_HDR_MARK);
 8003930:	f241 1094 	movw	r0, #4500	; 0x1194
 8003934:	f7ff fc54 	bl	80031e0 <mark>
	space(SAMSUNG_HDR_SPACE);
 8003938:	f241 1094 	movw	r0, #4500	; 0x1194
 800393c:	f7ff fc60 	bl	8003200 <space>

	// Data
	for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1)
 8003940:	1e61      	subs	r1, r4, #1
 8003942:	2401      	movs	r4, #1
 8003944:	408c      	lsls	r4, r1
	{
		if (data & mask)
		{
			mark(SAMSUNG_BIT_MARK);
 8003946:	f44f 700c 	mov.w	r0, #560	; 0x230
	for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1)
 800394a:	b934      	cbnz	r4, 800395a <sendSAMSUNG+0x36>
			space(SAMSUNG_ZERO_SPACE);
		}
	}

	// Footer
	mark(SAMSUNG_BIT_MARK);
 800394c:	f7ff fc48 	bl	80031e0 <mark>
    space(0);  // Always end with the LED off
 8003950:	4620      	mov	r0, r4
}
 8003952:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    space(0);  // Always end with the LED off
 8003956:	f7ff bc53 	b.w	8003200 <space>
		if (data & mask)
 800395a:	422c      	tst	r4, r5
 800395c:	d007      	beq.n	800396e <sendSAMSUNG+0x4a>
			mark(SAMSUNG_BIT_MARK);
 800395e:	f7ff fc3f 	bl	80031e0 <mark>
			space(SAMSUNG_ONE_SPACE);
 8003962:	f44f 60c8 	mov.w	r0, #1600	; 0x640
			space(SAMSUNG_ZERO_SPACE);
 8003966:	f7ff fc4b 	bl	8003200 <space>
	for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1)
 800396a:	0864      	lsrs	r4, r4, #1
 800396c:	e7eb      	b.n	8003946 <sendSAMSUNG+0x22>
			mark(SAMSUNG_BIT_MARK);
 800396e:	f7ff fc37 	bl	80031e0 <mark>
			space(SAMSUNG_ZERO_SPACE);
 8003972:	f44f 700c 	mov.w	r0, #560	; 0x230
 8003976:	e7f6      	b.n	8003966 <sendSAMSUNG+0x42>

08003978 <decodeSAMSUNG>:
//+=============================================================================
// SAMSUNGs have a repeat only 4 items long
//
#if DECODE_SAMSUNG
uint8_t decodeSAMSUNG (decode_results *results)
{
 8003978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	long  data   = 0;
	int   offset = 1;  // Skip first space

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset], SAMSUNG_HDR_MARK))   return false ;
 800397a:	68c3      	ldr	r3, [r0, #12]
{
 800397c:	4604      	mov	r4, r0
	if (!MATCH_MARK(results->rawbuf[offset], SAMSUNG_HDR_MARK))   return false ;
 800397e:	8858      	ldrh	r0, [r3, #2]
 8003980:	f241 1194 	movw	r1, #4500	; 0x1194
 8003984:	b280      	uxth	r0, r0
 8003986:	f7ff fa57 	bl	8002e38 <MATCH_MARK>
 800398a:	b908      	cbnz	r0, 8003990 <decodeSAMSUNG+0x18>
 800398c:	2000      	movs	r0, #0
 800398e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	offset++;

	// Check for repeat
	if (    (irparams.rawlen == 4)
 8003990:	4d28      	ldr	r5, [pc, #160]	; (8003a34 <decodeSAMSUNG+0xbc>)
 8003992:	786a      	ldrb	r2, [r5, #1]
 8003994:	2a04      	cmp	r2, #4
 8003996:	d118      	bne.n	80039ca <decodeSAMSUNG+0x52>
	     && MATCH_SPACE(results->rawbuf[offset], SAMSUNG_RPT_SPACE)
 8003998:	68e3      	ldr	r3, [r4, #12]
 800399a:	f640 01ca 	movw	r1, #2250	; 0x8ca
 800399e:	8898      	ldrh	r0, [r3, #4]
 80039a0:	b280      	uxth	r0, r0
 80039a2:	f7ff fa7d 	bl	8002ea0 <MATCH_SPACE>
 80039a6:	b180      	cbz	r0, 80039ca <decodeSAMSUNG+0x52>
	     && MATCH_MARK(results->rawbuf[offset+1], SAMSUNG_BIT_MARK)
 80039a8:	68e3      	ldr	r3, [r4, #12]
 80039aa:	f44f 710c 	mov.w	r1, #560	; 0x230
 80039ae:	88d8      	ldrh	r0, [r3, #6]
 80039b0:	b280      	uxth	r0, r0
 80039b2:	f7ff fa41 	bl	8002e38 <MATCH_MARK>
 80039b6:	b140      	cbz	r0, 80039ca <decodeSAMSUNG+0x52>
	   ) {
		results->bits        = 0;
 80039b8:	2300      	movs	r3, #0
 80039ba:	8123      	strh	r3, [r4, #8]
		results->value       = REPEAT;
 80039bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039c0:	6063      	str	r3, [r4, #4]
	}

	// Success
	results->bits        = SAMSUNG_BITS;
	results->value       = data;
	results->decode_type = SAMSUNG;
 80039c2:	2307      	movs	r3, #7
	return true;
 80039c4:	2001      	movs	r0, #1
	results->decode_type = SAMSUNG;
 80039c6:	7023      	strb	r3, [r4, #0]
}
 80039c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (irparams.rawlen < (2 * SAMSUNG_BITS) + 4)  return false ;
 80039ca:	786b      	ldrb	r3, [r5, #1]
 80039cc:	2b43      	cmp	r3, #67	; 0x43
 80039ce:	d9dd      	bls.n	800398c <decodeSAMSUNG+0x14>
	if (!MATCH_SPACE(results->rawbuf[offset++], SAMSUNG_HDR_SPACE))  return false ;
 80039d0:	68e3      	ldr	r3, [r4, #12]
 80039d2:	f241 1194 	movw	r1, #4500	; 0x1194
 80039d6:	8898      	ldrh	r0, [r3, #4]
 80039d8:	b280      	uxth	r0, r0
 80039da:	f7ff fa61 	bl	8002ea0 <MATCH_SPACE>
 80039de:	2800      	cmp	r0, #0
 80039e0:	d0d4      	beq.n	800398c <decodeSAMSUNG+0x14>
 80039e2:	2706      	movs	r7, #6
 80039e4:	2500      	movs	r5, #0
		if (!MATCH_MARK(results->rawbuf[offset++], SAMSUNG_BIT_MARK))  return false ;
 80039e6:	68e3      	ldr	r3, [r4, #12]
 80039e8:	f44f 710c 	mov.w	r1, #560	; 0x230
 80039ec:	5bd8      	ldrh	r0, [r3, r7]
 80039ee:	b280      	uxth	r0, r0
 80039f0:	f7ff fa22 	bl	8002e38 <MATCH_MARK>
 80039f4:	2800      	cmp	r0, #0
 80039f6:	d0c9      	beq.n	800398c <decodeSAMSUNG+0x14>
		if      (MATCH_SPACE(results->rawbuf[offset], SAMSUNG_ONE_SPACE))   data = (data << 1) | 1 ;
 80039f8:	68e3      	ldr	r3, [r4, #12]
 80039fa:	1cbe      	adds	r6, r7, #2
 80039fc:	5b98      	ldrh	r0, [r3, r6]
 80039fe:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8003a02:	b280      	uxth	r0, r0
 8003a04:	f7ff fa4c 	bl	8002ea0 <MATCH_SPACE>
 8003a08:	b148      	cbz	r0, 8003a1e <decodeSAMSUNG+0xa6>
 8003a0a:	006d      	lsls	r5, r5, #1
 8003a0c:	f045 0501 	orr.w	r5, r5, #1
 8003a10:	3704      	adds	r7, #4
	for (int i = 0;  i < SAMSUNG_BITS;   i++) {
 8003a12:	2f86      	cmp	r7, #134	; 0x86
 8003a14:	d1e7      	bne.n	80039e6 <decodeSAMSUNG+0x6e>
	results->bits        = SAMSUNG_BITS;
 8003a16:	2320      	movs	r3, #32
	results->value       = data;
 8003a18:	6065      	str	r5, [r4, #4]
	results->bits        = SAMSUNG_BITS;
 8003a1a:	8123      	strh	r3, [r4, #8]
 8003a1c:	e7d1      	b.n	80039c2 <decodeSAMSUNG+0x4a>
		else if (MATCH_SPACE(results->rawbuf[offset], SAMSUNG_ZERO_SPACE))  data = (data << 1) | 0 ;
 8003a1e:	68e3      	ldr	r3, [r4, #12]
 8003a20:	f44f 710c 	mov.w	r1, #560	; 0x230
 8003a24:	5b98      	ldrh	r0, [r3, r6]
 8003a26:	b280      	uxth	r0, r0
 8003a28:	f7ff fa3a 	bl	8002ea0 <MATCH_SPACE>
 8003a2c:	2800      	cmp	r0, #0
 8003a2e:	d0ad      	beq.n	800398c <decodeSAMSUNG+0x14>
 8003a30:	006d      	lsls	r5, r5, #1
 8003a32:	e7ed      	b.n	8003a10 <decodeSAMSUNG+0x98>
 8003a34:	20000530 	.word	0x20000530

08003a38 <decodeSanyo>:
#define SANYO_DOUBLE_SPACE_USECS    800  // usually ssee 713 - not using ticks as get number wrapround
#define SANYO_RPT_LENGTH          45000

//+=============================================================================
#if DECODE_SANYO
uint8_t decodeSanyo(decode_results *results) {
 8003a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	long data = 0;
	int offset = 0;  // Skip first space  <-- CHECK THIS!

	if (irparams.rawlen < (2 * SANYO_BITS) + 2)
 8003a3c:	4b32      	ldr	r3, [pc, #200]	; (8003b08 <decodeSanyo+0xd0>)
uint8_t decodeSanyo(decode_results *results) {
 8003a3e:	4604      	mov	r4, r0
	if (irparams.rawlen < (2 * SANYO_BITS) + 2)
 8003a40:	785a      	ldrb	r2, [r3, #1]
 8003a42:	4698      	mov	r8, r3
 8003a44:	2a19      	cmp	r2, #25
 8003a46:	d802      	bhi.n	8003a4e <decodeSanyo+0x16>
		return false;
 8003a48:	2000      	movs	r0, #0
 8003a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	Serial.println( "test against:");
	Serial.println(results->rawbuf[offset]);
#endif

	// Initial space
	if (results->rawbuf[offset] < SANYO_DOUBLE_SPACE_USECS) {
 8003a4e:	68c2      	ldr	r2, [r0, #12]
 8003a50:	8813      	ldrh	r3, [r2, #0]
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003a58:	d209      	bcs.n	8003a6e <decodeSanyo+0x36>
		//Serial.print("IR Gap found: ");
		results->bits = 0;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	8103      	strh	r3, [r0, #8]
		results->value = REPEAT;
 8003a5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a62:	6043      	str	r3, [r0, #4]
		results->bits = 0;
		return false;
	}

	results->value = data;
	results->decode_type = SANYO;
 8003a64:	230b      	movs	r3, #11
	return true;
 8003a66:	2001      	movs	r0, #1
	results->decode_type = SANYO;
 8003a68:	7023      	strb	r3, [r4, #0]
}
 8003a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!MATCH_MARK(results->rawbuf[offset++], SANYO_HDR_MARK))
 8003a6e:	8850      	ldrh	r0, [r2, #2]
 8003a70:	f640 51ac 	movw	r1, #3500	; 0xdac
 8003a74:	b280      	uxth	r0, r0
 8003a76:	f7ff f9df 	bl	8002e38 <MATCH_MARK>
 8003a7a:	2800      	cmp	r0, #0
 8003a7c:	d0e4      	beq.n	8003a48 <decodeSanyo+0x10>
	if (!MATCH_MARK(results->rawbuf[offset++], SANYO_HDR_MARK))
 8003a7e:	68e3      	ldr	r3, [r4, #12]
 8003a80:	f640 51ac 	movw	r1, #3500	; 0xdac
 8003a84:	8898      	ldrh	r0, [r3, #4]
 8003a86:	b280      	uxth	r0, r0
 8003a88:	f7ff f9d6 	bl	8002e38 <MATCH_MARK>
 8003a8c:	2800      	cmp	r0, #0
 8003a8e:	d0db      	beq.n	8003a48 <decodeSanyo+0x10>
 8003a90:	2703      	movs	r7, #3
 8003a92:	2600      	movs	r6, #0
	while (offset + 1 < irparams.rawlen) {
 8003a94:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003a98:	1c7d      	adds	r5, r7, #1
 8003a9a:	42ab      	cmp	r3, r5
 8003a9c:	dc0a      	bgt.n	8003ab4 <decodeSanyo+0x7c>
 8003a9e:	463d      	mov	r5, r7
	results->bits = (offset - 1) / 2;
 8003aa0:	3d01      	subs	r5, #1
 8003aa2:	f345 054f 	sbfx	r5, r5, #1, #16
	if (results->bits < 12) {
 8003aa6:	2d0b      	cmp	r5, #11
	results->bits = (offset - 1) / 2;
 8003aa8:	8125      	strh	r5, [r4, #8]
	if (results->bits < 12) {
 8003aaa:	dc2b      	bgt.n	8003b04 <decodeSanyo+0xcc>
		results->bits = 0;
 8003aac:	2000      	movs	r0, #0
 8003aae:	8120      	strh	r0, [r4, #8]
		return false;
 8003ab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!MATCH_SPACE(results->rawbuf[offset++], SANYO_HDR_SPACE))
 8003ab4:	68e3      	ldr	r3, [r4, #12]
 8003ab6:	f240 31b6 	movw	r1, #950	; 0x3b6
 8003aba:	f833 0017 	ldrh.w	r0, [r3, r7, lsl #1]
 8003abe:	ea4f 0947 	mov.w	r9, r7, lsl #1
 8003ac2:	b280      	uxth	r0, r0
 8003ac4:	f7ff f9ec 	bl	8002ea0 <MATCH_SPACE>
 8003ac8:	2800      	cmp	r0, #0
 8003aca:	d0e9      	beq.n	8003aa0 <decodeSanyo+0x68>
		if (MATCH_MARK(results->rawbuf[offset], SANYO_ONE_MARK))
 8003acc:	68e3      	ldr	r3, [r4, #12]
 8003ace:	f109 0902 	add.w	r9, r9, #2
 8003ad2:	f833 0009 	ldrh.w	r0, [r3, r9]
 8003ad6:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8003ada:	b280      	uxth	r0, r0
 8003adc:	f7ff f9ac 	bl	8002e38 <MATCH_MARK>
 8003ae0:	b120      	cbz	r0, 8003aec <decodeSanyo+0xb4>
			data = (data << 1) | 1;
 8003ae2:	0076      	lsls	r6, r6, #1
 8003ae4:	f046 0601 	orr.w	r6, r6, #1
		offset++;
 8003ae8:	3702      	adds	r7, #2
 8003aea:	e7d3      	b.n	8003a94 <decodeSanyo+0x5c>
		else if (MATCH_MARK(results->rawbuf[offset], SANYO_ZERO_MARK))
 8003aec:	68e3      	ldr	r3, [r4, #12]
 8003aee:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8003af2:	f833 0009 	ldrh.w	r0, [r3, r9]
 8003af6:	b280      	uxth	r0, r0
 8003af8:	f7ff f99e 	bl	8002e38 <MATCH_MARK>
 8003afc:	2800      	cmp	r0, #0
 8003afe:	d0a3      	beq.n	8003a48 <decodeSanyo+0x10>
			data = (data << 1) | 0;
 8003b00:	0076      	lsls	r6, r6, #1
 8003b02:	e7f1      	b.n	8003ae8 <decodeSanyo+0xb0>
	results->value = data;
 8003b04:	6066      	str	r6, [r4, #4]
 8003b06:	e7ad      	b.n	8003a64 <decodeSanyo+0x2c>
 8003b08:	20000530 	.word	0x20000530

08003b0c <decodeSony>:
#endif

//+=============================================================================
#if DECODE_SONY
uint8_t decodeSony (decode_results *results)
{
 8003b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	long  data   = 0;
	int   offset = 0;  // Dont skip first space, check its size

	if (irparams.rawlen < (2 * SONY_BITS) + 2)  return false ;
 8003b10:	4b2e      	ldr	r3, [pc, #184]	; (8003bcc <decodeSony+0xc0>)
{
 8003b12:	4604      	mov	r4, r0
	if (irparams.rawlen < (2 * SONY_BITS) + 2)  return false ;
 8003b14:	785a      	ldrb	r2, [r3, #1]
 8003b16:	4698      	mov	r8, r3
 8003b18:	2a19      	cmp	r2, #25
 8003b1a:	d802      	bhi.n	8003b22 <decodeSony+0x16>
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	// Some Sony's deliver repeats fast after first
	// unfortunately can't spot difference from of repeat from two fast clicks
	if (results->rawbuf[offset] < SONY_DOUBLE_SPACE_USECS) {
 8003b22:	68c2      	ldr	r2, [r0, #12]
 8003b24:	8813      	ldrh	r3, [r2, #0]
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003b2c:	d209      	bcs.n	8003b42 <decodeSony+0x36>
		// Serial.print("IR Gap found: ");
		results->bits = 0;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	8103      	strh	r3, [r0, #8]
		results->value = REPEAT;
 8003b32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b36:	6043      	str	r3, [r0, #4]

#	ifdef DECODE_SANYO
		results->decode_type = SANYO;
 8003b38:	230b      	movs	r3, #11
	if (results->bits < 12) {
		results->bits = 0;
		return false;
	}
	results->value       = data;
	results->decode_type = SONY;
 8003b3a:	7023      	strb	r3, [r4, #0]
	return true;
 8003b3c:	2001      	movs	r0, #1
}
 8003b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!MATCH_MARK(results->rawbuf[offset++], SONY_HDR_MARK))  return false ;
 8003b42:	8850      	ldrh	r0, [r2, #2]
 8003b44:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8003b48:	b280      	uxth	r0, r0
 8003b4a:	f7ff f975 	bl	8002e38 <MATCH_MARK>
 8003b4e:	2800      	cmp	r0, #0
 8003b50:	d0e4      	beq.n	8003b1c <decodeSony+0x10>
 8003b52:	2702      	movs	r7, #2
 8003b54:	2600      	movs	r6, #0
	while (offset + 1 < irparams.rawlen) {
 8003b56:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003b5a:	1c7d      	adds	r5, r7, #1
 8003b5c:	42ab      	cmp	r3, r5
 8003b5e:	dc0a      	bgt.n	8003b76 <decodeSony+0x6a>
 8003b60:	463d      	mov	r5, r7
	results->bits = (offset - 1) / 2;
 8003b62:	3d01      	subs	r5, #1
 8003b64:	f345 054f 	sbfx	r5, r5, #1, #16
	if (results->bits < 12) {
 8003b68:	2d0b      	cmp	r5, #11
	results->bits = (offset - 1) / 2;
 8003b6a:	8125      	strh	r5, [r4, #8]
	if (results->bits < 12) {
 8003b6c:	dc2b      	bgt.n	8003bc6 <decodeSony+0xba>
		results->bits = 0;
 8003b6e:	2000      	movs	r0, #0
 8003b70:	8120      	strh	r0, [r4, #8]
		return false;
 8003b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!MATCH_SPACE(results->rawbuf[offset++], SONY_HDR_SPACE))  break ;
 8003b76:	68e3      	ldr	r3, [r4, #12]
 8003b78:	f44f 7116 	mov.w	r1, #600	; 0x258
 8003b7c:	f833 0017 	ldrh.w	r0, [r3, r7, lsl #1]
 8003b80:	ea4f 0947 	mov.w	r9, r7, lsl #1
 8003b84:	b280      	uxth	r0, r0
 8003b86:	f7ff f98b 	bl	8002ea0 <MATCH_SPACE>
 8003b8a:	2800      	cmp	r0, #0
 8003b8c:	d0e9      	beq.n	8003b62 <decodeSony+0x56>
		if      (MATCH_MARK(results->rawbuf[offset], SONY_ONE_MARK))   data = (data << 1) | 1 ;
 8003b8e:	68e3      	ldr	r3, [r4, #12]
 8003b90:	f109 0902 	add.w	r9, r9, #2
 8003b94:	f833 0009 	ldrh.w	r0, [r3, r9]
 8003b98:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8003b9c:	b280      	uxth	r0, r0
 8003b9e:	f7ff f94b 	bl	8002e38 <MATCH_MARK>
 8003ba2:	b120      	cbz	r0, 8003bae <decodeSony+0xa2>
 8003ba4:	0076      	lsls	r6, r6, #1
 8003ba6:	f046 0601 	orr.w	r6, r6, #1
		offset++;
 8003baa:	3702      	adds	r7, #2
 8003bac:	e7d3      	b.n	8003b56 <decodeSony+0x4a>
		else if (MATCH_MARK(results->rawbuf[offset], SONY_ZERO_MARK))  data = (data << 1) | 0 ;
 8003bae:	68e3      	ldr	r3, [r4, #12]
 8003bb0:	f44f 7116 	mov.w	r1, #600	; 0x258
 8003bb4:	f833 0009 	ldrh.w	r0, [r3, r9]
 8003bb8:	b280      	uxth	r0, r0
 8003bba:	f7ff f93d 	bl	8002e38 <MATCH_MARK>
 8003bbe:	2800      	cmp	r0, #0
 8003bc0:	d0ac      	beq.n	8003b1c <decodeSony+0x10>
 8003bc2:	0076      	lsls	r6, r6, #1
 8003bc4:	e7f1      	b.n	8003baa <decodeSony+0x9e>
	results->value       = data;
 8003bc6:	6066      	str	r6, [r4, #4]
	results->decode_type = SONY;
 8003bc8:	2304      	movs	r3, #4
 8003bca:	e7b6      	b.n	8003b3a <decodeSony+0x2e>
 8003bcc:	20000530 	.word	0x20000530

08003bd0 <decodeWhynter>:
}
#endif

//+=============================================================================
#if DECODE_WHYNTER
uint8_t decodeWhynter(decode_results *results) {
 8003bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	long data = 0;
	int offset = 1;  // skip initial space

	// Check we have the right amount of data
	if (irparams.rawlen < (2 * WHYNTER_BITS) + 6)
 8003bd2:	4b31      	ldr	r3, [pc, #196]	; (8003c98 <decodeWhynter+0xc8>)
uint8_t decodeWhynter(decode_results *results) {
 8003bd4:	4604      	mov	r4, r0
	if (irparams.rawlen < (2 * WHYNTER_BITS) + 6)
 8003bd6:	785b      	ldrb	r3, [r3, #1]
 8003bd8:	2b45      	cmp	r3, #69	; 0x45
 8003bda:	d801      	bhi.n	8003be0 <decodeWhynter+0x10>
		return false;
 8003bdc:	2000      	movs	r0, #0
 8003bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	// Sequence begins with a bit mark and a zero space
	if (!MATCH_MARK(results->rawbuf[offset++], WHYNTER_BIT_MARK))
 8003be0:	68c3      	ldr	r3, [r0, #12]
 8003be2:	f240 21ee 	movw	r1, #750	; 0x2ee
 8003be6:	8858      	ldrh	r0, [r3, #2]
 8003be8:	b280      	uxth	r0, r0
 8003bea:	f7ff f925 	bl	8002e38 <MATCH_MARK>
 8003bee:	2800      	cmp	r0, #0
 8003bf0:	d0f4      	beq.n	8003bdc <decodeWhynter+0xc>
		return false;
	if (!MATCH_SPACE(results->rawbuf[offset++], WHYNTER_ZERO_SPACE))
 8003bf2:	68e3      	ldr	r3, [r4, #12]
 8003bf4:	f240 21ee 	movw	r1, #750	; 0x2ee
 8003bf8:	8898      	ldrh	r0, [r3, #4]
 8003bfa:	b280      	uxth	r0, r0
 8003bfc:	f7ff f950 	bl	8002ea0 <MATCH_SPACE>
 8003c00:	2800      	cmp	r0, #0
 8003c02:	d0eb      	beq.n	8003bdc <decodeWhynter+0xc>
		return false;

	// header mark and space
	if (!MATCH_MARK(results->rawbuf[offset++], WHYNTER_HDR_MARK))
 8003c04:	68e3      	ldr	r3, [r4, #12]
 8003c06:	f640 3122 	movw	r1, #2850	; 0xb22
 8003c0a:	88d8      	ldrh	r0, [r3, #6]
 8003c0c:	b280      	uxth	r0, r0
 8003c0e:	f7ff f913 	bl	8002e38 <MATCH_MARK>
 8003c12:	2800      	cmp	r0, #0
 8003c14:	d0e2      	beq.n	8003bdc <decodeWhynter+0xc>
		return false;
	if (!MATCH_SPACE(results->rawbuf[offset++], WHYNTER_HDR_SPACE))
 8003c16:	68e3      	ldr	r3, [r4, #12]
 8003c18:	f640 3122 	movw	r1, #2850	; 0xb22
 8003c1c:	8918      	ldrh	r0, [r3, #8]
 8003c1e:	b280      	uxth	r0, r0
 8003c20:	f7ff f93e 	bl	8002ea0 <MATCH_SPACE>
 8003c24:	2800      	cmp	r0, #0
 8003c26:	d0d9      	beq.n	8003bdc <decodeWhynter+0xc>
 8003c28:	2605      	movs	r6, #5
 8003c2a:	2500      	movs	r5, #0
		return false;

	// data bits
	for (int i = 0; i < WHYNTER_BITS; i++) {
		if (!MATCH_MARK(results->rawbuf[offset++], WHYNTER_BIT_MARK))
 8003c2c:	68e3      	ldr	r3, [r4, #12]
 8003c2e:	f240 21ee 	movw	r1, #750	; 0x2ee
 8003c32:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 8003c36:	0077      	lsls	r7, r6, #1
 8003c38:	b280      	uxth	r0, r0
 8003c3a:	f7ff f8fd 	bl	8002e38 <MATCH_MARK>
 8003c3e:	2800      	cmp	r0, #0
 8003c40:	d0cc      	beq.n	8003bdc <decodeWhynter+0xc>
			return false;

		if (MATCH_SPACE(results->rawbuf[offset], WHYNTER_ONE_SPACE))
 8003c42:	68e3      	ldr	r3, [r4, #12]
 8003c44:	3702      	adds	r7, #2
 8003c46:	5bd8      	ldrh	r0, [r3, r7]
 8003c48:	f640 0166 	movw	r1, #2150	; 0x866
 8003c4c:	b280      	uxth	r0, r0
 8003c4e:	f7ff f927 	bl	8002ea0 <MATCH_SPACE>
 8003c52:	b1b0      	cbz	r0, 8003c82 <decodeWhynter+0xb2>
			data = (data << 1) | 1;
 8003c54:	006d      	lsls	r5, r5, #1
 8003c56:	f045 0501 	orr.w	r5, r5, #1
		else if (MATCH_SPACE(results->rawbuf[offset], WHYNTER_ZERO_SPACE))
			data = (data << 1) | 0;
		else
			return false;
		offset++;
 8003c5a:	3602      	adds	r6, #2
	for (int i = 0; i < WHYNTER_BITS; i++) {
 8003c5c:	2e45      	cmp	r6, #69	; 0x45
 8003c5e:	d1e5      	bne.n	8003c2c <decodeWhynter+0x5c>
	}

	// trailing mark
	if (!MATCH_MARK(results->rawbuf[offset], WHYNTER_BIT_MARK))
 8003c60:	68e3      	ldr	r3, [r4, #12]
 8003c62:	f240 21ee 	movw	r1, #750	; 0x2ee
 8003c66:	f8b3 008a 	ldrh.w	r0, [r3, #138]	; 0x8a
 8003c6a:	b280      	uxth	r0, r0
 8003c6c:	f7ff f8e4 	bl	8002e38 <MATCH_MARK>
 8003c70:	2800      	cmp	r0, #0
 8003c72:	d0b3      	beq.n	8003bdc <decodeWhynter+0xc>
		return false;

	// Success
	results->bits = WHYNTER_BITS;
 8003c74:	2320      	movs	r3, #32
 8003c76:	8123      	strh	r3, [r4, #8]
	results->value = data;
	results->decode_type = WHYNTER;
 8003c78:	2308      	movs	r3, #8
	results->value = data;
 8003c7a:	6065      	str	r5, [r4, #4]
	results->decode_type = WHYNTER;
 8003c7c:	7023      	strb	r3, [r4, #0]
	return true;
 8003c7e:	2001      	movs	r0, #1
}
 8003c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		else if (MATCH_SPACE(results->rawbuf[offset], WHYNTER_ZERO_SPACE))
 8003c82:	68e3      	ldr	r3, [r4, #12]
 8003c84:	f240 21ee 	movw	r1, #750	; 0x2ee
 8003c88:	5bd8      	ldrh	r0, [r3, r7]
 8003c8a:	b280      	uxth	r0, r0
 8003c8c:	f7ff f908 	bl	8002ea0 <MATCH_SPACE>
 8003c90:	2800      	cmp	r0, #0
 8003c92:	d0a3      	beq.n	8003bdc <decodeWhynter+0xc>
			data = (data << 1) | 0;
 8003c94:	006d      	lsls	r5, r5, #1
 8003c96:	e7e0      	b.n	8003c5a <decodeWhynter+0x8a>
 8003c98:	20000530 	.word	0x20000530

08003c9c <EEPROM_read>:
	HAL_Delay(200);
	Menupos = 0;
	lcd_menu(1);
}

void EEPROM_read(int master_select) { //retrieve master gestures from EEPROM
 8003c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//	for (;;) { // wait...
	//	status = HAL_I2C_IsDeviceReady(&hi2c2, devAddr, 1, HAL_MAX_DELAY);
	//		if (status == HAL_OK)
	//		break;
	//	}
	addr = (master_select * sample_size * DOF) * 2;
 8003ca0:	f44f 7696 	mov.w	r6, #300	; 0x12c
 8003ca4:	2500      	movs	r5, #0
 8003ca6:	4346      	muls	r6, r0
 8003ca8:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8003d00 <EEPROM_read+0x64>
	for (i = 0; i < DOF; i++) {
		for (j = 0; j < sample_size; j++) {
			HAL_I2C_Mem_Read(&hi2c2, devAddr, addr, I2C_MEMADD_SIZE_16BIT,
 8003cac:	f8df a054 	ldr.w	sl, [pc, #84]	; 8003d04 <EEPROM_read+0x68>
 8003cb0:	f8df b054 	ldr.w	fp, [pc, #84]	; 8003d08 <EEPROM_read+0x6c>
void EEPROM_read(int master_select) { //retrieve master gestures from EEPROM
 8003cb4:	b087      	sub	sp, #28
 8003cb6:	2400      	movs	r4, #0
 8003cb8:	19af      	adds	r7, r5, r6
 8003cba:	eb09 0847 	add.w	r8, r9, r7, lsl #1
			HAL_I2C_Mem_Read(&hi2c2, devAddr, addr, I2C_MEMADD_SIZE_16BIT,
 8003cbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cc2:	9302      	str	r3, [sp, #8]
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	193a      	adds	r2, r7, r4
 8003cc8:	9301      	str	r3, [sp, #4]
 8003cca:	ab05      	add	r3, sp, #20
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	b292      	uxth	r2, r2
 8003cd0:	2310      	movs	r3, #16
 8003cd2:	f8ba 1000 	ldrh.w	r1, [sl]
 8003cd6:	4658      	mov	r0, fp
 8003cd8:	f7fe f826 	bl	8001d28 <HAL_I2C_Mem_Read>
					(uint8_t*) rmsg, 2, HAL_MAX_DELAY);
			data = ((rmsg[1] << 8) | rmsg[0]);
 8003cdc:	f99d 2015 	ldrsb.w	r2, [sp, #21]
 8003ce0:	f99d 3014 	ldrsb.w	r3, [sp, #20]
			addr += 2;
			master[master_select][i][j] = data;
 8003ce4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003ce8:	f848 3014 	str.w	r3, [r8, r4, lsl #1]
 8003cec:	3402      	adds	r4, #2
		for (j = 0; j < sample_size; j++) {
 8003cee:	2c64      	cmp	r4, #100	; 0x64
 8003cf0:	d1e5      	bne.n	8003cbe <EEPROM_read+0x22>
 8003cf2:	3564      	adds	r5, #100	; 0x64
	for (i = 0; i < DOF; i++) {
 8003cf4:	f5b5 7f96 	cmp.w	r5, #300	; 0x12c
 8003cf8:	d1dd      	bne.n	8003cb6 <EEPROM_read+0x1a>
		}
	}

}
 8003cfa:	b007      	add	sp, #28
 8003cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d00:	20000b58 	.word	0x20000b58
 8003d04:	20000014 	.word	0x20000014
 8003d08:	200007a0 	.word	0x200007a0

08003d0c <lcd_menu>:
void lcd_menu(int key) { //copy readings from temp_values to selected master
 8003d0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (Menupos == 0) {
 8003d10:	4e9c      	ldr	r6, [pc, #624]	; (8003f84 <lcd_menu+0x278>)
void lcd_menu(int key) { //copy readings from temp_values to selected master
 8003d12:	4607      	mov	r7, r0
	if (Menupos == 0) {
 8003d14:	7834      	ldrb	r4, [r6, #0]
 8003d16:	bb7c      	cbnz	r4, 8003d78 <lcd_menu+0x6c>
		ssd1306_Fill(Black);
 8003d18:	4620      	mov	r0, r4
 8003d1a:	f001 f817 	bl	8004d4c <ssd1306_Fill>
		ssd1306_SetCursor(7, 0);
 8003d1e:	4621      	mov	r1, r4
		ssd1306_WriteString("Start guesture", Font_7x10, White);
 8003d20:	4c99      	ldr	r4, [pc, #612]	; (8003f88 <lcd_menu+0x27c>)
		ssd1306_SetCursor(7, 0);
 8003d22:	2007      	movs	r0, #7
 8003d24:	f001 f926 	bl	8004f74 <ssd1306_SetCursor>
		ssd1306_WriteString("Start guesture", Font_7x10, White);
 8003d28:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	4897      	ldr	r0, [pc, #604]	; (8003f8c <lcd_menu+0x280>)
 8003d30:	f001 f90a 	bl	8004f48 <ssd1306_WriteString>
		ssd1306_SetCursor(7, 12);
 8003d34:	210c      	movs	r1, #12
 8003d36:	2007      	movs	r0, #7
 8003d38:	f001 f91c 	bl	8004f74 <ssd1306_SetCursor>
		ssd1306_WriteString("Record  guesture", Font_7x10, White);
 8003d3c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003d40:	2301      	movs	r3, #1
 8003d42:	4893      	ldr	r0, [pc, #588]	; (8003f90 <lcd_menu+0x284>)
 8003d44:	f001 f900 	bl	8004f48 <ssd1306_WriteString>
		ssd1306_SetCursor(7, 24);
 8003d48:	2118      	movs	r1, #24
 8003d4a:	2007      	movs	r0, #7
 8003d4c:	f001 f912 	bl	8004f74 <ssd1306_SetCursor>
		ssd1306_WriteString("save to EEEPROM ", Font_7x10, White);
 8003d50:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003d54:	2301      	movs	r3, #1
 8003d56:	488f      	ldr	r0, [pc, #572]	; (8003f94 <lcd_menu+0x288>)
 8003d58:	f001 f8f6 	bl	8004f48 <ssd1306_WriteString>
		ssd1306_SetCursor(7, 36);
 8003d5c:	2124      	movs	r1, #36	; 0x24
 8003d5e:	2007      	movs	r0, #7
 8003d60:	f001 f908 	bl	8004f74 <ssd1306_SetCursor>
		ssd1306_WriteString("Print eeeprom", Font_7x10, White);
 8003d64:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003d68:	2301      	movs	r3, #1
 8003d6a:	488b      	ldr	r0, [pc, #556]	; (8003f98 <lcd_menu+0x28c>)
 8003d6c:	f001 f8ec 	bl	8004f48 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8003d70:	f000 fffa 	bl	8004d68 <ssd1306_UpdateScreen>
		Menupos = 1;
 8003d74:	2301      	movs	r3, #1
 8003d76:	7033      	strb	r3, [r6, #0]
	if (key == 1) {
 8003d78:	2f01      	cmp	r7, #1
 8003d7a:	d13a      	bne.n	8003df2 <lcd_menu+0xe6>
		ssd1306_SetCursor(0, Menupos2);
 8003d7c:	4c87      	ldr	r4, [pc, #540]	; (8003f9c <lcd_menu+0x290>)
		ssd1306_WriteString("*", Font_7x10, White);
 8003d7e:	4d82      	ldr	r5, [pc, #520]	; (8003f88 <lcd_menu+0x27c>)
		ssd1306_SetCursor(0, Menupos2);
 8003d80:	7821      	ldrb	r1, [r4, #0]
 8003d82:	2000      	movs	r0, #0
 8003d84:	f001 f8f6 	bl	8004f74 <ssd1306_SetCursor>
		ssd1306_WriteString("*", Font_7x10, White);
 8003d88:	e895 0006 	ldmia.w	r5, {r1, r2}
 8003d8c:	463b      	mov	r3, r7
 8003d8e:	4884      	ldr	r0, [pc, #528]	; (8003fa0 <lcd_menu+0x294>)
 8003d90:	f001 f8da 	bl	8004f48 <ssd1306_WriteString>
		ssd1306_SetCursor(0, Menupos2 - 12);
 8003d94:	7821      	ldrb	r1, [r4, #0]
 8003d96:	2000      	movs	r0, #0
 8003d98:	390c      	subs	r1, #12
 8003d9a:	b2c9      	uxtb	r1, r1
 8003d9c:	f001 f8ea 	bl	8004f74 <ssd1306_SetCursor>
		ssd1306_WriteString(" ", Font_7x10, White);
 8003da0:	e895 0006 	ldmia.w	r5, {r1, r2}
 8003da4:	463b      	mov	r3, r7
 8003da6:	487f      	ldr	r0, [pc, #508]	; (8003fa4 <lcd_menu+0x298>)
 8003da8:	f001 f8ce 	bl	8004f48 <ssd1306_WriteString>
		HAL_Delay(200);
 8003dac:	20c8      	movs	r0, #200	; 0xc8
 8003dae:	f7fd f915 	bl	8000fdc <HAL_Delay>
		if (Menupos2 > 48) {
 8003db2:	7821      	ldrb	r1, [r4, #0]
 8003db4:	2930      	cmp	r1, #48	; 0x30
 8003db6:	d915      	bls.n	8003de4 <lcd_menu+0xd8>
			ssd1306_SetCursor(0, Menupos2 - 12);
 8003db8:	390c      	subs	r1, #12
 8003dba:	b2c9      	uxtb	r1, r1
 8003dbc:	2000      	movs	r0, #0
 8003dbe:	f001 f8d9 	bl	8004f74 <ssd1306_SetCursor>
			ssd1306_WriteString(" ", Font_7x10, White);
 8003dc2:	e895 0006 	ldmia.w	r5, {r1, r2}
 8003dc6:	463b      	mov	r3, r7
 8003dc8:	4876      	ldr	r0, [pc, #472]	; (8003fa4 <lcd_menu+0x298>)
 8003dca:	f001 f8bd 	bl	8004f48 <ssd1306_WriteString>
			Menupos2 = 0;
 8003dce:	2100      	movs	r1, #0
			ssd1306_SetCursor(0, Menupos2);
 8003dd0:	4608      	mov	r0, r1
			Menupos2 = 0;
 8003dd2:	7021      	strb	r1, [r4, #0]
			ssd1306_SetCursor(0, Menupos2);
 8003dd4:	f001 f8ce 	bl	8004f74 <ssd1306_SetCursor>
			ssd1306_WriteString("*", Font_7x10, White);
 8003dd8:	e895 0006 	ldmia.w	r5, {r1, r2}
 8003ddc:	463b      	mov	r3, r7
 8003dde:	4870      	ldr	r0, [pc, #448]	; (8003fa0 <lcd_menu+0x294>)
 8003de0:	f001 f8b2 	bl	8004f48 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8003de4:	f000 ffc0 	bl	8004d68 <ssd1306_UpdateScreen>
		Menupos2 += 12;
 8003de8:	7823      	ldrb	r3, [r4, #0]
 8003dea:	330c      	adds	r3, #12
 8003dec:	7023      	strb	r3, [r4, #0]
 8003dee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((key == 2) && (Menupos2 == 12))	// анализируем жест
 8003df2:	2f02      	cmp	r7, #2
 8003df4:	d138      	bne.n	8003e68 <lcd_menu+0x15c>
 8003df6:	4c69      	ldr	r4, [pc, #420]	; (8003f9c <lcd_menu+0x290>)
 8003df8:	7823      	ldrb	r3, [r4, #0]
 8003dfa:	2b0c      	cmp	r3, #12
 8003dfc:	d105      	bne.n	8003e0a <lcd_menu+0xfe>
		HAL_Delay(70);
 8003dfe:	2046      	movs	r0, #70	; 0x46
 8003e00:	f7fd f8ec 	bl	8000fdc <HAL_Delay>
		Start = 1;
 8003e04:	2201      	movs	r2, #1
 8003e06:	4b68      	ldr	r3, [pc, #416]	; (8003fa8 <lcd_menu+0x29c>)
 8003e08:	701a      	strb	r2, [r3, #0]
	if ((key == 2) && (Menupos2 == 24))		    //пишем жест
 8003e0a:	7823      	ldrb	r3, [r4, #0]
 8003e0c:	2b18      	cmp	r3, #24
 8003e0e:	d10a      	bne.n	8003e26 <lcd_menu+0x11a>
		HAL_Delay(110);
 8003e10:	206e      	movs	r0, #110	; 0x6e
 8003e12:	f7fd f8e3 	bl	8000fdc <HAL_Delay>
		take_reading_master_guesture=1;
 8003e16:	2301      	movs	r3, #1
 8003e18:	4a64      	ldr	r2, [pc, #400]	; (8003fac <lcd_menu+0x2a0>)
 8003e1a:	7013      	strb	r3, [r2, #0]
		Start=1;
 8003e1c:	4a62      	ldr	r2, [pc, #392]	; (8003fa8 <lcd_menu+0x29c>)
 8003e1e:	7013      	strb	r3, [r2, #0]
		Menupos = 0;
 8003e20:	2300      	movs	r3, #0
 8003e22:	7033      	strb	r3, [r6, #0]
		Menupos2 = 0;
 8003e24:	7023      	strb	r3, [r4, #0]
	if ((key == 2) && (Menupos2 == 36))		    //пишем в память
 8003e26:	7823      	ldrb	r3, [r4, #0]
 8003e28:	2b24      	cmp	r3, #36	; 0x24
 8003e2a:	d002      	beq.n	8003e32 <lcd_menu+0x126>
	int nm = -1;
 8003e2c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003e30:	e017      	b.n	8003e62 <lcd_menu+0x156>
		HAL_Delay(300);
 8003e32:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003e36:	f7fd f8d1 	bl	8000fdc <HAL_Delay>
	int nm = -1;
 8003e3a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) != GPIO_PIN_SET) {
 8003e3e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8003fb8 <lcd_menu+0x2ac>
				snprintf(trans_str, 20, "nom matr: %i\n", nm);
 8003e42:	f8df b178 	ldr.w	fp, [pc, #376]	; 8003fbc <lcd_menu+0x2b0>
 8003e46:	f8df a178 	ldr.w	sl, [pc, #376]	; 8003fc0 <lcd_menu+0x2b4>
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) != GPIO_PIN_SET) {
 8003e4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e4e:	4648      	mov	r0, r9
 8003e50:	f7fd fa2c 	bl	80012ac <HAL_GPIO_ReadPin>
 8003e54:	2801      	cmp	r0, #1
 8003e56:	d109      	bne.n	8003e6c <lcd_menu+0x160>
		EEPROM_write(nm);
 8003e58:	4628      	mov	r0, r5
 8003e5a:	f000 f8b3 	bl	8003fc4 <EEPROM_write>
		Menupos2 = 0;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	7023      	strb	r3, [r4, #0]
	if ((key == 2) && (Menupos2 == 48))		    //читаем жест из памяти
 8003e62:	7823      	ldrb	r3, [r4, #0]
 8003e64:	2b30      	cmp	r3, #48	; 0x30
 8003e66:	d02e      	beq.n	8003ec6 <lcd_menu+0x1ba>
 8003e68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) == GPIO_PIN_SET) {
 8003e6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003e70:	4648      	mov	r0, r9
 8003e72:	f7fd fa1b 	bl	80012ac <HAL_GPIO_ReadPin>
 8003e76:	2801      	cmp	r0, #1
 8003e78:	4680      	mov	r8, r0
 8003e7a:	d1e6      	bne.n	8003e4a <lcd_menu+0x13e>
				nm++;
 8003e7c:	3501      	adds	r5, #1
				ssd1306_Fill(Black);
 8003e7e:	2000      	movs	r0, #0
 8003e80:	f000 ff64 	bl	8004d4c <ssd1306_Fill>
				ssd1306_WriteString("               ", Font_7x10, White);
 8003e84:	4f40      	ldr	r7, [pc, #256]	; (8003f88 <lcd_menu+0x27c>)
				snprintf(trans_str, 20, "nom matr: %i\n", nm);
 8003e86:	462b      	mov	r3, r5
 8003e88:	465a      	mov	r2, fp
 8003e8a:	2114      	movs	r1, #20
 8003e8c:	4650      	mov	r0, sl
 8003e8e:	f001 fa3d 	bl	800530c <sniprintf>
				ssd1306_SetCursor(3, Menupos2);
 8003e92:	7821      	ldrb	r1, [r4, #0]
 8003e94:	2003      	movs	r0, #3
 8003e96:	f001 f86d 	bl	8004f74 <ssd1306_SetCursor>
				ssd1306_WriteString("               ", Font_7x10, White);
 8003e9a:	e897 0006 	ldmia.w	r7, {r1, r2}
 8003e9e:	4643      	mov	r3, r8
 8003ea0:	4843      	ldr	r0, [pc, #268]	; (8003fb0 <lcd_menu+0x2a4>)
 8003ea2:	f001 f851 	bl	8004f48 <ssd1306_WriteString>
				ssd1306_SetCursor(3, Menupos2);
 8003ea6:	7821      	ldrb	r1, [r4, #0]
 8003ea8:	2003      	movs	r0, #3
 8003eaa:	f001 f863 	bl	8004f74 <ssd1306_SetCursor>
				ssd1306_WriteString(trans_str, Font_7x10, White);
 8003eae:	e897 0006 	ldmia.w	r7, {r1, r2}
 8003eb2:	4643      	mov	r3, r8
 8003eb4:	4650      	mov	r0, sl
 8003eb6:	f001 f847 	bl	8004f48 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 8003eba:	f000 ff55 	bl	8004d68 <ssd1306_UpdateScreen>
				HAL_Delay(200);
 8003ebe:	20c8      	movs	r0, #200	; 0xc8
 8003ec0:	f7fd f88c 	bl	8000fdc <HAL_Delay>
 8003ec4:	e7c1      	b.n	8003e4a <lcd_menu+0x13e>
		HAL_Delay(300);
 8003ec6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003eca:	f7fd f887 	bl	8000fdc <HAL_Delay>
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) != GPIO_PIN_SET) {
 8003ece:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8003fb8 <lcd_menu+0x2ac>
				snprintf(trans_str, 20, "nom matr: %i\n", nm);
 8003ed2:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8003fbc <lcd_menu+0x2b0>
 8003ed6:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8003fc0 <lcd_menu+0x2b4>
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) != GPIO_PIN_SET) {
 8003eda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ede:	4640      	mov	r0, r8
 8003ee0:	f7fd f9e4 	bl	80012ac <HAL_GPIO_ReadPin>
 8003ee4:	2801      	cmp	r0, #1
 8003ee6:	4607      	mov	r7, r0
 8003ee8:	d11c      	bne.n	8003f24 <lcd_menu+0x218>
		EEPROM_read(nm);
 8003eea:	4628      	mov	r0, r5
		Menupos = 0;
 8003eec:	2500      	movs	r5, #0
		EEPROM_read(nm);
 8003eee:	f7ff fed5 	bl	8003c9c <EEPROM_read>
		ssd1306_Fill(Black);
 8003ef2:	2000      	movs	r0, #0
 8003ef4:	f000 ff2a 	bl	8004d4c <ssd1306_Fill>
		ssd1306_SetCursor(3, 10);
 8003ef8:	210a      	movs	r1, #10
 8003efa:	2003      	movs	r0, #3
 8003efc:	f001 f83a 	bl	8004f74 <ssd1306_SetCursor>
		ssd1306_WriteString("Read complyte !", Font_7x10, White);
 8003f00:	4a21      	ldr	r2, [pc, #132]	; (8003f88 <lcd_menu+0x27c>)
 8003f02:	463b      	mov	r3, r7
 8003f04:	ca06      	ldmia	r2, {r1, r2}
 8003f06:	482b      	ldr	r0, [pc, #172]	; (8003fb4 <lcd_menu+0x2a8>)
 8003f08:	f001 f81e 	bl	8004f48 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8003f0c:	f000 ff2c 	bl	8004d68 <ssd1306_UpdateScreen>
		HAL_Delay(200);
 8003f10:	20c8      	movs	r0, #200	; 0xc8
 8003f12:	f7fd f863 	bl	8000fdc <HAL_Delay>
		lcd_menu(1);
 8003f16:	4638      	mov	r0, r7
		Menupos = 0;
 8003f18:	7035      	strb	r5, [r6, #0]
		lcd_menu(1);
 8003f1a:	f7ff fef7 	bl	8003d0c <lcd_menu>
		Menupos2 = 0;
 8003f1e:	7025      	strb	r5, [r4, #0]
}
 8003f20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			HAL_Delay(30);
 8003f24:	201e      	movs	r0, #30
 8003f26:	f7fd f859 	bl	8000fdc <HAL_Delay>
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) == GPIO_PIN_SET) {
 8003f2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003f2e:	4640      	mov	r0, r8
 8003f30:	f7fd f9bc 	bl	80012ac <HAL_GPIO_ReadPin>
 8003f34:	2801      	cmp	r0, #1
 8003f36:	4683      	mov	fp, r0
 8003f38:	d1cf      	bne.n	8003eda <lcd_menu+0x1ce>
				nm++;
 8003f3a:	3501      	adds	r5, #1
				ssd1306_Fill(Black);
 8003f3c:	2000      	movs	r0, #0
 8003f3e:	f000 ff05 	bl	8004d4c <ssd1306_Fill>
				ssd1306_WriteString("               ", Font_7x10, White);
 8003f42:	4f11      	ldr	r7, [pc, #68]	; (8003f88 <lcd_menu+0x27c>)
				snprintf(trans_str, 20, "nom matr: %i\n", nm);
 8003f44:	462b      	mov	r3, r5
 8003f46:	4652      	mov	r2, sl
 8003f48:	2114      	movs	r1, #20
 8003f4a:	4648      	mov	r0, r9
 8003f4c:	f001 f9de 	bl	800530c <sniprintf>
				ssd1306_SetCursor(3, Menupos2);
 8003f50:	7821      	ldrb	r1, [r4, #0]
 8003f52:	2003      	movs	r0, #3
 8003f54:	f001 f80e 	bl	8004f74 <ssd1306_SetCursor>
				ssd1306_WriteString("               ", Font_7x10, White);
 8003f58:	e897 0006 	ldmia.w	r7, {r1, r2}
 8003f5c:	465b      	mov	r3, fp
 8003f5e:	4814      	ldr	r0, [pc, #80]	; (8003fb0 <lcd_menu+0x2a4>)
 8003f60:	f000 fff2 	bl	8004f48 <ssd1306_WriteString>
				ssd1306_SetCursor(3, Menupos2);
 8003f64:	7821      	ldrb	r1, [r4, #0]
 8003f66:	2003      	movs	r0, #3
 8003f68:	f001 f804 	bl	8004f74 <ssd1306_SetCursor>
				ssd1306_WriteString(trans_str, Font_7x10, White);
 8003f6c:	e897 0006 	ldmia.w	r7, {r1, r2}
 8003f70:	465b      	mov	r3, fp
 8003f72:	4648      	mov	r0, r9
 8003f74:	f000 ffe8 	bl	8004f48 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 8003f78:	f000 fef6 	bl	8004d68 <ssd1306_UpdateScreen>
				HAL_Delay(200);
 8003f7c:	20c8      	movs	r0, #200	; 0xc8
 8003f7e:	f7fd f82d 	bl	8000fdc <HAL_Delay>
 8003f82:	e7aa      	b.n	8003eda <lcd_menu+0x1ce>
 8003f84:	200000ac 	.word	0x200000ac
 8003f88:	20000018 	.word	0x20000018
 8003f8c:	08005bf4 	.word	0x08005bf4
 8003f90:	08005c03 	.word	0x08005c03
 8003f94:	08005c14 	.word	0x08005c14
 8003f98:	08005c25 	.word	0x08005c25
 8003f9c:	200000ad 	.word	0x200000ad
 8003fa0:	08005c33 	.word	0x08005c33
 8003fa4:	08005c51 	.word	0x08005c51
 8003fa8:	200000ae 	.word	0x200000ae
 8003fac:	20000b50 	.word	0x20000b50
 8003fb0:	08005c43 	.word	0x08005c43
 8003fb4:	08005c53 	.word	0x08005c53
 8003fb8:	40011000 	.word	0x40011000
 8003fbc:	08005c35 	.word	0x08005c35
 8003fc0:	200000b9 	.word	0x200000b9

08003fc4 <EEPROM_write>:
void EEPROM_write(int master_select) { //store master gestures in EEPROM of arduino
 8003fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	addr = (master_select * sample_size * DOF) * 2; // умножаем на 2. потому что пишем по 2 бита ( 16 байт)
 8003fc8:	f44f 7696 	mov.w	r6, #300	; 0x12c
 8003fcc:	4346      	muls	r6, r0
		status = HAL_I2C_IsDeviceReady(&hi2c2, devAddr, 1, HAL_MAX_DELAY);
 8003fce:	4f51      	ldr	r7, [pc, #324]	; (8004114 <EEPROM_write+0x150>)
 8003fd0:	4d51      	ldr	r5, [pc, #324]	; (8004118 <EEPROM_write+0x154>)
 8003fd2:	4c52      	ldr	r4, [pc, #328]	; (800411c <EEPROM_write+0x158>)
void EEPROM_write(int master_select) { //store master gestures in EEPROM of arduino
 8003fd4:	b087      	sub	sp, #28
		status = HAL_I2C_IsDeviceReady(&hi2c2, devAddr, 1, HAL_MAX_DELAY);
 8003fd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fda:	2201      	movs	r2, #1
 8003fdc:	8839      	ldrh	r1, [r7, #0]
 8003fde:	4628      	mov	r0, r5
 8003fe0:	f7fd ffc2 	bl	8001f68 <HAL_I2C_IsDeviceReady>
 8003fe4:	7020      	strb	r0, [r4, #0]
		if (status == HAL_OK)
 8003fe6:	2800      	cmp	r0, #0
 8003fe8:	d1f5      	bne.n	8003fd6 <EEPROM_write+0x12>
 8003fea:	4637      	mov	r7, r6
 8003fec:	4604      	mov	r4, r0
			HAL_I2C_Mem_Write(&hi2c2, devAddr, addr, I2C_MEMADD_SIZE_16BIT,
 8003fee:	f8df a128 	ldr.w	sl, [pc, #296]	; 8004118 <EEPROM_write+0x154>
void EEPROM_write(int master_select) { //store master gestures in EEPROM of arduino
 8003ff2:	2500      	movs	r5, #0
 8003ff4:	4a4a      	ldr	r2, [pc, #296]	; (8004120 <EEPROM_write+0x15c>)
 8003ff6:	1bbb      	subs	r3, r7, r6
 8003ff8:	eb03 0b02 	add.w	fp, r3, r2
			temp1 = (temp_values[i][j] & 0xFF);
 8003ffc:	f93b 3015 	ldrsh.w	r3, [fp, r5, lsl #1]
			HAL_I2C_Mem_Write(&hi2c2, devAddr, addr, I2C_MEMADD_SIZE_16BIT,
 8004000:	f04f 0902 	mov.w	r9, #2
			raw[0] = temp1;
 8004004:	f88d 3010 	strb.w	r3, [sp, #16]
			temp2 = ((temp_values[i][j] >> 8) & 0xFFFF);
 8004008:	121b      	asrs	r3, r3, #8
			raw[1] = temp2;
 800400a:	f88d 3011 	strb.w	r3, [sp, #17]
			HAL_I2C_Mem_Write(&hi2c2, devAddr, addr, I2C_MEMADD_SIZE_16BIT,
 800400e:	4b41      	ldr	r3, [pc, #260]	; (8004114 <EEPROM_write+0x150>)
 8004010:	eb07 0845 	add.w	r8, r7, r5, lsl #1
 8004014:	8819      	ldrh	r1, [r3, #0]
 8004016:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800401a:	fa1f f888 	uxth.w	r8, r8
 800401e:	9302      	str	r3, [sp, #8]
 8004020:	ab04      	add	r3, sp, #16
 8004022:	4642      	mov	r2, r8
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	f8cd 9004 	str.w	r9, [sp, #4]
 800402a:	2310      	movs	r3, #16
 800402c:	4650      	mov	r0, sl
 800402e:	f7fd fde5 	bl	8001bfc <HAL_I2C_Mem_Write>
			HAL_Delay(20);
 8004032:	2014      	movs	r0, #20
 8004034:	f7fc ffd2 	bl	8000fdc <HAL_Delay>
			HAL_I2C_Mem_Read(&hi2c2, devAddr, addr, I2C_MEMADD_SIZE_16BIT,
 8004038:	4b36      	ldr	r3, [pc, #216]	; (8004114 <EEPROM_write+0x150>)
 800403a:	4642      	mov	r2, r8
 800403c:	8819      	ldrh	r1, [r3, #0]
 800403e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004042:	9302      	str	r3, [sp, #8]
 8004044:	ab05      	add	r3, sp, #20
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	f8cd 9004 	str.w	r9, [sp, #4]
 800404c:	2310      	movs	r3, #16
 800404e:	4650      	mov	r0, sl
 8004050:	f7fd fe6a 	bl	8001d28 <HAL_I2C_Mem_Read>
			data = (int16_t*) ((rmsg[1] << 8) | rmsg[0]);
 8004054:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
			if (temp_values[i][j] != data) {
 8004058:	f93b 3015 	ldrsh.w	r3, [fp, r5, lsl #1]
 800405c:	4598      	cmp	r8, r3
 800405e:	d044      	beq.n	80040ea <EEPROM_write+0x126>
				snprintf(trans_str, 40, "temp_values: %i\n", temp_values[i][j]);
 8004060:	4a30      	ldr	r2, [pc, #192]	; (8004124 <EEPROM_write+0x160>)
 8004062:	2128      	movs	r1, #40	; 0x28
 8004064:	4830      	ldr	r0, [pc, #192]	; (8004128 <EEPROM_write+0x164>)
 8004066:	f001 f951 	bl	800530c <sniprintf>
				ssd1306_Fill(Black);
 800406a:	2000      	movs	r0, #0
 800406c:	f000 fe6e 	bl	8004d4c <ssd1306_Fill>
				ssd1306_SetCursor(3, 2);
 8004070:	4649      	mov	r1, r9
				ssd1306_WriteString(trans_str, Font_7x10, White);
 8004072:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800413c <EEPROM_write+0x178>
				ssd1306_SetCursor(3, 2);
 8004076:	2003      	movs	r0, #3
 8004078:	f000 ff7c 	bl	8004f74 <ssd1306_SetCursor>
				ssd1306_WriteString(trans_str, Font_7x10, White);
 800407c:	e899 0006 	ldmia.w	r9, {r1, r2}
 8004080:	2301      	movs	r3, #1
 8004082:	4829      	ldr	r0, [pc, #164]	; (8004128 <EEPROM_write+0x164>)
 8004084:	f000 ff60 	bl	8004f48 <ssd1306_WriteString>
				snprintf(trans_str, 40, "data: %i\n", data);
 8004088:	4643      	mov	r3, r8
 800408a:	4a28      	ldr	r2, [pc, #160]	; (800412c <EEPROM_write+0x168>)
 800408c:	2128      	movs	r1, #40	; 0x28
 800408e:	4826      	ldr	r0, [pc, #152]	; (8004128 <EEPROM_write+0x164>)
 8004090:	f001 f93c 	bl	800530c <sniprintf>
				ssd1306_SetCursor(3, 10);
 8004094:	210a      	movs	r1, #10
 8004096:	2003      	movs	r0, #3
 8004098:	f000 ff6c 	bl	8004f74 <ssd1306_SetCursor>
				ssd1306_WriteString(trans_str, Font_7x10, White);
 800409c:	e899 0006 	ldmia.w	r9, {r1, r2}
 80040a0:	2301      	movs	r3, #1
 80040a2:	4821      	ldr	r0, [pc, #132]	; (8004128 <EEPROM_write+0x164>)
 80040a4:	f000 ff50 	bl	8004f48 <ssd1306_WriteString>
				snprintf(trans_str, 96, "i: %p | j: %s \n", i, j);
 80040a8:	4623      	mov	r3, r4
 80040aa:	4a21      	ldr	r2, [pc, #132]	; (8004130 <EEPROM_write+0x16c>)
 80040ac:	2160      	movs	r1, #96	; 0x60
 80040ae:	9500      	str	r5, [sp, #0]
 80040b0:	481d      	ldr	r0, [pc, #116]	; (8004128 <EEPROM_write+0x164>)
 80040b2:	f001 f92b 	bl	800530c <sniprintf>
				ssd1306_SetCursor(8, 20);
 80040b6:	2114      	movs	r1, #20
 80040b8:	2008      	movs	r0, #8
 80040ba:	f000 ff5b 	bl	8004f74 <ssd1306_SetCursor>
				ssd1306_WriteString(trans_str, Font_7x10, White);
 80040be:	e899 0006 	ldmia.w	r9, {r1, r2}
 80040c2:	2301      	movs	r3, #1
 80040c4:	4818      	ldr	r0, [pc, #96]	; (8004128 <EEPROM_write+0x164>)
 80040c6:	f000 ff3f 	bl	8004f48 <ssd1306_WriteString>
				ssd1306_SetCursor(8, 30);
 80040ca:	211e      	movs	r1, #30
 80040cc:	2008      	movs	r0, #8
 80040ce:	f000 ff51 	bl	8004f74 <ssd1306_SetCursor>
				ssd1306_WriteString("Alarm!", Font_7x10, White);
 80040d2:	e899 0006 	ldmia.w	r9, {r1, r2}
 80040d6:	2301      	movs	r3, #1
 80040d8:	4816      	ldr	r0, [pc, #88]	; (8004134 <EEPROM_write+0x170>)
 80040da:	f000 ff35 	bl	8004f48 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 80040de:	f000 fe43 	bl	8004d68 <ssd1306_UpdateScreen>
				HAL_Delay(20000);
 80040e2:	f644 6020 	movw	r0, #20000	; 0x4e20
 80040e6:	f7fc ff79 	bl	8000fdc <HAL_Delay>
		for (int j = 0; j < sample_size; j++) {
 80040ea:	3501      	adds	r5, #1
 80040ec:	2d32      	cmp	r5, #50	; 0x32
 80040ee:	d185      	bne.n	8003ffc <EEPROM_write+0x38>
	for (int i = 0; i < DOF; i++) {
 80040f0:	3401      	adds	r4, #1
 80040f2:	2c03      	cmp	r4, #3
 80040f4:	f107 0764 	add.w	r7, r7, #100	; 0x64
 80040f8:	f47f af7b 	bne.w	8003ff2 <EEPROM_write+0x2e>
	HAL_Delay(200);
 80040fc:	20c8      	movs	r0, #200	; 0xc8
 80040fe:	f7fc ff6d 	bl	8000fdc <HAL_Delay>
	Menupos = 0;
 8004102:	2200      	movs	r2, #0
 8004104:	4b0c      	ldr	r3, [pc, #48]	; (8004138 <EEPROM_write+0x174>)
	lcd_menu(1);
 8004106:	2001      	movs	r0, #1
	Menupos = 0;
 8004108:	701a      	strb	r2, [r3, #0]
	lcd_menu(1);
 800410a:	f7ff fdff 	bl	8003d0c <lcd_menu>
}
 800410e:	b007      	add	sp, #28
 8004110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004114:	20000014 	.word	0x20000014
 8004118:	200007a0 	.word	0x200007a0
 800411c:	20000b51 	.word	0x20000b51
 8004120:	200007f4 	.word	0x200007f4
 8004124:	08005b78 	.word	0x08005b78
 8004128:	200000b9 	.word	0x200000b9
 800412c:	08005b89 	.word	0x08005b89
 8004130:	08005b93 	.word	0x08005b93
 8004134:	08005ba3 	.word	0x08005ba3
 8004138:	200000ac 	.word	0x200000ac
 800413c:	20000018 	.word	0x20000018

08004140 <Min>:
		c = -c;
	return c;
}

int Min(int a, int b, int c) { //finds the minimum of 3 numbers entered
	if (a < b && a < c)
 8004140:	4288      	cmp	r0, r1
 8004142:	da04      	bge.n	800414e <Min+0xe>
 8004144:	4282      	cmp	r2, r0
 8004146:	bfa8      	it	ge
 8004148:	4602      	movge	r2, r0
		return a;
	else if (b < a && b < c)
		return b;
	else
		return c;
}
 800414a:	4610      	mov	r0, r2
 800414c:	4770      	bx	lr
	else if (b < a && b < c)
 800414e:	ddfc      	ble.n	800414a <Min+0xa>
 8004150:	428a      	cmp	r2, r1
 8004152:	bfa8      	it	ge
 8004154:	460a      	movge	r2, r1
 8004156:	e7f8      	b.n	800414a <Min+0xa>

08004158 <calc_DTW_score>:

int calc_DTW_score(int master_select) { //calculates DTW score between 2 time series
 8004158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800415c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8004160:	b08b      	sub	sp, #44	; 0x2c
 8004162:	af00      	add	r7, sp, #0
	int print_DTW = 0;       //1 to print DTW matrix, else 0
	int i;
	//creating variables to store input parameters
	int matrix_size = sample_size + 1;
	unsigned int a[matrix_size][matrix_size];    //matrix of DTW
 8004164:	f5ad 5d22 	sub.w	sp, sp, #10368	; 0x2880
 8004168:	b08a      	sub	sp, #40	; 0x28
 800416a:	466b      	mov	r3, sp
 800416c:	4a6c      	ldr	r2, [pc, #432]	; (8004320 <calc_DTW_score+0x1c8>)

		//**calculating DTW score**

		x = sample_size;
		y = sample_size;
		DTW_score[i] = a[x][y];
 800416e:	f50d 5a22 	add.w	sl, sp, #10368	; 0x2880
 8004172:	617a      	str	r2, [r7, #20]
 8004174:	4a6b      	ldr	r2, [pc, #428]	; (8004324 <calc_DTW_score+0x1cc>)
 8004176:	f107 0418 	add.w	r4, r7, #24
 800417a:	fb01 2b00 	mla	fp, r1, r0, r2
 800417e:	f50d 521c 	add.w	r2, sp, #9984	; 0x2700
 8004182:	320c      	adds	r2, #12
 8004184:	613a      	str	r2, [r7, #16]
 8004186:	f50d 521f 	add.w	r2, sp, #10176	; 0x27c0
 800418a:	321c      	adds	r2, #28
 800418c:	60fa      	str	r2, [r7, #12]
 800418e:	f10a 0a20 	add.w	sl, sl, #32
int calc_DTW_score(int master_select) { //calculates DTW score between 2 time series
 8004192:	2200      	movs	r2, #0
			a[x + 1][0] = master[master_select][i][x];
 8004194:	21cc      	movs	r1, #204	; 0xcc
 8004196:	fb01 3102 	mla	r1, r1, r2, r3
 800419a:	f85b 0022 	ldr.w	r0, [fp, r2, lsl #2]
 800419e:	3201      	adds	r2, #1
		for (x = 0; x < sample_size; x++)
 80041a0:	2a32      	cmp	r2, #50	; 0x32
			a[x + 1][0] = master[master_select][i][x];
 80041a2:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
		for (x = 0; x < sample_size; x++)
 80041a6:	d1f5      	bne.n	8004194 <calc_DTW_score+0x3c>
 80041a8:	2200      	movs	r2, #0
 80041aa:	1d19      	adds	r1, r3, #4
			a[0][y + 1] = temp_values[i][y];
 80041ac:	6978      	ldr	r0, [r7, #20]
 80041ae:	f930 0012 	ldrsh.w	r0, [r0, r2, lsl #1]
 80041b2:	3201      	adds	r2, #1
		for (y = 0; y < sample_size; y++)
 80041b4:	2a32      	cmp	r2, #50	; 0x32
			a[0][y + 1] = temp_values[i][y];
 80041b6:	f841 0b04 	str.w	r0, [r1], #4
		for (y = 0; y < sample_size; y++)
 80041ba:	d1f7      	bne.n	80041ac <calc_DTW_score+0x54>
		a[0][0] = 0;
 80041bc:	2200      	movs	r2, #0
		a[1][1] = abs_sub(a[1][0], a[0][1]);  //as no previously computed values
 80041be:	685d      	ldr	r5, [r3, #4]
		a[0][0] = 0;
 80041c0:	601a      	str	r2, [r3, #0]
		a[1][1] = abs_sub(a[1][0], a[0][1]);  //as no previously computed values
 80041c2:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
	int c = a - b;
 80041c6:	f8d3 1198 	ldr.w	r1, [r3, #408]	; 0x198
 80041ca:	1b50      	subs	r0, r2, r5
 80041cc:	1b49      	subs	r1, r1, r5
		a[1][1] = abs_sub(a[1][0], a[0][1]);  //as no previously computed values
 80041ce:	2800      	cmp	r0, #0
 80041d0:	bfb8      	it	lt
 80041d2:	4240      	neglt	r0, r0
		a[2][1] = abs_sub(a[2][0], a[0][1]);
 80041d4:	2900      	cmp	r1, #0
 80041d6:	bfb8      	it	lt
 80041d8:	4249      	neglt	r1, r1
 80041da:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
	int c = a - b;
 80041de:	6899      	ldr	r1, [r3, #8]
		a[1][1] = abs_sub(a[1][0], a[0][1]);  //as no previously computed values
 80041e0:	f8c3 00d0 	str.w	r0, [r3, #208]	; 0xd0
	int c = a - b;
 80041e4:	1a52      	subs	r2, r2, r1
		a[1][2] = abs_sub(a[1][0], a[0][2]);
 80041e6:	2a00      	cmp	r2, #0
 80041e8:	bfb8      	it	lt
 80041ea:	4252      	neglt	r2, r2
 80041ec:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80041f0:	f103 0208 	add.w	r2, r3, #8
 80041f4:	4616      	mov	r6, r2
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	f103 01cc 	add.w	r1, r3, #204	; 0xcc
			a[x][y] = abs_sub(a[x][0], a[0][y]) + a[x][y - 1];
 80041fc:	f856 0b04 	ldr.w	r0, [r6], #4
	int c = a - b;
 8004200:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8004204:	1a12      	subs	r2, r2, r0
			a[x][y] = abs_sub(a[x][0], a[0][y]) + a[x][y - 1];
 8004206:	2a00      	cmp	r2, #0
 8004208:	f8d6 00c4 	ldr.w	r0, [r6, #196]	; 0xc4
 800420c:	bfb8      	it	lt
 800420e:	4252      	neglt	r2, r2
 8004210:	4402      	add	r2, r0
		for (y = 2; y < matrix_size; y++) {
 8004212:	42b1      	cmp	r1, r6
			a[x][y] = abs_sub(a[x][0], a[0][y]) + a[x][y - 1];
 8004214:	f8c6 20c8 	str.w	r2, [r6, #200]	; 0xc8
		for (y = 2; y < matrix_size; y++) {
 8004218:	d1f0      	bne.n	80041fc <calc_DTW_score+0xa4>
 800421a:	4619      	mov	r1, r3
	int c = a - b;
 800421c:	f8d1 2198 	ldr.w	r2, [r1, #408]	; 0x198
 8004220:	6858      	ldr	r0, [r3, #4]
 8004222:	31cc      	adds	r1, #204	; 0xcc
 8004224:	1a12      	subs	r2, r2, r0
			a[x][y] = abs_sub(a[x][0], a[0][y]) + a[x - 1][y];
 8004226:	2a00      	cmp	r2, #0
 8004228:	6848      	ldr	r0, [r1, #4]
 800422a:	bfb8      	it	lt
 800422c:	4252      	neglt	r2, r2
 800422e:	4402      	add	r2, r0
 8004230:	f8c1 20d0 	str.w	r2, [r1, #208]	; 0xd0
		for (x = 2; x < matrix_size; x++) {
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	428a      	cmp	r2, r1
 8004238:	d1f0      	bne.n	800421c <calc_DTW_score+0xc4>
 800423a:	f103 08d0 	add.w	r8, r3, #208	; 0xd0
		a[1][2] = abs_sub(a[1][0], a[0][2]);
 800423e:	46c1      	mov	r9, r8
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	60ba      	str	r2, [r7, #8]
				a[x][y] = abs_sub(a[x][0], a[0][y])
 8004244:	68ba      	ldr	r2, [r7, #8]
	int c = a - b;
 8004246:	f8d8 50c8 	ldr.w	r5, [r8, #200]	; 0xc8
				a[x][y] = abs_sub(a[x][0], a[0][y])
 800424a:	f852 0b04 	ldr.w	r0, [r2], #4
	int c = a - b;
 800424e:	1a2d      	subs	r5, r5, r0
 8004250:	4648      	mov	r0, r9
				a[x][y] = abs_sub(a[x][0], a[0][y])
 8004252:	60ba      	str	r2, [r7, #8]
								+ Min(a[x][y - 1], a[x - 1][y], a[x - 1][y - 1]);
 8004254:	6841      	ldr	r1, [r0, #4]
 8004256:	6802      	ldr	r2, [r0, #0]
 8004258:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
 800425c:	f7ff ff70 	bl	8004140 <Min>
 8004260:	2d00      	cmp	r5, #0
			for (y = 2; y < matrix_size; y++) {
 8004262:	68ba      	ldr	r2, [r7, #8]
								+ Min(a[x][y - 1], a[x - 1][y], a[x - 1][y - 1]);
 8004264:	bfb8      	it	lt
 8004266:	426d      	neglt	r5, r5
 8004268:	f109 0904 	add.w	r9, r9, #4
 800426c:	4405      	add	r5, r0
			for (y = 2; y < matrix_size; y++) {
 800426e:	4296      	cmp	r6, r2
				a[x][y] = abs_sub(a[x][0], a[0][y])
 8004270:	f8c9 50cc 	str.w	r5, [r9, #204]	; 0xcc
			for (y = 2; y < matrix_size; y++) {
 8004274:	d1e6      	bne.n	8004244 <calc_DTW_score+0xec>
		for (x = 2; x < matrix_size; x++) {
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	f108 08cc 	add.w	r8, r8, #204	; 0xcc
 800427c:	4542      	cmp	r2, r8
 800427e:	d1de      	bne.n	800423e <calc_DTW_score+0xe6>
		DTW_score[i] = a[x][y];
 8004280:	f8da 2000 	ldr.w	r2, [sl]
 8004284:	f844 2f04 	str.w	r2, [r4, #4]!
		y = sample_size;
 8004288:	2232      	movs	r2, #50	; 0x32
		x = sample_size;
 800428a:	4615      	mov	r5, r2

		while (x != 0 && y != 0) {
			if (a[x - 1][y - 1] <= a[x][y - 1]
 800428c:	2133      	movs	r1, #51	; 0x33
 800428e:	1e6e      	subs	r6, r5, #1
 8004290:	fb01 f806 	mul.w	r8, r1, r6
 8004294:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
 8004298:	eb08 010e 	add.w	r1, r8, lr
 800429c:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 80042a0:	2133      	movs	r1, #51	; 0x33
 80042a2:	fb01 e105 	mla	r1, r1, r5, lr
 80042a6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80042aa:	6821      	ldr	r1, [r4, #0]
 80042ac:	4584      	cmp	ip, r0
 80042ae:	d80b      	bhi.n	80042c8 <calc_DTW_score+0x170>
										&& a[x - 1][y - 1] <= a[x - 1][y]) {
 80042b0:	4490      	add	r8, r2
 80042b2:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
 80042b6:	45c4      	cmp	ip, r8
 80042b8:	d804      	bhi.n	80042c4 <calc_DTW_score+0x16c>
				DTW_score[i] = DTW_score[i] + a[x - 1][y - 1];
				x--;
				y--;
 80042ba:	4672      	mov	r2, lr
				DTW_score[i] = DTW_score[i] + a[x - 1][y - 1];
 80042bc:	4461      	add	r1, ip
 80042be:	6021      	str	r1, [r4, #0]
											 && a[x][y - 1] <= a[x - 1][y]) {
				DTW_score[i] = DTW_score[i] + a[x][y - 1];
				y--;
			} else {
				DTW_score[i] = DTW_score[i] + a[x - 1][y];
				x--;
 80042c0:	4635      	mov	r5, r6
 80042c2:	e00c      	b.n	80042de <calc_DTW_score+0x186>
			else if (a[x][y - 1] <= a[x - 1][y - 1]
 80042c4:	4584      	cmp	ip, r0
 80042c6:	d323      	bcc.n	8004310 <calc_DTW_score+0x1b8>
											 && a[x][y - 1] <= a[x - 1][y]) {
 80042c8:	f04f 0c33 	mov.w	ip, #51	; 0x33
 80042cc:	fb0c 2c06 	mla	ip, ip, r6, r2
 80042d0:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 80042d4:	4560      	cmp	r0, ip
 80042d6:	d81b      	bhi.n	8004310 <calc_DTW_score+0x1b8>
				y--;
 80042d8:	4672      	mov	r2, lr
				DTW_score[i] = DTW_score[i] + a[x][y - 1];
 80042da:	4401      	add	r1, r0
 80042dc:	6021      	str	r1, [r4, #0]
		while (x != 0 && y != 0) {
 80042de:	b10d      	cbz	r5, 80042e4 <calc_DTW_score+0x18c>
 80042e0:	2a00      	cmp	r2, #0
 80042e2:	d1d3      	bne.n	800428c <calc_DTW_score+0x134>
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	f10b 0bc8 	add.w	fp, fp, #200	; 0xc8
 80042ea:	3264      	adds	r2, #100	; 0x64
 80042ec:	617a      	str	r2, [r7, #20]
	for (i = 0; i < DOF; i++) {
 80042ee:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80042f2:	42a2      	cmp	r2, r4
 80042f4:	f47f af4d 	bne.w	8004192 <calc_DTW_score+0x3a>
			}
		}
	}
	for (i = 0; i < DOF; i++)
		final_DTW_score = final_DTW_score + DTW_score[i];
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	69f8      	ldr	r0, [r7, #28]
 80042fc:	4418      	add	r0, r3
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	final_DTW_score = final_DTW_score / DOF;
	return final_DTW_score;
}
 8004300:	372c      	adds	r7, #44	; 0x2c
		final_DTW_score = final_DTW_score + DTW_score[i];
 8004302:	4418      	add	r0, r3
}
 8004304:	2303      	movs	r3, #3
 8004306:	fbb0 f0f3 	udiv	r0, r0, r3
 800430a:	46bd      	mov	sp, r7
 800430c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				DTW_score[i] = DTW_score[i] + a[x - 1][y];
 8004310:	2033      	movs	r0, #51	; 0x33
 8004312:	fb00 2006 	mla	r0, r0, r6, r2
 8004316:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800431a:	4401      	add	r1, r0
 800431c:	6021      	str	r1, [r4, #0]
 800431e:	e7cf      	b.n	80042c0 <calc_DTW_score+0x168>
 8004320:	200007f4 	.word	0x200007f4
 8004324:	20000b58 	.word	0x20000b58

08004328 <TIM1_UP_IRQHandler>:

void TIM1_UP_IRQHandler(void) {
 8004328:	b508      	push	{r3, lr}
	/* USER CODE BEGIN TIM3_IRQn 0 */

	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim1);
 800432a:	4808      	ldr	r0, [pc, #32]	; (800434c <TIM1_UP_IRQHandler+0x24>)
 800432c:	f7fe fab6 	bl	800289c <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM3_IRQn 1 */

	TIM_Pulse++;
 8004330:	4a07      	ldr	r2, [pc, #28]	; (8004350 <TIM1_UP_IRQHandler+0x28>)
 8004332:	6813      	ldr	r3, [r2, #0]
 8004334:	3301      	adds	r3, #1
 8004336:	6013      	str	r3, [r2, #0]
	Giro_Pulse++;
 8004338:	4a06      	ldr	r2, [pc, #24]	; (8004354 <TIM1_UP_IRQHandler+0x2c>)
 800433a:	6813      	ldr	r3, [r2, #0]
 800433c:	3301      	adds	r3, #1
 800433e:	6013      	str	r3, [r2, #0]
	TIM2->CCR1 = Diod_Pulse;
 8004340:	4b05      	ldr	r3, [pc, #20]	; (8004358 <TIM1_UP_IRQHandler+0x30>)
 8004342:	881a      	ldrh	r2, [r3, #0]
 8004344:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004348:	635a      	str	r2, [r3, #52]	; 0x34
 800434a:	bd08      	pop	{r3, pc}
 800434c:	20000a94 	.word	0x20000a94
 8004350:	200000b0 	.word	0x200000b0
 8004354:	200000a8 	.word	0x200000a8
 8004358:	200000a4 	.word	0x200000a4

0800435c <I2C_WriteBuffer>:

	/* USER CODE END TIM3_IRQn 1 */
}

void I2C_WriteBuffer(uint8_t I2C_ADDRESS, uint8_t *aTxBuffer,
		uint8_t TXBUFFERSIZE) {
 800435c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004360:	460d      	mov	r5, r1
	while (HAL_I2C_Master_Transmit(&hi2c2, (uint16_t) I2C_ADDRESS << 1,
 8004362:	4616      	mov	r6, r2
 8004364:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 8004368:	f8df 802c 	ldr.w	r8, [pc, #44]	; 8004398 <I2C_WriteBuffer+0x3c>
 800436c:	0044      	lsls	r4, r0, #1
 800436e:	9700      	str	r7, [sp, #0]
 8004370:	4633      	mov	r3, r6
 8004372:	462a      	mov	r2, r5
 8004374:	4621      	mov	r1, r4
 8004376:	4808      	ldr	r0, [pc, #32]	; (8004398 <I2C_WriteBuffer+0x3c>)
 8004378:	f7fd f9e8 	bl	800174c <HAL_I2C_Master_Transmit>
 800437c:	b940      	cbnz	r0, 8004390 <I2C_WriteBuffer+0x34>
			//   _Error_Handler(__FILE__, aTxBuffer[0]);
		}

	}

	while (HAL_I2C_GetState(&hi2c2) != HAL_I2C_STATE_READY) {
 800437e:	4c06      	ldr	r4, [pc, #24]	; (8004398 <I2C_WriteBuffer+0x3c>)
 8004380:	4620      	mov	r0, r4
 8004382:	f7fd fea1 	bl	80020c8 <HAL_I2C_GetState>
 8004386:	2820      	cmp	r0, #32
 8004388:	d1fa      	bne.n	8004380 <I2C_WriteBuffer+0x24>
	}
}
 800438a:	b002      	add	sp, #8
 800438c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (HAL_I2C_GetError(&hi2c2) != HAL_I2C_ERROR_AF) {
 8004390:	4640      	mov	r0, r8
 8004392:	f7fd fe9c 	bl	80020ce <HAL_I2C_GetError>
 8004396:	e7ea      	b.n	800436e <I2C_WriteBuffer+0x12>
 8004398:	200007a0 	.word	0x200007a0

0800439c <I2C_ReadBuffer>:

void I2C_ReadBuffer(uint8_t I2C_ADDRESS, uint8_t RegAddr, uint8_t *aRxBuffer,
		uint8_t RXBUFFERSIZE) {
 800439c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80043a0:	461d      	mov	r5, r3
 80043a2:	ab04      	add	r3, sp, #16
 80043a4:	f803 1d01 	strb.w	r1, [r3, #-1]!
 80043a8:	4604      	mov	r4, r0
 80043aa:	4616      	mov	r6, r2

	I2C_WriteBuffer(I2C_ADDRESS, &RegAddr, 1);
 80043ac:	4619      	mov	r1, r3
 80043ae:	2201      	movs	r2, #1
 80043b0:	f7ff ffd4 	bl	800435c <I2C_WriteBuffer>

	while (HAL_I2C_Master_Receive(&hi2c2, (uint16_t) I2C_ADDRESS << 1,
 80043b4:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 80043b8:	f8df 8030 	ldr.w	r8, [pc, #48]	; 80043ec <I2C_ReadBuffer+0x50>
 80043bc:	0064      	lsls	r4, r4, #1
 80043be:	b2ad      	uxth	r5, r5
 80043c0:	9700      	str	r7, [sp, #0]
 80043c2:	462b      	mov	r3, r5
 80043c4:	4632      	mov	r2, r6
 80043c6:	4621      	mov	r1, r4
 80043c8:	4808      	ldr	r0, [pc, #32]	; (80043ec <I2C_ReadBuffer+0x50>)
 80043ca:	f7fd fa95 	bl	80018f8 <HAL_I2C_Master_Receive>
 80043ce:	b940      	cbnz	r0, 80043e2 <I2C_ReadBuffer+0x46>
		if (HAL_I2C_GetError(&hi2c2) != HAL_I2C_ERROR_AF) {
			//  _Error_Handler(__FILE__, __LINE__);
		}
	}

	while (HAL_I2C_GetState(&hi2c2) != HAL_I2C_STATE_READY) {
 80043d0:	4c06      	ldr	r4, [pc, #24]	; (80043ec <I2C_ReadBuffer+0x50>)
 80043d2:	4620      	mov	r0, r4
 80043d4:	f7fd fe78 	bl	80020c8 <HAL_I2C_GetState>
 80043d8:	2820      	cmp	r0, #32
 80043da:	d1fa      	bne.n	80043d2 <I2C_ReadBuffer+0x36>
	}
}
 80043dc:	b004      	add	sp, #16
 80043de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (HAL_I2C_GetError(&hi2c2) != HAL_I2C_ERROR_AF) {
 80043e2:	4640      	mov	r0, r8
 80043e4:	f7fd fe73 	bl	80020ce <HAL_I2C_GetError>
 80043e8:	e7ea      	b.n	80043c0 <I2C_ReadBuffer+0x24>
 80043ea:	bf00      	nop
 80043ec:	200007a0 	.word	0x200007a0

080043f0 <MPU6050_Init>:
void MPU6050_Init(void) {

	uint8_t buffer[7];

	// включение/побудка модуля
	buffer[0] = MPU6050_RA_PWR_MGMT_1;
 80043f0:	236b      	movs	r3, #107	; 0x6b
void MPU6050_Init(void) {
 80043f2:	b507      	push	{r0, r1, r2, lr}
	buffer[0] = MPU6050_RA_PWR_MGMT_1;
 80043f4:	f88d 3000 	strb.w	r3, [sp]
	buffer[1] = 0x00;
 80043f8:	2300      	movs	r3, #0
	I2C_WriteBuffer(MPU6050_ADDRESS_AD0_LOW, buffer, 2);
 80043fa:	4669      	mov	r1, sp
 80043fc:	2202      	movs	r2, #2
 80043fe:	2068      	movs	r0, #104	; 0x68
	buffer[1] = 0x00;
 8004400:	f88d 3001 	strb.w	r3, [sp, #1]
	I2C_WriteBuffer(MPU6050_ADDRESS_AD0_LOW, buffer, 2);
 8004404:	f7ff ffaa 	bl	800435c <I2C_WriteBuffer>

	// конфиг гироскопа на ±500°/с
	buffer[0] = MPU6050_RA_GYRO_CONFIG;
 8004408:	231b      	movs	r3, #27
 800440a:	f88d 3000 	strb.w	r3, [sp]
	buffer[1] = 0x8;
 800440e:	2308      	movs	r3, #8
	I2C_WriteBuffer(MPU6050_ADDRESS_AD0_LOW, buffer, 2);
 8004410:	4669      	mov	r1, sp
 8004412:	2202      	movs	r2, #2
 8004414:	2068      	movs	r0, #104	; 0x68
	buffer[1] = 0x8;
 8004416:	f88d 3001 	strb.w	r3, [sp, #1]
	I2C_WriteBuffer(MPU6050_ADDRESS_AD0_LOW, buffer, 2);
 800441a:	f7ff ff9f 	bl	800435c <I2C_WriteBuffer>

	// конфиг акселерометра на ±8g
	buffer[0] = MPU6050_RA_ACCEL_CONFIG;
 800441e:	231c      	movs	r3, #28
 8004420:	f88d 3000 	strb.w	r3, [sp]
	buffer[1] = 0x10;
 8004424:	2310      	movs	r3, #16
	I2C_WriteBuffer(MPU6050_ADDRESS_AD0_LOW, buffer, 2);
 8004426:	2202      	movs	r2, #2
 8004428:	4669      	mov	r1, sp
 800442a:	2068      	movs	r0, #104	; 0x68
	buffer[1] = 0x10;
 800442c:	f88d 3001 	strb.w	r3, [sp, #1]
	I2C_WriteBuffer(MPU6050_ADDRESS_AD0_LOW, buffer, 2);
 8004430:	f7ff ff94 	bl	800435c <I2C_WriteBuffer>
}
 8004434:	b003      	add	sp, #12
 8004436:	f85d fb04 	ldr.w	pc, [sp], #4

0800443a <MPU6050_GetAllData>:
	fAY_Cal /= iNumCM;
	fAZ_Cal /= iNumCM;

}

void MPU6050_GetAllData(int16_t *Data) {
 800443a:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	uint8_t accelbuffer[14];

	// с 0x3B 14 следующих регистров содержат данные измерения модуля
	I2C_ReadBuffer(MPU6050_ADDRESS_AD0_LOW, MPU6050_RA_ACCEL_XOUT_H,
 800443c:	230e      	movs	r3, #14
 800443e:	213b      	movs	r1, #59	; 0x3b
void MPU6050_GetAllData(int16_t *Data) {
 8004440:	4604      	mov	r4, r0
	I2C_ReadBuffer(MPU6050_ADDRESS_AD0_LOW, MPU6050_RA_ACCEL_XOUT_H,
 8004442:	466a      	mov	r2, sp
 8004444:	2068      	movs	r0, #104	; 0x68
 8004446:	f7ff ffa9 	bl	800439c <I2C_ReadBuffer>
 800444a:	2300      	movs	r3, #0
			accelbuffer, 14);

	/* Registers 59 to 64 – Accelerometer Measurements */
	for (int i = 0; i < 3; i++)
		Data[i] = (((int16_t) ((uint16_t) accelbuffer[2 * i] << 8)
				+ accelbuffer[2 * i + 1])) / 10;
 800444c:	210a      	movs	r1, #10
 800444e:	eb0d 0203 	add.w	r2, sp, r3
		Data[i] = (((int16_t) ((uint16_t) accelbuffer[2 * i] << 8)
 8004452:	f91d 0003 	ldrsb.w	r0, [sp, r3]
				+ accelbuffer[2 * i + 1])) / 10;
 8004456:	7852      	ldrb	r2, [r2, #1]
 8004458:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 800445c:	fb92 f2f1 	sdiv	r2, r2, r1
		Data[i] = (((int16_t) ((uint16_t) accelbuffer[2 * i] << 8)
 8004460:	52e2      	strh	r2, [r4, r3]
 8004462:	3302      	adds	r3, #2
	for (int i = 0; i < 3; i++)
 8004464:	2b06      	cmp	r3, #6
 8004466:	d1f2      	bne.n	800444e <MPU6050_GetAllData+0x14>

	/* Registers 65 and 66 – Temperature Measurement */
	//пока пропускаем Temperature in degrees C = (TEMP_OUT Register Value as a signed quantity)/340 + 36.53
	/* Registers 67 to 72 – Gyroscope Measurements */
	for (int i = 4; i < 7; i++)
		Data[i - 1] = ((int16_t) ((uint16_t) accelbuffer[2 * i] << 8)
 8004468:	f89d 2008 	ldrb.w	r2, [sp, #8]
				+ accelbuffer[2 * i + 1]);
 800446c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8004470:	eb03 2302 	add.w	r3, r3, r2, lsl #8
		Data[i - 1] = ((int16_t) ((uint16_t) accelbuffer[2 * i] << 8)
 8004474:	80e3      	strh	r3, [r4, #6]
 8004476:	f89d 200a 	ldrb.w	r2, [sp, #10]
				+ accelbuffer[2 * i + 1]);
 800447a:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800447e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
		Data[i - 1] = ((int16_t) ((uint16_t) accelbuffer[2 * i] << 8)
 8004482:	8123      	strh	r3, [r4, #8]
 8004484:	f89d 200c 	ldrb.w	r2, [sp, #12]
				+ accelbuffer[2 * i + 1]);
 8004488:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800448c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
		Data[i - 1] = ((int16_t) ((uint16_t) accelbuffer[2 * i] << 8)
 8004490:	8163      	strh	r3, [r4, #10]

}
 8004492:	b004      	add	sp, #16
 8004494:	bd10      	pop	{r4, pc}
	...

08004498 <MPU6050_Calibrate>:
void MPU6050_Calibrate(void) {
 8004498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800449a:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
		fAX_Cal += mpu6050data[0];
 800449e:	4e1a      	ldr	r6, [pc, #104]	; (8004508 <MPU6050_Calibrate+0x70>)
		fAY_Cal += mpu6050data[1];
 80044a0:	4d1a      	ldr	r5, [pc, #104]	; (800450c <MPU6050_Calibrate+0x74>)
		fAZ_Cal += mpu6050data[2];
 80044a2:	4c1b      	ldr	r4, [pc, #108]	; (8004510 <MPU6050_Calibrate+0x78>)
void MPU6050_Calibrate(void) {
 80044a4:	b085      	sub	sp, #20
		MPU6050_GetAllData(mpu6050data);
 80044a6:	a801      	add	r0, sp, #4
 80044a8:	f7ff ffc7 	bl	800443a <MPU6050_GetAllData>
		fAX_Cal += mpu6050data[0];
 80044ac:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 80044b0:	f7fc fb82 	bl	8000bb8 <__aeabi_i2f>
 80044b4:	6831      	ldr	r1, [r6, #0]
 80044b6:	f7fc facb 	bl	8000a50 <__addsf3>
 80044ba:	6030      	str	r0, [r6, #0]
		fAY_Cal += mpu6050data[1];
 80044bc:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 80044c0:	f7fc fb7a 	bl	8000bb8 <__aeabi_i2f>
 80044c4:	6829      	ldr	r1, [r5, #0]
 80044c6:	f7fc fac3 	bl	8000a50 <__addsf3>
 80044ca:	6028      	str	r0, [r5, #0]
		fAZ_Cal += mpu6050data[2];
 80044cc:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 80044d0:	f7fc fb72 	bl	8000bb8 <__aeabi_i2f>
 80044d4:	6821      	ldr	r1, [r4, #0]
 80044d6:	f7fc fabb 	bl	8000a50 <__addsf3>
 80044da:	6020      	str	r0, [r4, #0]
		HAL_Delay(3); // 3 сек на калибровку
 80044dc:	2003      	movs	r0, #3
 80044de:	f7fc fd7d 	bl	8000fdc <HAL_Delay>
	for (int i = 0; i < iNumCM; i++) {
 80044e2:	3f01      	subs	r7, #1
 80044e4:	d1df      	bne.n	80044a6 <MPU6050_Calibrate+0xe>
	fAX_Cal /= iNumCM;
 80044e6:	6830      	ldr	r0, [r6, #0]
 80044e8:	490a      	ldr	r1, [pc, #40]	; (8004514 <MPU6050_Calibrate+0x7c>)
 80044ea:	f7fc fc6d 	bl	8000dc8 <__aeabi_fdiv>
	fAY_Cal /= iNumCM;
 80044ee:	4909      	ldr	r1, [pc, #36]	; (8004514 <MPU6050_Calibrate+0x7c>)
	fAX_Cal /= iNumCM;
 80044f0:	6030      	str	r0, [r6, #0]
	fAY_Cal /= iNumCM;
 80044f2:	6828      	ldr	r0, [r5, #0]
 80044f4:	f7fc fc68 	bl	8000dc8 <__aeabi_fdiv>
	fAZ_Cal /= iNumCM;
 80044f8:	4906      	ldr	r1, [pc, #24]	; (8004514 <MPU6050_Calibrate+0x7c>)
	fAY_Cal /= iNumCM;
 80044fa:	6028      	str	r0, [r5, #0]
	fAZ_Cal /= iNumCM;
 80044fc:	6820      	ldr	r0, [r4, #0]
 80044fe:	f7fc fc63 	bl	8000dc8 <__aeabi_fdiv>
 8004502:	6020      	str	r0, [r4, #0]
}
 8004504:	b005      	add	sp, #20
 8004506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004508:	20000b54 	.word	0x20000b54
 800450c:	20000930 	.word	0x20000930
 8004510:	20000950 	.word	0x20000950
 8004514:	43fa0000 	.word	0x43fa0000

08004518 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004518:	b510      	push	{r4, lr}
 800451a:	b090      	sub	sp, #64	; 0x40
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800451c:	2228      	movs	r2, #40	; 0x28
 800451e:	2100      	movs	r1, #0
 8004520:	a806      	add	r0, sp, #24
 8004522:	f000 feeb 	bl	80052fc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004526:	2100      	movs	r1, #0
 8004528:	2214      	movs	r2, #20
 800452a:	a801      	add	r0, sp, #4
 800452c:	f000 fee6 	bl	80052fc <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004530:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004534:	2201      	movs	r2, #1
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004536:	2402      	movs	r4, #2
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004538:	9307      	str	r3, [sp, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800453a:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800453c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004540:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004542:	9206      	str	r2, [sp, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004544:	920a      	str	r2, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004546:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004548:	940d      	str	r4, [sp, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800454a:	f7fd fdc3 	bl	80020d4 <HAL_RCC_OscConfig>
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800454e:	230f      	movs	r3, #15
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004550:	f44f 6280 	mov.w	r2, #1024	; 0x400
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004554:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004556:	2300      	movs	r3, #0
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8004558:	4621      	mov	r1, r4
 800455a:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800455c:	9402      	str	r4, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800455e:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004560:	9204      	str	r2, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004562:	9305      	str	r3, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8004564:	f7fd ff7e 	bl	8002464 <HAL_RCC_ClockConfig>
		Error_Handler();
	}
}
 8004568:	b010      	add	sp, #64	; 0x40
 800456a:	bd10      	pop	{r4, pc}

0800456c <main>:
int main(void) {
 800456c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004570:	2600      	movs	r6, #0
int main(void) {
 8004572:	b097      	sub	sp, #92	; 0x5c
	HAL_Init();
 8004574:	f7fc fd0e 	bl	8000f94 <HAL_Init>
	SystemClock_Config();
 8004578:	f7ff ffce 	bl	8004518 <SystemClock_Config>
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800457c:	2210      	movs	r2, #16
 800457e:	2100      	movs	r1, #0
 8004580:	a80b      	add	r0, sp, #44	; 0x2c
 8004582:	f000 febb 	bl	80052fc <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8004586:	221c      	movs	r2, #28
 8004588:	4631      	mov	r1, r6
 800458a:	a80f      	add	r0, sp, #60	; 0x3c
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800458c:	9609      	str	r6, [sp, #36]	; 0x24
 800458e:	960a      	str	r6, [sp, #40]	; 0x28
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8004590:	f000 feb4 	bl	80052fc <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8004594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004598:	4dc2      	ldr	r5, [pc, #776]	; (80048a4 <main+0x338>)
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
		Error_Handler();
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800459a:	f44f 5880 	mov.w	r8, #4096	; 0x1000
	htim2.Init.Prescaler = 0;
 800459e:	e885 0048 	stmia.w	r5, {r3, r6}
	htim2.Init.Period = 6000;
 80045a2:	f241 7370 	movw	r3, #6000	; 0x1770
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80045a6:	4628      	mov	r0, r5
	htim2.Init.Period = 6000;
 80045a8:	60eb      	str	r3, [r5, #12]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045aa:	60ae      	str	r6, [r5, #8]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045ac:	612e      	str	r6, [r5, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045ae:	61ae      	str	r6, [r5, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80045b0:	f7fe fa4e 	bl	8002a50 <HAL_TIM_Base_Init>
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80045b4:	a90b      	add	r1, sp, #44	; 0x2c
 80045b6:	4628      	mov	r0, r5
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045b8:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80045bc:	f7fe f8b1 	bl	8002722 <HAL_TIM_ConfigClockSource>
		Error_Handler();
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80045c0:	4628      	mov	r0, r5
 80045c2:	f7fe fa5f 	bl	8002a84 <HAL_TIM_PWM_Init>
		Error_Handler();
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80045c6:	a909      	add	r1, sp, #36	; 0x24
 80045c8:	4628      	mov	r0, r5
			!= HAL_OK) {
		Error_Handler();
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
	sConfigOC.Pulse = 30000;
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80045ca:	2702      	movs	r7, #2
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80045cc:	f04f 0960 	mov.w	r9, #96	; 0x60
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045d0:	9609      	str	r6, [sp, #36]	; 0x24
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045d2:	960a      	str	r6, [sp, #40]	; 0x28
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80045d4:	f7fe fb84 	bl	8002ce0 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.Pulse = 30000;
 80045d8:	f247 5330 	movw	r3, #30000	; 0x7530
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 80045dc:	4632      	mov	r2, r6
 80045de:	a90f      	add	r1, sp, #60	; 0x3c
 80045e0:	4628      	mov	r0, r5
	sConfigOC.Pulse = 30000;
 80045e2:	9310      	str	r3, [sp, #64]	; 0x40
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80045e4:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80045e8:	9711      	str	r7, [sp, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80045ea:	9613      	str	r6, [sp, #76]	; 0x4c
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 80045ec:	f7fe fa90 	bl	8002b10 <HAL_TIM_PWM_ConfigChannel>
			!= HAL_OK) {
		Error_Handler();
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 80045f0:	2204      	movs	r2, #4
 80045f2:	a90f      	add	r1, sp, #60	; 0x3c
 80045f4:	4628      	mov	r0, r5
 80045f6:	f7fe fa8b 	bl	8002b10 <HAL_TIM_PWM_ConfigChannel>
			!= HAL_OK) {
		Error_Handler();
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 80045fa:	2208      	movs	r2, #8
 80045fc:	a90f      	add	r1, sp, #60	; 0x3c
 80045fe:	4628      	mov	r0, r5
 8004600:	f7fe fa86 	bl	8002b10 <HAL_TIM_PWM_ConfigChannel>
		Error_Handler();
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8004604:	4628      	mov	r0, r5
 8004606:	f000 fd55 	bl	80050b4 <HAL_TIM_MspPostInit>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800460a:	22f0      	movs	r2, #240	; 0xf0
 800460c:	4ba6      	ldr	r3, [pc, #664]	; (80048a8 <main+0x33c>)
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 800460e:	4631      	mov	r1, r6
 8004610:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
 8004614:	4628      	mov	r0, r5
 8004616:	f7fe fb2d 	bl	8002c74 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 800461a:	2104      	movs	r1, #4
 800461c:	4628      	mov	r0, r5
 800461e:	f7fe fb29 	bl	8002c74 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8004622:	2108      	movs	r1, #8
 8004624:	4628      	mov	r0, r5
 8004626:	f7fe fb25 	bl	8002c74 <HAL_TIM_PWM_Start_IT>
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800462a:	2210      	movs	r2, #16
 800462c:	4631      	mov	r1, r6
 800462e:	a80f      	add	r0, sp, #60	; 0x3c
 8004630:	f000 fe64 	bl	80052fc <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8004634:	4b9d      	ldr	r3, [pc, #628]	; (80048ac <main+0x340>)
	;
	__HAL_RCC_GPIOC_CLK_ENABLE()
	;

	/*Configure GPIO pin : PC14 */
	GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004636:	f44f 4580 	mov.w	r5, #16384	; 0x4000
	__HAL_RCC_GPIOD_CLK_ENABLE()
 800463a:	699a      	ldr	r2, [r3, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800463c:	a90f      	add	r1, sp, #60	; 0x3c
	__HAL_RCC_GPIOD_CLK_ENABLE()
 800463e:	f042 0220 	orr.w	r2, r2, #32
 8004642:	619a      	str	r2, [r3, #24]
 8004644:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004646:	489a      	ldr	r0, [pc, #616]	; (80048b0 <main+0x344>)
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8004648:	f002 0220 	and.w	r2, r2, #32
 800464c:	9205      	str	r2, [sp, #20]
 800464e:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8004650:	699a      	ldr	r2, [r3, #24]
	ssd1306_WriteString("Start init mpu. ", Font_7x10, White);
 8004652:	f8df a2a8 	ldr.w	sl, [pc, #680]	; 80048fc <main+0x390>
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8004656:	f042 0204 	orr.w	r2, r2, #4
 800465a:	619a      	str	r2, [r3, #24]
 800465c:	699a      	ldr	r2, [r3, #24]
 800465e:	f002 0204 	and.w	r2, r2, #4
 8004662:	9206      	str	r2, [sp, #24]
 8004664:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8004666:	699a      	ldr	r2, [r3, #24]
 8004668:	f042 0208 	orr.w	r2, r2, #8
 800466c:	619a      	str	r2, [r3, #24]
 800466e:	699a      	ldr	r2, [r3, #24]
 8004670:	f002 0208 	and.w	r2, r2, #8
 8004674:	9207      	str	r2, [sp, #28]
 8004676:	9a07      	ldr	r2, [sp, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	f042 0210 	orr.w	r2, r2, #16
 800467e:	619a      	str	r2, [r3, #24]
 8004680:	699b      	ldr	r3, [r3, #24]
	GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004682:	950f      	str	r5, [sp, #60]	; 0x3c
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8004684:	f003 0310 	and.w	r3, r3, #16
 8004688:	9308      	str	r3, [sp, #32]
 800468a:	9b08      	ldr	r3, [sp, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800468c:	f7fc fd2e 	bl	80010ec <HAL_GPIO_Init>

	/*Configure GPIO pin : PC14 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004690:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004694:	a90f      	add	r1, sp, #60	; 0x3c
 8004696:	4886      	ldr	r0, [pc, #536]	; (80048b0 <main+0x344>)
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004698:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800469a:	9610      	str	r6, [sp, #64]	; 0x40
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800469c:	9611      	str	r6, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800469e:	f7fc fd25 	bl	80010ec <HAL_GPIO_Init>

	/*Configure GPIO pin : recive_IR_Pin */
	GPIO_InitStruct.Pin = recive_IR_Pin;
 80046a2:	2320      	movs	r3, #32
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(recive_IR_GPIO_Port, &GPIO_InitStruct);
 80046a4:	a90f      	add	r1, sp, #60	; 0x3c
 80046a6:	4883      	ldr	r0, [pc, #524]	; (80048b4 <main+0x348>)
	GPIO_InitStruct.Pin = recive_IR_Pin;
 80046a8:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80046aa:	9610      	str	r6, [sp, #64]	; 0x40
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ac:	9611      	str	r6, [sp, #68]	; 0x44
	HAL_GPIO_Init(recive_IR_GPIO_Port, &GPIO_InitStruct);
 80046ae:	f7fc fd1d 	bl	80010ec <HAL_GPIO_Init>
	hi2c2.Instance = I2C2;
 80046b2:	4881      	ldr	r0, [pc, #516]	; (80048b8 <main+0x34c>)
	hi2c2.Init.ClockSpeed = 100000;
 80046b4:	4a81      	ldr	r2, [pc, #516]	; (80048bc <main+0x350>)
 80046b6:	4b82      	ldr	r3, [pc, #520]	; (80048c0 <main+0x354>)
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80046b8:	6105      	str	r5, [r0, #16]
	hi2c2.Init.ClockSpeed = 100000;
 80046ba:	e880 000c 	stmia.w	r0, {r2, r3}
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80046be:	6086      	str	r6, [r0, #8]
	hi2c2.Init.OwnAddress1 = 0;
 80046c0:	60c6      	str	r6, [r0, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80046c2:	6146      	str	r6, [r0, #20]
	hi2c2.Init.OwnAddress2 = 0;
 80046c4:	6186      	str	r6, [r0, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80046c6:	61c6      	str	r6, [r0, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80046c8:	6206      	str	r6, [r0, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80046ca:	f7fc ffbf 	bl	800164c <HAL_I2C_Init>
	ssd1306_Init();
 80046ce:	f000 fb65 	bl	8004d9c <ssd1306_Init>
	ssd1306_Fill(Black);
 80046d2:	4630      	mov	r0, r6
 80046d4:	f000 fb3a 	bl	8004d4c <ssd1306_Fill>
	ssd1306_SetCursor(2, 0);
 80046d8:	4631      	mov	r1, r6
 80046da:	4638      	mov	r0, r7
 80046dc:	f000 fc4a 	bl	8004f74 <ssd1306_SetCursor>
	ssd1306_WriteString("Start init mpu. ", Font_7x10, White);
 80046e0:	e89a 0006 	ldmia.w	sl, {r1, r2}
 80046e4:	2301      	movs	r3, #1
 80046e6:	4877      	ldr	r0, [pc, #476]	; (80048c4 <main+0x358>)
 80046e8:	f000 fc2e 	bl	8004f48 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80046ec:	f000 fb3c 	bl	8004d68 <ssd1306_UpdateScreen>
	MPU6050_Init();
 80046f0:	f7ff fe7e 	bl	80043f0 <MPU6050_Init>
	MPU6050_Calibrate();
 80046f4:	f7ff fed0 	bl	8004498 <MPU6050_Calibrate>
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80046f8:	2210      	movs	r2, #16
 80046fa:	4631      	mov	r1, r6
 80046fc:	a80b      	add	r0, sp, #44	; 0x2c
	htim4.Instance = TIM4;
 80046fe:	4d72      	ldr	r5, [pc, #456]	; (80048c8 <main+0x35c>)
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004700:	f000 fdfc 	bl	80052fc <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8004704:	221c      	movs	r2, #28
 8004706:	4631      	mov	r1, r6
 8004708:	a80f      	add	r0, sp, #60	; 0x3c
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800470a:	9609      	str	r6, [sp, #36]	; 0x24
 800470c:	960a      	str	r6, [sp, #40]	; 0x28
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800470e:	f000 fdf5 	bl	80052fc <memset>
	htim4.Instance = TIM4;
 8004712:	4b6e      	ldr	r3, [pc, #440]	; (80048cc <main+0x360>)
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8004714:	4628      	mov	r0, r5
	htim4.Init.Prescaler = 0;
 8004716:	e885 0048 	stmia.w	r5, {r3, r6}
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800471a:	60ae      	str	r6, [r5, #8]
	htim4.Init.Period = 0;
 800471c:	60ee      	str	r6, [r5, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800471e:	612e      	str	r6, [r5, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004720:	61ae      	str	r6, [r5, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8004722:	f7fe f995 	bl	8002a50 <HAL_TIM_Base_Init>
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8004726:	a90b      	add	r1, sp, #44	; 0x2c
 8004728:	4628      	mov	r0, r5
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800472a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 800472e:	f7fd fff8 	bl	8002722 <HAL_TIM_ConfigClockSource>
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8004732:	4628      	mov	r0, r5
 8004734:	f7fe f9a6 	bl	8002a84 <HAL_TIM_PWM_Init>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8004738:	a909      	add	r1, sp, #36	; 0x24
 800473a:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800473c:	9609      	str	r6, [sp, #36]	; 0x24
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800473e:	960a      	str	r6, [sp, #40]	; 0x28
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8004740:	f7fe face 	bl	8002ce0 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004744:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
	htim1.Init.Period = 1;
 8004748:	f04f 0901 	mov.w	r9, #1
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 800474c:	4632      	mov	r2, r6
 800474e:	a90f      	add	r1, sp, #60	; 0x3c
 8004750:	4628      	mov	r0, r5
	sConfigOC.Pulse = 0;
 8004752:	9610      	str	r6, [sp, #64]	; 0x40
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004754:	9611      	str	r6, [sp, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004756:	9613      	str	r6, [sp, #76]	; 0x4c
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 8004758:	f7fe f9da 	bl	8002b10 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim4);
 800475c:	4628      	mov	r0, r5
 800475e:	f000 fca9 	bl	80050b4 <HAL_TIM_MspPostInit>
	htim1.Instance = TIM1;
 8004762:	4d5b      	ldr	r5, [pc, #364]	; (80048d0 <main+0x364>)
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004764:	2210      	movs	r2, #16
 8004766:	4631      	mov	r1, r6
 8004768:	a80f      	add	r0, sp, #60	; 0x3c
 800476a:	f000 fdc7 	bl	80052fc <memset>
	htim1.Init.Prescaler = 720000;
 800476e:	4b59      	ldr	r3, [pc, #356]	; (80048d4 <main+0x368>)
 8004770:	4959      	ldr	r1, [pc, #356]	; (80048d8 <main+0x36c>)
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8004772:	4628      	mov	r0, r5
	htim1.Init.Prescaler = 720000;
 8004774:	e885 000a 	stmia.w	r5, {r1, r3}
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004778:	60ae      	str	r6, [r5, #8]
	htim1.Init.Period = 1;
 800477a:	f8c5 900c 	str.w	r9, [r5, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800477e:	612e      	str	r6, [r5, #16]
	htim1.Init.RepetitionCounter = 0;
 8004780:	616e      	str	r6, [r5, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004782:	61ae      	str	r6, [r5, #24]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004784:	960b      	str	r6, [sp, #44]	; 0x2c
 8004786:	960c      	str	r6, [sp, #48]	; 0x30
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8004788:	f7fe f962 	bl	8002a50 <HAL_TIM_Base_Init>
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800478c:	a90f      	add	r1, sp, #60	; 0x3c
 800478e:	4628      	mov	r0, r5
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004790:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8004794:	f7fd ffc5 	bl	8002722 <HAL_TIM_ConfigClockSource>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8004798:	a90b      	add	r1, sp, #44	; 0x2c
 800479a:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800479c:	960b      	str	r6, [sp, #44]	; 0x2c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800479e:	960c      	str	r6, [sp, #48]	; 0x30
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80047a0:	f7fe fa9e 	bl	8002ce0 <HAL_TIMEx_MasterConfigSynchronization>
	HAL_Delay(600);
 80047a4:	f44f 7016 	mov.w	r0, #600	; 0x258
 80047a8:	f7fc fc18 	bl	8000fdc <HAL_Delay>
	ssd1306_Fill(Black);
 80047ac:	4630      	mov	r0, r6
 80047ae:	f000 facd 	bl	8004d4c <ssd1306_Fill>
	ssd1306_SetCursor(2, 0);
 80047b2:	4631      	mov	r1, r6
 80047b4:	4638      	mov	r0, r7
 80047b6:	f000 fbdd 	bl	8004f74 <ssd1306_SetCursor>
	ssd1306_WriteString("Init MPU complit", Font_7x10, White);
 80047ba:	e89a 0006 	ldmia.w	sl, {r1, r2}
 80047be:	464b      	mov	r3, r9
 80047c0:	4846      	ldr	r0, [pc, #280]	; (80048dc <main+0x370>)
 80047c2:	f000 fbc1 	bl	8004f48 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80047c6:	f000 facf 	bl	8004d68 <ssd1306_UpdateScreen>
	HAL_Delay(600);
 80047ca:	f44f 7016 	mov.w	r0, #600	; 0x258
 80047ce:	f7fc fc05 	bl	8000fdc <HAL_Delay>
	my_enableIRIn();
 80047d2:	f7fe fb99 	bl	8002f08 <my_enableIRIn>
	HAL_TIM_Base_Start_IT(&htim1);
 80047d6:	4628      	mov	r0, r5
 80047d8:	f7fd ff97 	bl	800270a <HAL_TIM_Base_Start_IT>
	Diod_Pulse=600;
 80047dc:	f44f 7316 	mov.w	r3, #600	; 0x258
 80047e0:	4d3f      	ldr	r5, [pc, #252]	; (80048e0 <main+0x374>)
	*DWT_CYCCNT = 0;
 80047e2:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8004900 <main+0x394>
	Diod_Pulse=600;
 80047e6:	802b      	strh	r3, [r5, #0]
	*DEMCR = *DEMCR | 0x01000000;
 80047e8:	4b3e      	ldr	r3, [pc, #248]	; (80048e4 <main+0x378>)
	ssd1306_Fill(Black);
 80047ea:	4630      	mov	r0, r6
	*DEMCR = *DEMCR | 0x01000000;
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	6813      	ldr	r3, [r2, #0]
 80047f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047f4:	6013      	str	r3, [r2, #0]
	*DWT_CYCCNT = 0;
 80047f6:	f8d8 3000 	ldr.w	r3, [r8]
 80047fa:	601e      	str	r6, [r3, #0]
	*DWT_CONTROL = *DWT_CONTROL | 1 ;
 80047fc:	4b3a      	ldr	r3, [pc, #232]	; (80048e8 <main+0x37c>)
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	6813      	ldr	r3, [r2, #0]
 8004802:	ea43 0309 	orr.w	r3, r3, r9
 8004806:	6013      	str	r3, [r2, #0]
	ssd1306_Fill(Black);
 8004808:	f000 faa0 	bl	8004d4c <ssd1306_Fill>
			ssd1306_SetCursor(2, 0);
 800480c:	4631      	mov	r1, r6
 800480e:	4638      	mov	r0, r7
 8004810:	f000 fbb0 	bl	8004f74 <ssd1306_SetCursor>
			ssd1306_WriteString("Read master guesture from EEPROM", Font_7x10, White);
 8004814:	e89a 0006 	ldmia.w	sl, {r1, r2}
 8004818:	464b      	mov	r3, r9
 800481a:	4834      	ldr	r0, [pc, #208]	; (80048ec <main+0x380>)
 800481c:	f000 fb94 	bl	8004f48 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8004820:	f000 faa2 	bl	8004d68 <ssd1306_UpdateScreen>
		EEPROM_read(i);
 8004824:	4630      	mov	r0, r6
 8004826:	f7ff fa39 	bl	8003c9c <EEPROM_read>
		Diod_Pulse+=200;
 800482a:	882b      	ldrh	r3, [r5, #0]
	for (int i = 0; i < num_masters; i++) {
 800482c:	3601      	adds	r6, #1
		Diod_Pulse+=200;
 800482e:	33c8      	adds	r3, #200	; 0xc8
	for (int i = 0; i < num_masters; i++) {
 8004830:	2e06      	cmp	r6, #6
		Diod_Pulse+=200;
 8004832:	802b      	strh	r3, [r5, #0]
	for (int i = 0; i < num_masters; i++) {
 8004834:	d1f6      	bne.n	8004824 <main+0x2b8>
		Diod_Pulse=100;
 8004836:	2364      	movs	r3, #100	; 0x64
			ssd1306_Fill(Black);
 8004838:	2000      	movs	r0, #0
		Diod_Pulse=100;
 800483a:	802b      	strh	r3, [r5, #0]
			ssd1306_Fill(Black);
 800483c:	f000 fa86 	bl	8004d4c <ssd1306_Fill>
			ssd1306_SetCursor(2, 0);
 8004840:	2100      	movs	r1, #0
 8004842:	2002      	movs	r0, #2
 8004844:	f000 fb96 	bl	8004f74 <ssd1306_SetCursor>
			ssd1306_WriteString("Init complite", Font_7x10, White);
 8004848:	e89a 0006 	ldmia.w	sl, {r1, r2}
 800484c:	2301      	movs	r3, #1
 800484e:	4828      	ldr	r0, [pc, #160]	; (80048f0 <main+0x384>)
 8004850:	f000 fb7a 	bl	8004f48 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8004854:	f000 fa88 	bl	8004d68 <ssd1306_UpdateScreen>
	HAL_Delay(500);
 8004858:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800485c:	f7fc fbbe 	bl	8000fdc <HAL_Delay>
	lcd_menu(1);
 8004860:	2001      	movs	r0, #1
 8004862:	f7ff fa53 	bl	8003d0c <lcd_menu>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) == GPIO_PIN_SET) {
 8004866:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800486a:	4811      	ldr	r0, [pc, #68]	; (80048b0 <main+0x344>)
 800486c:	f7fc fd1e 	bl	80012ac <HAL_GPIO_ReadPin>
 8004870:	2801      	cmp	r0, #1
 8004872:	f040 8170 	bne.w	8004b56 <main+0x5ea>
			lcd_menu(2);
 8004876:	f7ff fa49 	bl	8003d0c <lcd_menu>
			HAL_Delay(50);
 800487a:	2032      	movs	r0, #50	; 0x32
 800487c:	f7fc fbae 	bl	8000fdc <HAL_Delay>
		if (Start == 1) {
 8004880:	f8df b080 	ldr.w	fp, [pc, #128]	; 8004904 <main+0x398>
 8004884:	f89b 3000 	ldrb.w	r3, [fp]
 8004888:	2b01      	cmp	r3, #1
 800488a:	f040 81e6 	bne.w	8004c5a <main+0x6ee>
			if (Giro_Pulse >= 3)
 800488e:	4f19      	ldr	r7, [pc, #100]	; (80048f4 <main+0x388>)
 8004890:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8004908 <main+0x39c>
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	2b02      	cmp	r3, #2
 8004898:	dd59      	ble.n	800494e <main+0x3e2>
				fAX += mpu6050data[0];
 800489a:	4e17      	ldr	r6, [pc, #92]	; (80048f8 <main+0x38c>)
				MPU6050_GetAllData(mpu6050data);
 800489c:	a80f      	add	r0, sp, #60	; 0x3c
 800489e:	f7ff fdcc 	bl	800443a <MPU6050_GetAllData>
 80048a2:	e033      	b.n	800490c <main+0x3a0>
 80048a4:	20000b04 	.word	0x20000b04
 80048a8:	e000e100 	.word	0xe000e100
 80048ac:	40021000 	.word	0x40021000
 80048b0:	40011000 	.word	0x40011000
 80048b4:	40010c00 	.word	0x40010c00
 80048b8:	200007a0 	.word	0x200007a0
 80048bc:	40005800 	.word	0x40005800
 80048c0:	000186a0 	.word	0x000186a0
 80048c4:	08005c63 	.word	0x08005c63
 80048c8:	2000075c 	.word	0x2000075c
 80048cc:	40000800 	.word	0x40000800
 80048d0:	20000a94 	.word	0x20000a94
 80048d4:	000afc80 	.word	0x000afc80
 80048d8:	40012c00 	.word	0x40012c00
 80048dc:	08005c74 	.word	0x08005c74
 80048e0:	200000a4 	.word	0x200000a4
 80048e4:	20000008 	.word	0x20000008
 80048e8:	2000000c 	.word	0x2000000c
 80048ec:	08005c85 	.word	0x08005c85
 80048f0:	08005ca6 	.word	0x08005ca6
 80048f4:	200000a8 	.word	0x200000a8
 80048f8:	20000ad4 	.word	0x20000ad4
 80048fc:	20000018 	.word	0x20000018
 8004900:	20000010 	.word	0x20000010
 8004904:	200000ae 	.word	0x200000ae
 8004908:	200000b8 	.word	0x200000b8
				fAX += mpu6050data[0];
 800490c:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 8004910:	f7fc f952 	bl	8000bb8 <__aeabi_i2f>
 8004914:	6831      	ldr	r1, [r6, #0]
 8004916:	f7fc f89b 	bl	8000a50 <__addsf3>
 800491a:	6030      	str	r0, [r6, #0]
				fAY += mpu6050data[1];
 800491c:	4ea4      	ldr	r6, [pc, #656]	; (8004bb0 <main+0x644>)
 800491e:	f9bd 003e 	ldrsh.w	r0, [sp, #62]	; 0x3e
 8004922:	f7fc f949 	bl	8000bb8 <__aeabi_i2f>
 8004926:	6831      	ldr	r1, [r6, #0]
 8004928:	f7fc f892 	bl	8000a50 <__addsf3>
 800492c:	6030      	str	r0, [r6, #0]
				fAZ += mpu6050data[2];
 800492e:	4ea1      	ldr	r6, [pc, #644]	; (8004bb4 <main+0x648>)
 8004930:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 8004934:	f7fc f940 	bl	8000bb8 <__aeabi_i2f>
 8004938:	6831      	ldr	r1, [r6, #0]
 800493a:	f7fc f889 	bl	8000a50 <__addsf3>
				Giro_Pulse = 0;
 800493e:	2300      	movs	r3, #0
 8004940:	603b      	str	r3, [r7, #0]
				giro_step++;
 8004942:	f899 3000 	ldrb.w	r3, [r9]
				fAZ += mpu6050data[2];
 8004946:	6030      	str	r0, [r6, #0]
				giro_step++;
 8004948:	3301      	adds	r3, #1
 800494a:	f889 3000 	strb.w	r3, [r9]
			if (giro_step == 4) {
 800494e:	f999 3000 	ldrsb.w	r3, [r9]
 8004952:	4e99      	ldr	r6, [pc, #612]	; (8004bb8 <main+0x64c>)
 8004954:	2b04      	cmp	r3, #4
 8004956:	f040 80ad 	bne.w	8004ab4 <main+0x548>
				fAX /= 4;
 800495a:	4b98      	ldr	r3, [pc, #608]	; (8004bbc <main+0x650>)
 800495c:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8004960:	6818      	ldr	r0, [r3, #0]
 8004962:	f7fc f97d 	bl	8000c60 <__aeabi_fmul>
				fAY /= 4;
 8004966:	4b92      	ldr	r3, [pc, #584]	; (8004bb0 <main+0x644>)
				fAX /= 4;
 8004968:	9003      	str	r0, [sp, #12]
				fAY /= 4;
 800496a:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 800496e:	6818      	ldr	r0, [r3, #0]
 8004970:	f7fc f976 	bl	8000c60 <__aeabi_fmul>
				fAZ /= 4;
 8004974:	4b8f      	ldr	r3, [pc, #572]	; (8004bb4 <main+0x648>)
				fAY /= 4;
 8004976:	9002      	str	r0, [sp, #8]
				fAZ /= 4;
 8004978:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 800497c:	6818      	ldr	r0, [r3, #0]
 800497e:	f7fc f96f 	bl	8000c60 <__aeabi_fmul>
 8004982:	4631      	mov	r1, r6
 8004984:	4603      	mov	r3, r0
 8004986:	9a03      	ldr	r2, [sp, #12]
 8004988:	488d      	ldr	r0, [pc, #564]	; (8004bc0 <main+0x654>)
 800498a:	f106 0762 	add.w	r7, r6, #98	; 0x62
					reading[0][j] = temp_values[0][j + 1];
 800498e:	f831 ef02 	ldrh.w	lr, [r1, #2]!
 8004992:	f820 ef02 	strh.w	lr, [r0, #2]!
					reading[1][j] = temp_values[1][j + 1];
 8004996:	f8b1 e064 	ldrh.w	lr, [r1, #100]	; 0x64
				for (int j = 0; j < sample_size - 1; j++) {
 800499a:	42b9      	cmp	r1, r7
					reading[1][j] = temp_values[1][j + 1];
 800499c:	f8a0 e064 	strh.w	lr, [r0, #100]	; 0x64
					reading[2][j] = temp_values[2][j + 1];
 80049a0:	f8b1 e0c8 	ldrh.w	lr, [r1, #200]	; 0xc8
 80049a4:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
				for (int j = 0; j < sample_size - 1; j++) {
 80049a8:	d1f1      	bne.n	800498e <main+0x422>
				reading[0][sample_size - 1] = fAX - fAX_Cal;
 80049aa:	4986      	ldr	r1, [pc, #536]	; (8004bc4 <main+0x658>)
 80049ac:	4610      	mov	r0, r2
 80049ae:	6809      	ldr	r1, [r1, #0]
 80049b0:	9303      	str	r3, [sp, #12]
 80049b2:	f7fc f84b 	bl	8000a4c <__aeabi_fsub>
 80049b6:	f7fc faa3 	bl	8000f00 <__aeabi_f2iz>
 80049ba:	4f83      	ldr	r7, [pc, #524]	; (8004bc8 <main+0x65c>)
				reading[1][sample_size - 1] = fAY - fAY_Cal;
 80049bc:	4a83      	ldr	r2, [pc, #524]	; (8004bcc <main+0x660>)
				reading[0][sample_size - 1] = fAX - fAX_Cal;
 80049be:	f8a7 0062 	strh.w	r0, [r7, #98]	; 0x62
				reading[1][sample_size - 1] = fAY - fAY_Cal;
 80049c2:	6811      	ldr	r1, [r2, #0]
 80049c4:	9802      	ldr	r0, [sp, #8]
 80049c6:	f7fc f841 	bl	8000a4c <__aeabi_fsub>
 80049ca:	f7fc fa99 	bl	8000f00 <__aeabi_f2iz>
				reading[2][sample_size - 1] = fAZ - fAZ_Cal;
 80049ce:	9b03      	ldr	r3, [sp, #12]
 80049d0:	4a7f      	ldr	r2, [pc, #508]	; (8004bd0 <main+0x664>)
				reading[1][sample_size - 1] = fAY - fAY_Cal;
 80049d2:	f8a7 00c6 	strh.w	r0, [r7, #198]	; 0xc6
				reading[2][sample_size - 1] = fAZ - fAZ_Cal;
 80049d6:	6811      	ldr	r1, [r2, #0]
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fc f837 	bl	8000a4c <__aeabi_fsub>
 80049de:	f7fc fa8f 	bl	8000f00 <__aeabi_f2iz>
 80049e2:	2300      	movs	r3, #0
 80049e4:	f8a7 012a 	strh.w	r0, [r7, #298]	; 0x12a
	for (int i = 0; i < num_masters; i++) {
 80049e8:	2200      	movs	r2, #0
						temp_values[i][j] = reading[i][j];
 80049ea:	18f0      	adds	r0, r6, r3
 80049ec:	19d9      	adds	r1, r3, r7
 80049ee:	f831 e012 	ldrh.w	lr, [r1, r2, lsl #1]
 80049f2:	f820 e012 	strh.w	lr, [r0, r2, lsl #1]
					for (int j = 0; j < sample_size; j++) {
 80049f6:	3201      	adds	r2, #1
 80049f8:	2a32      	cmp	r2, #50	; 0x32
 80049fa:	d1f8      	bne.n	80049ee <main+0x482>
 80049fc:	3364      	adds	r3, #100	; 0x64
				for (int i = 0; i < DOF; i++) {
 80049fe:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004a02:	d1f1      	bne.n	80049e8 <main+0x47c>
				fAX = 0;
 8004a04:	2200      	movs	r2, #0
 8004a06:	4b6d      	ldr	r3, [pc, #436]	; (8004bbc <main+0x650>)
				calctime++;
 8004a08:	3401      	adds	r4, #1
				fAX = 0;
 8004a0a:	601a      	str	r2, [r3, #0]
				fAY = 0;
 8004a0c:	4b68      	ldr	r3, [pc, #416]	; (8004bb0 <main+0x644>)
				if (calctime >= 50) {
 8004a0e:	2c31      	cmp	r4, #49	; 0x31
				fAY = 0;
 8004a10:	601a      	str	r2, [r3, #0]
				fAZ = 0;
 8004a12:	4b68      	ldr	r3, [pc, #416]	; (8004bb4 <main+0x648>)
 8004a14:	601a      	str	r2, [r3, #0]
				giro_step = 0;
 8004a16:	f04f 0300 	mov.w	r3, #0
 8004a1a:	4a6e      	ldr	r2, [pc, #440]	; (8004bd4 <main+0x668>)
 8004a1c:	f889 3000 	strb.w	r3, [r9]
				if (calctime >= 50) {
 8004a20:	dd13      	ble.n	8004a4a <main+0x4de>
					if (redyread >= 1)
 8004a22:	7814      	ldrb	r4, [r2, #0]
 8004a24:	b18c      	cbz	r4, 8004a4a <main+0x4de>
						if (take_reading_master_guesture>=1 )
 8004a26:	496c      	ldr	r1, [pc, #432]	; (8004bd8 <main+0x66c>)
 8004a28:	780c      	ldrb	r4, [r1, #0]
 8004a2a:	2c00      	cmp	r4, #0
 8004a2c:	f000 809d 	beq.w	8004b6a <main+0x5fe>
					calctime = 0;
 8004a30:	461c      	mov	r4, r3
							take_reading_master_guesture=0; //считали жест для памяти
 8004a32:	700b      	strb	r3, [r1, #0]
							count=*DWT_CYCCNT-Mcounter;
 8004a34:	4869      	ldr	r0, [pc, #420]	; (8004bdc <main+0x670>)
 8004a36:	f8d8 1000 	ldr.w	r1, [r8]
							Start=0;
 8004a3a:	f88b 3000 	strb.w	r3, [fp]
							redyread = 0;
 8004a3e:	7013      	strb	r3, [r2, #0]
							count=*DWT_CYCCNT-Mcounter;
 8004a40:	6800      	ldr	r0, [r0, #0]
 8004a42:	6809      	ldr	r1, [r1, #0]
 8004a44:	1a09      	subs	r1, r1, r0
 8004a46:	4866      	ldr	r0, [pc, #408]	; (8004be0 <main+0x674>)
 8004a48:	6001      	str	r1, [r0, #0]
				if ((((temp_values[0][sample_size - 1] >= -100)&& (temp_values[0][sample_size - 1] <= 100))
 8004a4a:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
				  & ((temp_values[1][sample_size - 1] >= -100)&& (temp_values[1][sample_size - 1] <= 100))
 8004a4e:	f8b6 10c6 	ldrh.w	r1, [r6, #198]	; 0xc6
				if ((((temp_values[0][sample_size - 1] >= -100)&& (temp_values[0][sample_size - 1] <= 100))
 8004a52:	3364      	adds	r3, #100	; 0x64
				  & ((temp_values[1][sample_size - 1] >= -100)&& (temp_values[1][sample_size - 1] <= 100))
 8004a54:	3164      	adds	r1, #100	; 0x64
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	b289      	uxth	r1, r1
 8004a5a:	2bc8      	cmp	r3, #200	; 0xc8
 8004a5c:	bf98      	it	ls
 8004a5e:	29c8      	cmpls	r1, #200	; 0xc8
 8004a60:	bf94      	ite	ls
 8004a62:	2301      	movls	r3, #1
 8004a64:	2300      	movhi	r3, #0
				  &	(redyread==0))
 8004a66:	7812      	ldrb	r2, [r2, #0]
				if ((((temp_values[0][sample_size - 1] >= -100)&& (temp_values[0][sample_size - 1] <= 100))
 8004a68:	2a00      	cmp	r2, #0
 8004a6a:	bf14      	ite	ne
 8004a6c:	2300      	movne	r3, #0
 8004a6e:	f003 0301 	andeq.w	r3, r3, #1
 8004a72:	4a5c      	ldr	r2, [pc, #368]	; (8004be4 <main+0x678>)
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d07d      	beq.n	8004b74 <main+0x608>
				  & ((temp_values[2][sample_size - 1] >= -70 )&& (temp_values[2][sample_size - 1] <= 70)))
 8004a78:	f8b6 312a 	ldrh.w	r3, [r6, #298]	; 0x12a
 8004a7c:	3346      	adds	r3, #70	; 0x46
 8004a7e:	b29b      	uxth	r3, r3
				if ((((temp_values[0][sample_size - 1] >= -100)&& (temp_values[0][sample_size - 1] <= 100))
 8004a80:	2b8c      	cmp	r3, #140	; 0x8c
 8004a82:	d877      	bhi.n	8004b74 <main+0x608>
					if (Diod_Pulse<=6000)
 8004a84:	f241 7170 	movw	r1, #6000	; 0x1770
					calcforw++;
 8004a88:	7813      	ldrb	r3, [r2, #0]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	7013      	strb	r3, [r2, #0]
					if (Diod_Pulse<=6000)
 8004a90:	882a      	ldrh	r2, [r5, #0]
 8004a92:	428a      	cmp	r2, r1
					{Diod_Pulse+=60;}
 8004a94:	bf9c      	itt	ls
 8004a96:	323c      	addls	r2, #60	; 0x3c
 8004a98:	802a      	strhls	r2, [r5, #0]
					if (calcforw >= 20)	// ждём порядка 700 мc. это 35 тиков.
 8004a9a:	2b13      	cmp	r3, #19
 8004a9c:	d90a      	bls.n	8004ab4 <main+0x548>
						redywait = 1; // я знаю что палочка зависла выставляю флаг ждать жест. с первых резких движений - чтаем жест
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	4b51      	ldr	r3, [pc, #324]	; (8004be8 <main+0x67c>)
 8004aa2:	701a      	strb	r2, [r3, #0]
						if (Diod_Pulse<=6000)
 8004aa4:	f241 7270 	movw	r2, #6000	; 0x1770
 8004aa8:	882b      	ldrh	r3, [r5, #0]
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d802      	bhi.n	8004ab4 <main+0x548>
						{Diod_Pulse+=600;}
 8004aae:	f503 7316 	add.w	r3, r3, #600	; 0x258
					Diod_Pulse=0;
 8004ab2:	802b      	strh	r3, [r5, #0]
			if (  ((temp_values[0][sample_size - 1] <= -150)|| (temp_values[0][sample_size - 1] >= 150))
 8004ab4:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
				& ((temp_values[1][sample_size - 1] <= -150)|| (temp_values[1][sample_size - 1] >= 150))
 8004ab8:	f8b6 20c6 	ldrh.w	r2, [r6, #198]	; 0xc6
			if (  ((temp_values[0][sample_size - 1] <= -150)|| (temp_values[0][sample_size - 1] >= 150))
 8004abc:	3395      	adds	r3, #149	; 0x95
				& ((temp_values[1][sample_size - 1] <= -150)|| (temp_values[1][sample_size - 1] >= 150))
 8004abe:	3295      	adds	r2, #149	; 0x95
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	b292      	uxth	r2, r2
 8004ac4:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8004ac8:	bf88      	it	hi
 8004aca:	f5b2 7f95 	cmphi.w	r2, #298	; 0x12a
 8004ace:	bf8c      	ite	hi
 8004ad0:	2301      	movhi	r3, #1
 8004ad2:	2300      	movls	r3, #0
				& (redywait == 1))
 8004ad4:	4a44      	ldr	r2, [pc, #272]	; (8004be8 <main+0x67c>)
 8004ad6:	7811      	ldrb	r1, [r2, #0]
			if (  ((temp_values[0][sample_size - 1] <= -150)|| (temp_values[0][sample_size - 1] >= 150))
 8004ad8:	2901      	cmp	r1, #1
 8004ada:	bf14      	ite	ne
 8004adc:	2300      	movne	r3, #0
 8004ade:	f003 0301 	andeq.w	r3, r3, #1
 8004ae2:	b183      	cbz	r3, 8004b06 <main+0x59a>
				& ((temp_values[2][sample_size - 1] <= -150)|| (temp_values[2][sample_size - 1] >= 150))
 8004ae4:	f8b6 312a 	ldrh.w	r3, [r6, #298]	; 0x12a
 8004ae8:	3395      	adds	r3, #149	; 0x95
 8004aea:	b29b      	uxth	r3, r3
			if (  ((temp_values[0][sample_size - 1] <= -150)|| (temp_values[0][sample_size - 1] >= 150))
 8004aec:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8004af0:	d909      	bls.n	8004b06 <main+0x59a>
				redyread = 1;
 8004af2:	2101      	movs	r1, #1
				redywait = 0;
 8004af4:	2400      	movs	r4, #0
				redyread = 1;
 8004af6:	4b37      	ldr	r3, [pc, #220]	; (8004bd4 <main+0x668>)
				redywait = 0;
 8004af8:	7014      	strb	r4, [r2, #0]
				redyread = 1;
 8004afa:	7019      	strb	r1, [r3, #0]
				Mcounter=*DWT_CYCCNT;
 8004afc:	f8d8 3000 	ldr.w	r3, [r8]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	4b36      	ldr	r3, [pc, #216]	; (8004bdc <main+0x670>)
 8004b04:	601a      	str	r2, [r3, #0]
			if (startmov == 1) {
 8004b06:	4a39      	ldr	r2, [pc, #228]	; (8004bec <main+0x680>)
 8004b08:	7817      	ldrb	r7, [r2, #0]
 8004b0a:	2f01      	cmp	r7, #1
 8004b0c:	f040 80a5 	bne.w	8004c5a <main+0x6ee>
				startmov = 0;
 8004b10:	2300      	movs	r3, #0
				for (i = 0; i < num_masters; i++) //calculate DTW_score for each master
 8004b12:	4e37      	ldr	r6, [pc, #220]	; (8004bf0 <main+0x684>)
				startmov = 0;
 8004b14:	7013      	strb	r3, [r2, #0]
				for (i = 0; i < num_masters; i++) //calculate DTW_score for each master
 8004b16:	7033      	strb	r3, [r6, #0]
 8004b18:	4633      	mov	r3, r6
 8004b1a:	4a36      	ldr	r2, [pc, #216]	; (8004bf4 <main+0x688>)
 8004b1c:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 8004c00 <main+0x694>
 8004b20:	f893 9000 	ldrb.w	r9, [r3]
 8004b24:	f1b9 0f05 	cmp.w	r9, #5
 8004b28:	d927      	bls.n	8004b7a <main+0x60e>
				for (i = 1; i < num_masters; i++) {
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	f8db 3000 	ldr.w	r3, [fp]
 8004b30:	4830      	ldr	r0, [pc, #192]	; (8004bf4 <main+0x688>)
 8004b32:	2f06      	cmp	r7, #6
 8004b34:	d132      	bne.n	8004b9c <main+0x630>
 8004b36:	b109      	cbz	r1, 8004b3c <main+0x5d0>
 8004b38:	f8cb 3000 	str.w	r3, [fp]
				for (i = 0; i < num_masters; ++i) {
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	461a      	mov	r2, r3
					if (min_score == DTW_score[i]) {
 8004b40:	f8db 0000 	ldr.w	r0, [fp]
 8004b44:	492c      	ldr	r1, [pc, #176]	; (8004bf8 <main+0x68c>)
				for (i = 0; i < num_masters; ++i) {
 8004b46:	7033      	strb	r3, [r6, #0]
 8004b48:	2b06      	cmp	r3, #6
 8004b4a:	d15b      	bne.n	8004c04 <main+0x698>
 8004b4c:	2a00      	cmp	r2, #0
 8004b4e:	f000 8084 	beq.w	8004c5a <main+0x6ee>
 8004b52:	7033      	strb	r3, [r6, #0]
 8004b54:	e081      	b.n	8004c5a <main+0x6ee>
		} else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == GPIO_PIN_SET) {
 8004b56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b5a:	4828      	ldr	r0, [pc, #160]	; (8004bfc <main+0x690>)
 8004b5c:	f7fc fba6 	bl	80012ac <HAL_GPIO_ReadPin>
 8004b60:	2801      	cmp	r0, #1
 8004b62:	f47f ae8d 	bne.w	8004880 <main+0x314>
			lcd_menu(2);
 8004b66:	2002      	movs	r0, #2
 8004b68:	e685      	b.n	8004876 <main+0x30a>
							startmov = 1; // считали жест для анализа
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	4b1f      	ldr	r3, [pc, #124]	; (8004bec <main+0x680>)
							redyread = 0;
 8004b6e:	7014      	strb	r4, [r2, #0]
							startmov = 1; // считали жест для анализа
 8004b70:	7019      	strb	r1, [r3, #0]
 8004b72:	e76a      	b.n	8004a4a <main+0x4de>
					calcforw = 0;
 8004b74:	2300      	movs	r3, #0
 8004b76:	7013      	strb	r3, [r2, #0]
 8004b78:	e79b      	b.n	8004ab2 <main+0x546>
					DTW_score[i] = calc_DTW_score(i);
 8004b7a:	4648      	mov	r0, r9
 8004b7c:	9203      	str	r2, [sp, #12]
 8004b7e:	9302      	str	r3, [sp, #8]
 8004b80:	f7ff faea 	bl	8004158 <calc_DTW_score>
 8004b84:	9a03      	ldr	r2, [sp, #12]
				for (i = 0; i < num_masters; i++) //calculate DTW_score for each master
 8004b86:	9b02      	ldr	r3, [sp, #8]
					DTW_score[i] = calc_DTW_score(i);
 8004b88:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
					min_score = DTW_score[0];  //finding minimum of DTW_scores
 8004b8c:	6811      	ldr	r1, [r2, #0]
				for (i = 0; i < num_masters; i++) //calculate DTW_score for each master
 8004b8e:	f109 0901 	add.w	r9, r9, #1
					min_score = DTW_score[0];  //finding minimum of DTW_scores
 8004b92:	f8cb 1000 	str.w	r1, [fp]
				for (i = 0; i < num_masters; i++) //calculate DTW_score for each master
 8004b96:	f883 9000 	strb.w	r9, [r3]
 8004b9a:	e7c1      	b.n	8004b20 <main+0x5b4>
					if (DTW_score[i] < min_score) {
 8004b9c:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8004ba0:	3701      	adds	r7, #1
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	bfac      	ite	ge
 8004ba6:	461a      	movge	r2, r3
 8004ba8:	2101      	movlt	r1, #1
 8004baa:	b2ff      	uxtb	r7, r7
				for (i = 1; i < num_masters; i++) {
 8004bac:	4613      	mov	r3, r2
 8004bae:	e7c0      	b.n	8004b32 <main+0x5c6>
 8004bb0:	2000079c 	.word	0x2000079c
 8004bb4:	20000ad8 	.word	0x20000ad8
 8004bb8:	200007f4 	.word	0x200007f4
 8004bbc:	20000ad4 	.word	0x20000ad4
 8004bc0:	20000964 	.word	0x20000964
 8004bc4:	20000b54 	.word	0x20000b54
 8004bc8:	20000966 	.word	0x20000966
 8004bcc:	20000930 	.word	0x20000930
 8004bd0:	20000950 	.word	0x20000950
 8004bd4:	2000093c 	.word	0x2000093c
 8004bd8:	20000b50 	.word	0x20000b50
 8004bdc:	20000ae4 	.word	0x20000ae4
 8004be0:	20000adc 	.word	0x20000adc
 8004be4:	20000928 	.word	0x20000928
 8004be8:	20000ae0 	.word	0x20000ae0
 8004bec:	20000b44 	.word	0x20000b44
 8004bf0:	20000964 	.word	0x20000964
 8004bf4:	20000aec 	.word	0x20000aec
 8004bf8:	20000ae8 	.word	0x20000ae8
 8004bfc:	40011000 	.word	0x40011000
 8004c00:	20000954 	.word	0x20000954
					if (min_score == DTW_score[i]) {
 8004c04:	f851 7f04 	ldr.w	r7, [r1, #4]!
 8004c08:	4287      	cmp	r7, r0
 8004c0a:	d163      	bne.n	8004cd4 <main+0x768>
						if (i != 0) { // resting position
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d061      	beq.n	8004cd4 <main+0x768>
 8004c10:	b102      	cbz	r2, 8004c14 <main+0x6a8>
 8004c12:	7033      	strb	r3, [r6, #0]
							if (i==1)
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d155      	bne.n	8004cc4 <main+0x758>
								cod_but = 0x11111110; // РєРѕРґ РєРЅРѕРїРєРё РїРѕР»СѓС‡РµРЅС‹Р№ РїСЂРё РґРµРєРѕРґРёСЂРѕРІР°РЅРёРё
 8004c18:	4830      	ldr	r0, [pc, #192]	; (8004cdc <main+0x770>)
							cod_but = 0x11111011; // РєРѕРґ РєРЅРѕРїРєРё РїРѕР»СѓС‡РµРЅС‹Р№ РїСЂРё РґРµРєРѕРґРёСЂРѕРІР°РЅРёРё
 8004c1a:	4b31      	ldr	r3, [pc, #196]	; (8004ce0 <main+0x774>)
							sendSAMSUNG(cod_but, 32); // РїСЂРѕС‚РѕРєРѕР» РїРѕР»СѓС‡РµРЅС‹Р№ РїСЂРё РґРµРєРѕРґРёСЂРѕРІР°РЅРёРё, РєРѕРґ РєРЅРѕРїРєРё Рё РґР»РёРЅР° РїР°РєРµС‚Р° РІ Р±РёС‚Р°С… (Cod: 0x707048b7 | Type: SAMSUNG | Bits: 32)
 8004c1c:	2120      	movs	r1, #32
							cod_but = 0x11111011; // РєРѕРґ РєРЅРѕРїРєРё РїРѕР»СѓС‡РµРЅС‹Р№ РїСЂРё РґРµРєРѕРґРёСЂРѕРІР°РЅРёРё
 8004c1e:	6018      	str	r0, [r3, #0]
							sendSAMSUNG(cod_but, 32); // РїСЂРѕС‚РѕРєРѕР» РїРѕР»СѓС‡РµРЅС‹Р№ РїСЂРё РґРµРєРѕРґРёСЂРѕРІР°РЅРёРё, РєРѕРґ РєРЅРѕРїРєРё Рё РґР»РёРЅР° РїР°РєРµС‚Р° РІ Р±РёС‚Р°С… (Cod: 0x707048b7 | Type: SAMSUNG | Bits: 32)
 8004c20:	f7fe fe80 	bl	8003924 <sendSAMSUNG>
							my_enableIRIn();
 8004c24:	f7fe f970 	bl	8002f08 <my_enableIRIn>
							snprintf(trans_str, 20, "nom matr:  %i\n", i);
 8004c28:	7833      	ldrb	r3, [r6, #0]
 8004c2a:	4a2e      	ldr	r2, [pc, #184]	; (8004ce4 <main+0x778>)
 8004c2c:	2114      	movs	r1, #20
 8004c2e:	482e      	ldr	r0, [pc, #184]	; (8004ce8 <main+0x77c>)
 8004c30:	f000 fb6c 	bl	800530c <sniprintf>
							ssd1306_Fill(Black);
 8004c34:	2000      	movs	r0, #0
 8004c36:	f000 f889 	bl	8004d4c <ssd1306_Fill>
							ssd1306_SetCursor(3, 10);
 8004c3a:	210a      	movs	r1, #10
 8004c3c:	2003      	movs	r0, #3
 8004c3e:	f000 f999 	bl	8004f74 <ssd1306_SetCursor>
							ssd1306_WriteString(trans_str, Font_7x10, White);
 8004c42:	e89a 0006 	ldmia.w	sl, {r1, r2}
 8004c46:	2301      	movs	r3, #1
 8004c48:	4827      	ldr	r0, [pc, #156]	; (8004ce8 <main+0x77c>)
 8004c4a:	f000 f97d 	bl	8004f48 <ssd1306_WriteString>
							ssd1306_UpdateScreen();
 8004c4e:	f000 f88b 	bl	8004d68 <ssd1306_UpdateScreen>
							HAL_Delay(500);
 8004c52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004c56:	f7fc f9c1 	bl	8000fdc <HAL_Delay>
		if (my_decode(&results)) {
 8004c5a:	4e24      	ldr	r6, [pc, #144]	; (8004cec <main+0x780>)
 8004c5c:	4630      	mov	r0, r6
 8004c5e:	f7fe f9f1 	bl	8003044 <my_decode>
 8004c62:	2800      	cmp	r0, #0
 8004c64:	f43f adff 	beq.w	8004866 <main+0x2fa>
			snprintf(trans_str, 96, "Cod: %p | Type: %s | Bits: %d\n",
 8004c68:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 8004c6c:	4a20      	ldr	r2, [pc, #128]	; (8004cf0 <main+0x784>)
 8004c6e:	9301      	str	r3, [sp, #4]
					(void*) results.value, decode_str[results.decode_type + 1],
 8004c70:	f996 3000 	ldrsb.w	r3, [r6]
			snprintf(trans_str, 96, "Cod: %p | Type: %s | Bits: %d\n",
 8004c74:	2160      	movs	r1, #96	; 0x60
 8004c76:	3301      	adds	r3, #1
 8004c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c7c:	481a      	ldr	r0, [pc, #104]	; (8004ce8 <main+0x77c>)
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	6873      	ldr	r3, [r6, #4]
 8004c82:	4a1c      	ldr	r2, [pc, #112]	; (8004cf4 <main+0x788>)
 8004c84:	f000 fb42 	bl	800530c <sniprintf>
			ssd1306_Fill(Black);
 8004c88:	2000      	movs	r0, #0
 8004c8a:	f000 f85f 	bl	8004d4c <ssd1306_Fill>
			ssd1306_SetCursor(3, 10);
 8004c8e:	210a      	movs	r1, #10
 8004c90:	2003      	movs	r0, #3
 8004c92:	f000 f96f 	bl	8004f74 <ssd1306_SetCursor>
			ssd1306_WriteString(trans_str, Font_7x10, White);
 8004c96:	e89a 0006 	ldmia.w	sl, {r1, r2}
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	4812      	ldr	r0, [pc, #72]	; (8004ce8 <main+0x77c>)
 8004c9e:	f000 f953 	bl	8004f48 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8004ca2:	f000 f861 	bl	8004d68 <ssd1306_UpdateScreen>
			my_resume();
 8004ca6:	f7fe f967 	bl	8002f78 <my_resume>
			HAL_Delay(20);
 8004caa:	2014      	movs	r0, #20
 8004cac:	f7fc f996 	bl	8000fdc <HAL_Delay>
			cod_but = 0x11111111; // РєРѕРґ РєРЅРѕРїРєРё РїРѕР»СѓС‡РµРЅС‹Р№ РїСЂРё РґРµРєРѕРґРёСЂРѕРІР°РЅРёРё
 8004cb0:	f04f 3011 	mov.w	r0, #286331153	; 0x11111111
 8004cb4:	4b0a      	ldr	r3, [pc, #40]	; (8004ce0 <main+0x774>)
			sendSAMSUNG(cod_but, 32); // РїСЂРѕС‚РѕРєРѕР» РїРѕР»СѓС‡РµРЅС‹Р№ РїСЂРё РґРµРєРѕРґРёСЂРѕРІР°РЅРёРё, РєРѕРґ РєРЅРѕРїРєРё Рё РґР»РёРЅР° РїР°РєРµС‚Р° РІ Р±РёС‚Р°С… (Cod: 0x707048b7 | Type: SAMSUNG | Bits: 32)
 8004cb6:	2120      	movs	r1, #32
			cod_but = 0x11111111; // РєРѕРґ РєРЅРѕРїРєРё РїРѕР»СѓС‡РµРЅС‹Р№ РїСЂРё РґРµРєРѕРґРёСЂРѕРІР°РЅРёРё
 8004cb8:	6018      	str	r0, [r3, #0]
			sendSAMSUNG(cod_but, 32); // РїСЂРѕС‚РѕРєРѕР» РїРѕР»СѓС‡РµРЅС‹Р№ РїСЂРё РґРµРєРѕРґРёСЂРѕРІР°РЅРёРё, РєРѕРґ РєРЅРѕРїРєРё Рё РґР»РёРЅР° РїР°РєРµС‚Р° РІ Р±РёС‚Р°С… (Cod: 0x707048b7 | Type: SAMSUNG | Bits: 32)
 8004cba:	f7fe fe33 	bl	8003924 <sendSAMSUNG>
			my_enableIRIn();
 8004cbe:	f7fe f923 	bl	8002f08 <my_enableIRIn>
 8004cc2:	e5d0      	b.n	8004866 <main+0x2fa>
							else if (i==2)
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d101      	bne.n	8004ccc <main+0x760>
								cod_but = 0x11111101; // РєРѕРґ РєРЅРѕРїРєРё РїРѕР»СѓС‡РµРЅС‹Р№ РїСЂРё РґРµРєРѕРґРёСЂРѕРІР°РЅРёРё
 8004cc8:	480b      	ldr	r0, [pc, #44]	; (8004cf8 <main+0x78c>)
 8004cca:	e7a6      	b.n	8004c1a <main+0x6ae>
							else if (i==3)
 8004ccc:	2b03      	cmp	r3, #3
 8004cce:	d1ab      	bne.n	8004c28 <main+0x6bc>
							cod_but = 0x11111011; // РєРѕРґ РєРЅРѕРїРєРё РїРѕР»СѓС‡РµРЅС‹Р№ РїСЂРё РґРµРєРѕРґРёСЂРѕРІР°РЅРёРё
 8004cd0:	480a      	ldr	r0, [pc, #40]	; (8004cfc <main+0x790>)
 8004cd2:	e7a2      	b.n	8004c1a <main+0x6ae>
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2201      	movs	r2, #1
 8004cda:	e735      	b.n	8004b48 <main+0x5dc>
 8004cdc:	11111110 	.word	0x11111110
 8004ce0:	200000b4 	.word	0x200000b4
 8004ce4:	08005cb4 	.word	0x08005cb4
 8004ce8:	200000b9 	.word	0x200000b9
 8004cec:	20000738 	.word	0x20000738
 8004cf0:	08005bac 	.word	0x08005bac
 8004cf4:	08005cc3 	.word	0x08005cc3
 8004cf8:	11111101 	.word	0x11111101
 8004cfc:	11111011 	.word	0x11111011

08004d00 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
	/* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8004d00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004d02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
void ssd1306_WriteCommand(uint8_t byte) {
 8004d06:	aa06      	add	r2, sp, #24
 8004d08:	f802 0d01 	strb.w	r0, [r2, #-1]!
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004d0c:	9302      	str	r3, [sp, #8]
 8004d0e:	2301      	movs	r3, #1
 8004d10:	2178      	movs	r1, #120	; 0x78
 8004d12:	e88d 000c 	stmia.w	sp, {r2, r3}
 8004d16:	4803      	ldr	r0, [pc, #12]	; (8004d24 <ssd1306_WriteCommand+0x24>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f7fc ff6f 	bl	8001bfc <HAL_I2C_Mem_Write>
}
 8004d1e:	b007      	add	sp, #28
 8004d20:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d24:	200007a0 	.word	0x200007a0

08004d28 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8004d28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8004d2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d2e:	b289      	uxth	r1, r1
 8004d30:	e88d 0003 	stmia.w	sp, {r0, r1}
 8004d34:	9302      	str	r3, [sp, #8]
 8004d36:	2240      	movs	r2, #64	; 0x40
 8004d38:	2301      	movs	r3, #1
 8004d3a:	2178      	movs	r1, #120	; 0x78
 8004d3c:	4802      	ldr	r0, [pc, #8]	; (8004d48 <ssd1306_WriteData+0x20>)
 8004d3e:	f7fc ff5d 	bl	8001bfc <HAL_I2C_Mem_Write>
}
 8004d42:	b005      	add	sp, #20
 8004d44:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d48:	200007a0 	.word	0x200007a0

08004d4c <ssd1306_Fill>:
// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8004d4c:	2300      	movs	r3, #0
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8004d4e:	4905      	ldr	r1, [pc, #20]	; (8004d64 <ssd1306_Fill+0x18>)
 8004d50:	1c02      	adds	r2, r0, #0
 8004d52:	bf18      	it	ne
 8004d54:	2201      	movne	r2, #1
 8004d56:	4252      	negs	r2, r2
 8004d58:	545a      	strb	r2, [r3, r1]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d60:	d1f6      	bne.n	8004d50 <ssd1306_Fill+0x4>
    }
}
 8004d62:	4770      	bx	lr
 8004d64:	20000120 	.word	0x20000120

08004d68 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8004d68:	b538      	push	{r3, r4, r5, lr}
 8004d6a:	2400      	movs	r4, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
        ssd1306_WriteCommand(0xB0 + i);
        ssd1306_WriteCommand(0x00);
        ssd1306_WriteCommand(0x10);
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004d6c:	4d0a      	ldr	r5, [pc, #40]	; (8004d98 <ssd1306_UpdateScreen+0x30>)
        ssd1306_WriteCommand(0xB0 + i);
 8004d6e:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 8004d72:	b2c0      	uxtb	r0, r0
 8004d74:	f7ff ffc4 	bl	8004d00 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8004d78:	2000      	movs	r0, #0
 8004d7a:	f7ff ffc1 	bl	8004d00 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8004d7e:	2010      	movs	r0, #16
 8004d80:	f7ff ffbe 	bl	8004d00 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004d84:	eb05 10c4 	add.w	r0, r5, r4, lsl #7
 8004d88:	2180      	movs	r1, #128	; 0x80
 8004d8a:	3401      	adds	r4, #1
 8004d8c:	f7ff ffcc 	bl	8004d28 <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 8004d90:	2c08      	cmp	r4, #8
 8004d92:	d1ec      	bne.n	8004d6e <ssd1306_UpdateScreen+0x6>
    }
}
 8004d94:	bd38      	pop	{r3, r4, r5, pc}
 8004d96:	bf00      	nop
 8004d98:	20000120 	.word	0x20000120

08004d9c <ssd1306_Init>:
void ssd1306_Init(void) {
 8004d9c:	b508      	push	{r3, lr}
    HAL_Delay(100);
 8004d9e:	2064      	movs	r0, #100	; 0x64
 8004da0:	f7fc f91c 	bl	8000fdc <HAL_Delay>
    ssd1306_WriteCommand(0xAE); //display off
 8004da4:	20ae      	movs	r0, #174	; 0xae
 8004da6:	f7ff ffab 	bl	8004d00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8004daa:	2020      	movs	r0, #32
 8004dac:	f7ff ffa8 	bl	8004d00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); // 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode;
 8004db0:	2010      	movs	r0, #16
 8004db2:	f7ff ffa5 	bl	8004d00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004db6:	20b0      	movs	r0, #176	; 0xb0
 8004db8:	f7ff ffa2 	bl	8004d00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8004dbc:	20c8      	movs	r0, #200	; 0xc8
 8004dbe:	f7ff ff9f 	bl	8004d00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //---set low column address
 8004dc2:	2000      	movs	r0, #0
 8004dc4:	f7ff ff9c 	bl	8004d00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8004dc8:	2010      	movs	r0, #16
 8004dca:	f7ff ff99 	bl	8004d00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8004dce:	2040      	movs	r0, #64	; 0x40
 8004dd0:	f7ff ff96 	bl	8004d00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8004dd4:	2081      	movs	r0, #129	; 0x81
 8004dd6:	f7ff ff93 	bl	8004d00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8004dda:	20ff      	movs	r0, #255	; 0xff
 8004ddc:	f7ff ff90 	bl	8004d00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8004de0:	20a1      	movs	r0, #161	; 0xa1
 8004de2:	f7ff ff8d 	bl	8004d00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA6); //--set normal color
 8004de6:	20a6      	movs	r0, #166	; 0xa6
 8004de8:	f7ff ff8a 	bl	8004d00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8004dec:	20a8      	movs	r0, #168	; 0xa8
 8004dee:	f7ff ff87 	bl	8004d00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8004df2:	203f      	movs	r0, #63	; 0x3f
 8004df4:	f7ff ff84 	bl	8004d00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004df8:	20a4      	movs	r0, #164	; 0xa4
 8004dfa:	f7ff ff81 	bl	8004d00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8004dfe:	20d3      	movs	r0, #211	; 0xd3
 8004e00:	f7ff ff7e 	bl	8004d00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8004e04:	2000      	movs	r0, #0
 8004e06:	f7ff ff7b 	bl	8004d00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8004e0a:	20d5      	movs	r0, #213	; 0xd5
 8004e0c:	f7ff ff78 	bl	8004d00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004e10:	20f0      	movs	r0, #240	; 0xf0
 8004e12:	f7ff ff75 	bl	8004d00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8004e16:	20d9      	movs	r0, #217	; 0xd9
 8004e18:	f7ff ff72 	bl	8004d00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8004e1c:	2022      	movs	r0, #34	; 0x22
 8004e1e:	f7ff ff6f 	bl	8004d00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8004e22:	20da      	movs	r0, #218	; 0xda
 8004e24:	f7ff ff6c 	bl	8004d00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8004e28:	2012      	movs	r0, #18
 8004e2a:	f7ff ff69 	bl	8004d00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 8004e2e:	20db      	movs	r0, #219	; 0xdb
 8004e30:	f7ff ff66 	bl	8004d00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004e34:	2020      	movs	r0, #32
 8004e36:	f7ff ff63 	bl	8004d00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8004e3a:	208d      	movs	r0, #141	; 0x8d
 8004e3c:	f7ff ff60 	bl	8004d00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8004e40:	2014      	movs	r0, #20
 8004e42:	f7ff ff5d 	bl	8004d00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8004e46:	20af      	movs	r0, #175	; 0xaf
 8004e48:	f7ff ff5a 	bl	8004d00 <ssd1306_WriteCommand>
    ssd1306_Fill(Black);
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	f7ff ff7d 	bl	8004d4c <ssd1306_Fill>
    ssd1306_UpdateScreen();
 8004e52:	f7ff ff89 	bl	8004d68 <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 8004e56:	2200      	movs	r2, #0
 8004e58:	4b02      	ldr	r3, [pc, #8]	; (8004e64 <ssd1306_Init+0xc8>)
 8004e5a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8004e5c:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 8004e5e:	2201      	movs	r2, #1
 8004e60:	715a      	strb	r2, [r3, #5]
 8004e62:	bd08      	pop	{r3, pc}
 8004e64:	2000011a 	.word	0x2000011a

08004e68 <ssd1306_DrawPixel>:
//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004e68:	0603      	lsls	r3, r0, #24
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8004e6a:	b510      	push	{r4, lr}
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004e6c:	d41a      	bmi.n	8004ea4 <ssd1306_DrawPixel+0x3c>
 8004e6e:	293f      	cmp	r1, #63	; 0x3f
 8004e70:	d818      	bhi.n	8004ea4 <ssd1306_DrawPixel+0x3c>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8004e72:	4b0d      	ldr	r3, [pc, #52]	; (8004ea8 <ssd1306_DrawPixel+0x40>)
 8004e74:	791b      	ldrb	r3, [r3, #4]
 8004e76:	b113      	cbz	r3, 8004e7e <ssd1306_DrawPixel+0x16>
        color = (SSD1306_COLOR)!color;
 8004e78:	fab2 f282 	clz	r2, r2
 8004e7c:	0952      	lsrs	r2, r2, #5
 8004e7e:	08cc      	lsrs	r4, r1, #3
    }
    
    // Draw in the right color
    if(color == White) {
 8004e80:	2a01      	cmp	r2, #1
 8004e82:	4b0a      	ldr	r3, [pc, #40]	; (8004eac <ssd1306_DrawPixel+0x44>)
 8004e84:	f001 0107 	and.w	r1, r1, #7
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004e88:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
    if(color == White) {
 8004e8c:	d104      	bne.n	8004e98 <ssd1306_DrawPixel+0x30>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004e8e:	408a      	lsls	r2, r1
 8004e90:	5c19      	ldrb	r1, [r3, r0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	541a      	strb	r2, [r3, r0]
 8004e96:	bd10      	pop	{r4, pc}
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004e98:	2201      	movs	r2, #1
 8004e9a:	408a      	lsls	r2, r1
 8004e9c:	5c19      	ldrb	r1, [r3, r0]
 8004e9e:	ea21 0102 	bic.w	r1, r1, r2
 8004ea2:	5419      	strb	r1, [r3, r0]
 8004ea4:	bd10      	pop	{r4, pc}
 8004ea6:	bf00      	nop
 8004ea8:	2000011a 	.word	0x2000011a
 8004eac:	20000120 	.word	0x20000120

08004eb0 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch         => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color     => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8004eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eb4:	b087      	sub	sp, #28
 8004eb6:	4607      	mov	r7, r0
 8004eb8:	a806      	add	r0, sp, #24
 8004eba:	e900 0006 	stmdb	r0, {r1, r2}
 8004ebe:	469b      	mov	fp, r3
    uint32_t i, b, j;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8004ec0:	4b20      	ldr	r3, [pc, #128]	; (8004f44 <ssd1306_WriteChar+0x94>)
 8004ec2:	f89d 9010 	ldrb.w	r9, [sp, #16]
 8004ec6:	881c      	ldrh	r4, [r3, #0]
 8004ec8:	9301      	str	r3, [sp, #4]
 8004eca:	eb04 0209 	add.w	r2, r4, r9
 8004ece:	2a7f      	cmp	r2, #127	; 0x7f
 8004ed0:	dc36      	bgt.n	8004f40 <ssd1306_WriteChar+0x90>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8004ed2:	885b      	ldrh	r3, [r3, #2]
 8004ed4:	f89d a011 	ldrb.w	sl, [sp, #17]
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	eb03 020a 	add.w	r2, r3, sl
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8004ede:	2a3f      	cmp	r2, #63	; 0x3f
 8004ee0:	dc2e      	bgt.n	8004f40 <ssd1306_WriteChar+0x90>
        return 0;
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8004ee2:	2600      	movs	r6, #0
 8004ee4:	f1a7 0220 	sub.w	r2, r7, #32
 8004ee8:	fb0a f302 	mul.w	r3, sl, r2
 8004eec:	9303      	str	r3, [sp, #12]
    for(i = 0; i < Font.FontHeight; i++) {
 8004eee:	4556      	cmp	r6, sl
 8004ef0:	d306      	bcc.n	8004f00 <ssd1306_WriteChar+0x50>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8004ef2:	9b01      	ldr	r3, [sp, #4]
 8004ef4:	444c      	add	r4, r9
 8004ef6:	801c      	strh	r4, [r3, #0]
    
    // Return written char for validation
    return ch;
}
 8004ef8:	4638      	mov	r0, r7
 8004efa:	b007      	add	sp, #28
 8004efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for(j = 0; j < Font.FontWidth; j++) {
 8004f00:	2500      	movs	r5, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8004f02:	9b03      	ldr	r3, [sp, #12]
 8004f04:	9905      	ldr	r1, [sp, #20]
 8004f06:	18f2      	adds	r2, r6, r3
 8004f08:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 8004f0c:	9302      	str	r3, [sp, #8]
 8004f0e:	9b00      	ldr	r3, [sp, #0]
 8004f10:	eb03 0806 	add.w	r8, r3, r6
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004f14:	fa5f f888 	uxtb.w	r8, r8
        for(j = 0; j < Font.FontWidth; j++) {
 8004f18:	454d      	cmp	r5, r9
 8004f1a:	d301      	bcc.n	8004f20 <ssd1306_WriteChar+0x70>
    for(i = 0; i < Font.FontHeight; i++) {
 8004f1c:	3601      	adds	r6, #1
 8004f1e:	e7e6      	b.n	8004eee <ssd1306_WriteChar+0x3e>
            if((b << j) & 0x8000)  {
 8004f20:	9b02      	ldr	r3, [sp, #8]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004f22:	1928      	adds	r0, r5, r4
            if((b << j) & 0x8000)  {
 8004f24:	fa03 f205 	lsl.w	r2, r3, r5
 8004f28:	0413      	lsls	r3, r2, #16
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004f2a:	bf56      	itet	pl
 8004f2c:	fabb f28b 	clzpl	r2, fp
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004f30:	465a      	movmi	r2, fp
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004f32:	0952      	lsrpl	r2, r2, #5
 8004f34:	4641      	mov	r1, r8
 8004f36:	b2c0      	uxtb	r0, r0
 8004f38:	f7ff ff96 	bl	8004e68 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8004f3c:	3501      	adds	r5, #1
 8004f3e:	e7eb      	b.n	8004f18 <ssd1306_WriteChar+0x68>
        return 0;
 8004f40:	2700      	movs	r7, #0
 8004f42:	e7d9      	b.n	8004ef8 <ssd1306_WriteChar+0x48>
 8004f44:	2000011a 	.word	0x2000011a

08004f48 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8004f48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f4a:	461f      	mov	r7, r3
 8004f4c:	466d      	mov	r5, sp
 8004f4e:	e88d 0006 	stmia.w	sp, {r1, r2}
 8004f52:	1e46      	subs	r6, r0, #1
    // Write until null-byte
    while (*str) {
 8004f54:	7874      	ldrb	r4, [r6, #1]
 8004f56:	b14c      	cbz	r4, 8004f6c <ssd1306_WriteString+0x24>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8004f58:	e895 0006 	ldmia.w	r5, {r1, r2}
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	463b      	mov	r3, r7
 8004f60:	f7ff ffa6 	bl	8004eb0 <ssd1306_WriteChar>
 8004f64:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 8004f68:	42a0      	cmp	r0, r4
 8004f6a:	d0f3      	beq.n	8004f54 <ssd1306_WriteString+0xc>
        str++;
    }
    
    // Everything ok
    return *str;
}
 8004f6c:	4620      	mov	r0, r4
 8004f6e:	b003      	add	sp, #12
 8004f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004f74 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
    SSD1306.CurrentX = x;
 8004f74:	4b01      	ldr	r3, [pc, #4]	; (8004f7c <ssd1306_SetCursor+0x8>)
 8004f76:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 8004f78:	8059      	strh	r1, [r3, #2]
 8004f7a:	4770      	bx	lr
 8004f7c:	2000011a 	.word	0x2000011a

08004f80 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004f80:	4b0e      	ldr	r3, [pc, #56]	; (8004fbc <HAL_MspInit+0x3c>)
{
 8004f82:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8004f84:	699a      	ldr	r2, [r3, #24]
 8004f86:	f042 0201 	orr.w	r2, r2, #1
 8004f8a:	619a      	str	r2, [r3, #24]
 8004f8c:	699a      	ldr	r2, [r3, #24]
 8004f8e:	f002 0201 	and.w	r2, r2, #1
 8004f92:	9200      	str	r2, [sp, #0]
 8004f94:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f96:	69da      	ldr	r2, [r3, #28]
 8004f98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004f9c:	61da      	str	r2, [r3, #28]
 8004f9e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004fa0:	4a07      	ldr	r2, [pc, #28]	; (8004fc0 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa6:	9301      	str	r3, [sp, #4]
 8004fa8:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004faa:	6853      	ldr	r3, [r2, #4]
 8004fac:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004fb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004fb4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004fb6:	b002      	add	sp, #8
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	40021000 	.word	0x40021000
 8004fc0:	40010000 	.word	0x40010000

08004fc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004fc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if(htim_base->Instance==TIM4)
 8004fc6:	6802      	ldr	r2, [r0, #0]
 8004fc8:	4b1f      	ldr	r3, [pc, #124]	; (8005048 <HAL_TIM_Base_MspInit+0x84>)
{
 8004fca:	4604      	mov	r4, r0
  if(htim_base->Instance==TIM4)
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d112      	bne.n	8004ff6 <HAL_TIM_Base_MspInit+0x32>
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */

    __HAL_RCC_TIM4_CLK_ENABLE();
 8004fd0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004fd4:	69da      	ldr	r2, [r3, #28]
    /* TIM4 interrupt Init */

    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004fd6:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004fd8:	f042 0204 	orr.w	r2, r2, #4
 8004fdc:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004fde:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004fe0:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004fe2:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	9301      	str	r3, [sp, #4]
 8004fea:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004fec:	f7fc f81a 	bl	8001024 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004ff0:	201e      	movs	r0, #30
 8004ff2:	f7fc f84b 	bl	800108c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

  if(htim_base->Instance==TIM1)
 8004ff6:	6822      	ldr	r2, [r4, #0]
 8004ff8:	4b14      	ldr	r3, [pc, #80]	; (800504c <HAL_TIM_Base_MspInit+0x88>)
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d112      	bne.n	8005024 <HAL_TIM_Base_MspInit+0x60>
   {
   /* USER CODE BEGIN TIM1_MspInit 0 */

   /* USER CODE END TIM1_MspInit 0 */
     /* Peripheral clock enable */
     __HAL_RCC_TIM1_CLK_ENABLE();
 8004ffe:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8005002:	699a      	ldr	r2, [r3, #24]
     /* TIM1 interrupt Init */
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8005004:	2019      	movs	r0, #25
     __HAL_RCC_TIM1_CLK_ENABLE();
 8005006:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800500a:	619a      	str	r2, [r3, #24]
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800500c:	2200      	movs	r2, #0
     __HAL_RCC_TIM1_CLK_ENABLE();
 800500e:	699b      	ldr	r3, [r3, #24]
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8005010:	4611      	mov	r1, r2
     __HAL_RCC_TIM1_CLK_ENABLE();
 8005012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005016:	9302      	str	r3, [sp, #8]
 8005018:	9b02      	ldr	r3, [sp, #8]
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800501a:	f7fc f803 	bl	8001024 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800501e:	2019      	movs	r0, #25
 8005020:	f7fc f834 	bl	800108c <HAL_NVIC_EnableIRQ>
   /* USER CODE BEGIN TIM1_MspInit 1 */

   /* USER CODE END TIM1_MspInit 1 */
   }

  if(htim_base->Instance==TIM2)
 8005024:	6823      	ldr	r3, [r4, #0]
 8005026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800502a:	d10a      	bne.n	8005042 <HAL_TIM_Base_MspInit+0x7e>
   {
   /* USER CODE BEGIN TIM2_MspInit 0 */

   /* USER CODE END TIM2_MspInit 0 */
     /* Peripheral clock enable */
     __HAL_RCC_TIM2_CLK_ENABLE();
 800502c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8005030:	69da      	ldr	r2, [r3, #28]
 8005032:	f042 0201 	orr.w	r2, r2, #1
 8005036:	61da      	str	r2, [r3, #28]
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	9303      	str	r3, [sp, #12]
 8005040:	9b03      	ldr	r3, [sp, #12]
   /* USER CODE BEGIN TIM2_MspInit 1 */

   /* USER CODE END TIM2_MspInit 1 */
   }

}
 8005042:	b004      	add	sp, #16
 8005044:	bd10      	pop	{r4, pc}
 8005046:	bf00      	nop
 8005048:	40000800 	.word	0x40000800
 800504c:	40012c00 	.word	0x40012c00

08005050 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005050:	b510      	push	{r4, lr}
 8005052:	4604      	mov	r4, r0
 8005054:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005056:	2210      	movs	r2, #16
 8005058:	2100      	movs	r1, #0
 800505a:	a802      	add	r0, sp, #8
 800505c:	f000 f94e 	bl	80052fc <memset>
  if(hi2c->Instance==I2C2)
 8005060:	6822      	ldr	r2, [r4, #0]
 8005062:	4b11      	ldr	r3, [pc, #68]	; (80050a8 <HAL_I2C_MspInit+0x58>)
 8005064:	429a      	cmp	r2, r3
 8005066:	d11d      	bne.n	80050a4 <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005068:	4c10      	ldr	r4, [pc, #64]	; (80050ac <HAL_I2C_MspInit+0x5c>)
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800506a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800506c:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800506e:	4810      	ldr	r0, [pc, #64]	; (80050b0 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005070:	f043 0308 	orr.w	r3, r3, #8
 8005074:	61a3      	str	r3, [r4, #24]
 8005076:	69a3      	ldr	r3, [r4, #24]
 8005078:	f003 0308 	and.w	r3, r3, #8
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005080:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005084:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005086:	2312      	movs	r3, #18
 8005088:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800508a:	2303      	movs	r3, #3
 800508c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800508e:	f7fc f82d 	bl	80010ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005092:	69e3      	ldr	r3, [r4, #28]
 8005094:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005098:	61e3      	str	r3, [r4, #28]
 800509a:	69e3      	ldr	r3, [r4, #28]
 800509c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050a0:	9301      	str	r3, [sp, #4]
 80050a2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80050a4:	b006      	add	sp, #24
 80050a6:	bd10      	pop	{r4, pc}
 80050a8:	40005800 	.word	0x40005800
 80050ac:	40021000 	.word	0x40021000
 80050b0:	40010c00 	.word	0x40010c00

080050b4 <HAL_TIM_MspPostInit>:

}


void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80050b4:	b510      	push	{r4, lr}
 80050b6:	4604      	mov	r4, r0
 80050b8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050ba:	2210      	movs	r2, #16
 80050bc:	2100      	movs	r1, #0
 80050be:	a802      	add	r0, sp, #8
 80050c0:	f000 f91c 	bl	80052fc <memset>
  if(htim->Instance==TIM4)
 80050c4:	6822      	ldr	r2, [r4, #0]
 80050c6:	4b18      	ldr	r3, [pc, #96]	; (8005128 <HAL_TIM_MspPostInit+0x74>)
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d113      	bne.n	80050f4 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050cc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80050d0:	699a      	ldr	r2, [r3, #24]
    PB6     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050d2:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050d4:	f042 0208 	orr.w	r2, r2, #8
 80050d8:	619a      	str	r2, [r3, #24]
 80050da:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050dc:	4813      	ldr	r0, [pc, #76]	; (800512c <HAL_TIM_MspPostInit+0x78>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050de:	f003 0308 	and.w	r3, r3, #8
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80050e6:	2340      	movs	r3, #64	; 0x40
 80050e8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ea:	2302      	movs	r3, #2
 80050ec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050ee:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050f0:	f7fb fffc 	bl	80010ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

  if(htim->Instance==TIM2)
 80050f4:	6823      	ldr	r3, [r4, #0]
 80050f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050fa:	d113      	bne.n	8005124 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050fc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8005100:	699a      	ldr	r2, [r3, #24]
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005102:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005104:	f042 0204 	orr.w	r2, r2, #4
 8005108:	619a      	str	r2, [r3, #24]
 800510a:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800510c:	4808      	ldr	r0, [pc, #32]	; (8005130 <HAL_TIM_MspPostInit+0x7c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800510e:	f003 0304 	and.w	r3, r3, #4
 8005112:	9301      	str	r3, [sp, #4]
 8005114:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8005116:	2307      	movs	r3, #7
 8005118:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800511a:	2302      	movs	r3, #2
 800511c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800511e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005120:	f7fb ffe4 	bl	80010ec <HAL_GPIO_Init>

  /* USER CODE END TIM2_MspPostInit 1 */
  }


}
 8005124:	b006      	add	sp, #24
 8005126:	bd10      	pop	{r4, pc}
 8005128:	40000800 	.word	0x40000800
 800512c:	40010c00 	.word	0x40010c00
 8005130:	40010800 	.word	0x40010800

08005134 <HAL_TIM_Base_MspDeInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM4)
 8005134:	6802      	ldr	r2, [r0, #0]
 8005136:	4b11      	ldr	r3, [pc, #68]	; (800517c <HAL_TIM_Base_MspDeInit+0x48>)
{
 8005138:	b510      	push	{r4, lr}
  if(htim_base->Instance==TIM4)
 800513a:	429a      	cmp	r2, r3
{
 800513c:	4604      	mov	r4, r0
  if(htim_base->Instance==TIM4)
 800513e:	d107      	bne.n	8005150 <HAL_TIM_Base_MspDeInit+0x1c>
  /* USER CODE BEGIN TIM4_MspDeInit 0 */

  /* USER CODE END TIM4_MspDeInit 0 */
    /* Peripheral clock disable */

    __HAL_RCC_TIM4_CLK_DISABLE();
 8005140:	4a0f      	ldr	r2, [pc, #60]	; (8005180 <HAL_TIM_Base_MspDeInit+0x4c>)

    /* TIM4 interrupt DeInit */

    HAL_NVIC_DisableIRQ(TIM4_IRQn);
 8005142:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_DISABLE();
 8005144:	69d3      	ldr	r3, [r2, #28]
 8005146:	f023 0304 	bic.w	r3, r3, #4
 800514a:	61d3      	str	r3, [r2, #28]
    HAL_NVIC_DisableIRQ(TIM4_IRQn);
 800514c:	f7fb ffaa 	bl	80010a4 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM4_MspDeInit 1 */

  /* USER CODE END TIM4_MspDeInit 1 */
  }

  if(htim_base->Instance==TIM1)
 8005150:	6822      	ldr	r2, [r4, #0]
 8005152:	4b0c      	ldr	r3, [pc, #48]	; (8005184 <HAL_TIM_Base_MspDeInit+0x50>)
 8005154:	429a      	cmp	r2, r3
 8005156:	d107      	bne.n	8005168 <HAL_TIM_Base_MspDeInit+0x34>
    {
    /* USER CODE BEGIN TIM1_MspDeInit 0 */

    /* USER CODE END TIM1_MspDeInit 0 */
      /* Peripheral clock disable */
      __HAL_RCC_TIM1_CLK_DISABLE();
 8005158:	4a09      	ldr	r2, [pc, #36]	; (8005180 <HAL_TIM_Base_MspDeInit+0x4c>)

      /* TIM1 interrupt DeInit */
      HAL_NVIC_DisableIRQ(TIM1_UP_IRQn);
 800515a:	2019      	movs	r0, #25
      __HAL_RCC_TIM1_CLK_DISABLE();
 800515c:	6993      	ldr	r3, [r2, #24]
 800515e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005162:	6193      	str	r3, [r2, #24]
      HAL_NVIC_DisableIRQ(TIM1_UP_IRQn);
 8005164:	f7fb ff9e 	bl	80010a4 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN TIM1_MspDeInit 1 */

    /* USER CODE END TIM1_MspDeInit 1 */
    }
  if(htim_base->Instance==TIM2)
 8005168:	6823      	ldr	r3, [r4, #0]
 800516a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 800516e:	bf01      	itttt	eq
 8005170:	4a03      	ldreq	r2, [pc, #12]	; (8005180 <HAL_TIM_Base_MspDeInit+0x4c>)
 8005172:	69d3      	ldreq	r3, [r2, #28]
 8005174:	f023 0301 	biceq.w	r3, r3, #1
 8005178:	61d3      	streq	r3, [r2, #28]
 800517a:	bd10      	pop	{r4, pc}
 800517c:	40000800 	.word	0x40000800
 8005180:	40021000 	.word	0x40021000
 8005184:	40012c00 	.word	0x40012c00

08005188 <NMI_Handler>:
 8005188:	4770      	bx	lr

0800518a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800518a:	e7fe      	b.n	800518a <HardFault_Handler>

0800518c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800518c:	e7fe      	b.n	800518c <MemManage_Handler>

0800518e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800518e:	e7fe      	b.n	800518e <BusFault_Handler>

08005190 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005190:	e7fe      	b.n	8005190 <UsageFault_Handler>

08005192 <SVC_Handler>:
 8005192:	4770      	bx	lr

08005194 <DebugMon_Handler>:
 8005194:	4770      	bx	lr

08005196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005196:	4770      	bx	lr

08005198 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005198:	f7fb bf0e 	b.w	8000fb8 <HAL_IncTick>

0800519c <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800519c:	4801      	ldr	r0, [pc, #4]	; (80051a4 <TIM4_IRQHandler+0x8>)
 800519e:	f7fd bb7d 	b.w	800289c <HAL_TIM_IRQHandler>
 80051a2:	bf00      	nop
 80051a4:	2000075c 	.word	0x2000075c

080051a8 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80051a8:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80051aa:	4b0a      	ldr	r3, [pc, #40]	; (80051d4 <_sbrk+0x2c>)
{
 80051ac:	4602      	mov	r2, r0
	if (heap_end == 0)
 80051ae:	6819      	ldr	r1, [r3, #0]
 80051b0:	b909      	cbnz	r1, 80051b6 <_sbrk+0xe>
		heap_end = &end;
 80051b2:	4909      	ldr	r1, [pc, #36]	; (80051d8 <_sbrk+0x30>)
 80051b4:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80051b6:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80051b8:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80051ba:	4402      	add	r2, r0
 80051bc:	428a      	cmp	r2, r1
 80051be:	d906      	bls.n	80051ce <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80051c0:	f000 f858 	bl	8005274 <__errno>
 80051c4:	230c      	movs	r3, #12
 80051c6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80051c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051cc:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80051ce:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80051d0:	bd08      	pop	{r3, pc}
 80051d2:	bf00      	nop
 80051d4:	20000520 	.word	0x20000520
 80051d8:	2000196c 	.word	0x2000196c

080051dc <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80051dc:	4b0f      	ldr	r3, [pc, #60]	; (800521c <SystemInit+0x40>)
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	f042 0201 	orr.w	r2, r2, #1
 80051e4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80051e6:	6859      	ldr	r1, [r3, #4]
 80051e8:	4a0d      	ldr	r2, [pc, #52]	; (8005220 <SystemInit+0x44>)
 80051ea:	400a      	ands	r2, r1
 80051ec:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80051f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80051f8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005200:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8005208:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800520a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800520e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005210:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005214:	4b03      	ldr	r3, [pc, #12]	; (8005224 <SystemInit+0x48>)
 8005216:	609a      	str	r2, [r3, #8]
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	40021000 	.word	0x40021000
 8005220:	f8ff0000 	.word	0xf8ff0000
 8005224:	e000ed00 	.word	0xe000ed00

08005228 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005228:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800522a:	e003      	b.n	8005234 <LoopCopyDataInit>

0800522c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800522c:	4b0b      	ldr	r3, [pc, #44]	; (800525c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800522e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005230:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005232:	3104      	adds	r1, #4

08005234 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005234:	480a      	ldr	r0, [pc, #40]	; (8005260 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005236:	4b0b      	ldr	r3, [pc, #44]	; (8005264 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005238:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800523a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800523c:	d3f6      	bcc.n	800522c <CopyDataInit>
  ldr r2, =_sbss
 800523e:	4a0a      	ldr	r2, [pc, #40]	; (8005268 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005240:	e002      	b.n	8005248 <LoopFillZerobss>

08005242 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005242:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005244:	f842 3b04 	str.w	r3, [r2], #4

08005248 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005248:	4b08      	ldr	r3, [pc, #32]	; (800526c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800524a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800524c:	d3f9      	bcc.n	8005242 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800524e:	f7ff ffc5 	bl	80051dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005252:	f000 f815 	bl	8005280 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005256:	f7ff f989 	bl	800456c <main>
  bx lr
 800525a:	4770      	bx	lr
  ldr r3, =_sidata
 800525c:	0800651c 	.word	0x0800651c
  ldr r0, =_sdata
 8005260:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005264:	20000088 	.word	0x20000088
  ldr r2, =_sbss
 8005268:	20000088 	.word	0x20000088
  ldr r3, = _ebss
 800526c:	2000196c 	.word	0x2000196c

08005270 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005270:	e7fe      	b.n	8005270 <ADC1_2_IRQHandler>
	...

08005274 <__errno>:
 8005274:	4b01      	ldr	r3, [pc, #4]	; (800527c <__errno+0x8>)
 8005276:	6818      	ldr	r0, [r3, #0]
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	20000024 	.word	0x20000024

08005280 <__libc_init_array>:
 8005280:	b570      	push	{r4, r5, r6, lr}
 8005282:	2500      	movs	r5, #0
 8005284:	4e0c      	ldr	r6, [pc, #48]	; (80052b8 <__libc_init_array+0x38>)
 8005286:	4c0d      	ldr	r4, [pc, #52]	; (80052bc <__libc_init_array+0x3c>)
 8005288:	1ba4      	subs	r4, r4, r6
 800528a:	10a4      	asrs	r4, r4, #2
 800528c:	42a5      	cmp	r5, r4
 800528e:	d109      	bne.n	80052a4 <__libc_init_array+0x24>
 8005290:	f000 fc5e 	bl	8005b50 <_init>
 8005294:	2500      	movs	r5, #0
 8005296:	4e0a      	ldr	r6, [pc, #40]	; (80052c0 <__libc_init_array+0x40>)
 8005298:	4c0a      	ldr	r4, [pc, #40]	; (80052c4 <__libc_init_array+0x44>)
 800529a:	1ba4      	subs	r4, r4, r6
 800529c:	10a4      	asrs	r4, r4, #2
 800529e:	42a5      	cmp	r5, r4
 80052a0:	d105      	bne.n	80052ae <__libc_init_array+0x2e>
 80052a2:	bd70      	pop	{r4, r5, r6, pc}
 80052a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052a8:	4798      	blx	r3
 80052aa:	3501      	adds	r5, #1
 80052ac:	e7ee      	b.n	800528c <__libc_init_array+0xc>
 80052ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052b2:	4798      	blx	r3
 80052b4:	3501      	adds	r5, #1
 80052b6:	e7f2      	b.n	800529e <__libc_init_array+0x1e>
 80052b8:	08006514 	.word	0x08006514
 80052bc:	08006514 	.word	0x08006514
 80052c0:	08006514 	.word	0x08006514
 80052c4:	08006518 	.word	0x08006518

080052c8 <memmove>:
 80052c8:	4288      	cmp	r0, r1
 80052ca:	b510      	push	{r4, lr}
 80052cc:	eb01 0302 	add.w	r3, r1, r2
 80052d0:	d803      	bhi.n	80052da <memmove+0x12>
 80052d2:	1e42      	subs	r2, r0, #1
 80052d4:	4299      	cmp	r1, r3
 80052d6:	d10c      	bne.n	80052f2 <memmove+0x2a>
 80052d8:	bd10      	pop	{r4, pc}
 80052da:	4298      	cmp	r0, r3
 80052dc:	d2f9      	bcs.n	80052d2 <memmove+0xa>
 80052de:	1881      	adds	r1, r0, r2
 80052e0:	1ad2      	subs	r2, r2, r3
 80052e2:	42d3      	cmn	r3, r2
 80052e4:	d100      	bne.n	80052e8 <memmove+0x20>
 80052e6:	bd10      	pop	{r4, pc}
 80052e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052ec:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80052f0:	e7f7      	b.n	80052e2 <memmove+0x1a>
 80052f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052f6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80052fa:	e7eb      	b.n	80052d4 <memmove+0xc>

080052fc <memset>:
 80052fc:	4603      	mov	r3, r0
 80052fe:	4402      	add	r2, r0
 8005300:	4293      	cmp	r3, r2
 8005302:	d100      	bne.n	8005306 <memset+0xa>
 8005304:	4770      	bx	lr
 8005306:	f803 1b01 	strb.w	r1, [r3], #1
 800530a:	e7f9      	b.n	8005300 <memset+0x4>

0800530c <sniprintf>:
 800530c:	b40c      	push	{r2, r3}
 800530e:	b530      	push	{r4, r5, lr}
 8005310:	4b17      	ldr	r3, [pc, #92]	; (8005370 <sniprintf+0x64>)
 8005312:	1e0c      	subs	r4, r1, #0
 8005314:	b09d      	sub	sp, #116	; 0x74
 8005316:	681d      	ldr	r5, [r3, #0]
 8005318:	da08      	bge.n	800532c <sniprintf+0x20>
 800531a:	238b      	movs	r3, #139	; 0x8b
 800531c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005320:	602b      	str	r3, [r5, #0]
 8005322:	b01d      	add	sp, #116	; 0x74
 8005324:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005328:	b002      	add	sp, #8
 800532a:	4770      	bx	lr
 800532c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005330:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005334:	bf0c      	ite	eq
 8005336:	4623      	moveq	r3, r4
 8005338:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800533c:	9304      	str	r3, [sp, #16]
 800533e:	9307      	str	r3, [sp, #28]
 8005340:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005344:	9002      	str	r0, [sp, #8]
 8005346:	9006      	str	r0, [sp, #24]
 8005348:	f8ad 3016 	strh.w	r3, [sp, #22]
 800534c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800534e:	ab21      	add	r3, sp, #132	; 0x84
 8005350:	a902      	add	r1, sp, #8
 8005352:	4628      	mov	r0, r5
 8005354:	9301      	str	r3, [sp, #4]
 8005356:	f000 f869 	bl	800542c <_svfiprintf_r>
 800535a:	1c43      	adds	r3, r0, #1
 800535c:	bfbc      	itt	lt
 800535e:	238b      	movlt	r3, #139	; 0x8b
 8005360:	602b      	strlt	r3, [r5, #0]
 8005362:	2c00      	cmp	r4, #0
 8005364:	d0dd      	beq.n	8005322 <sniprintf+0x16>
 8005366:	2200      	movs	r2, #0
 8005368:	9b02      	ldr	r3, [sp, #8]
 800536a:	701a      	strb	r2, [r3, #0]
 800536c:	e7d9      	b.n	8005322 <sniprintf+0x16>
 800536e:	bf00      	nop
 8005370:	20000024 	.word	0x20000024

08005374 <__ssputs_r>:
 8005374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005378:	688e      	ldr	r6, [r1, #8]
 800537a:	4682      	mov	sl, r0
 800537c:	429e      	cmp	r6, r3
 800537e:	460c      	mov	r4, r1
 8005380:	4691      	mov	r9, r2
 8005382:	4698      	mov	r8, r3
 8005384:	d835      	bhi.n	80053f2 <__ssputs_r+0x7e>
 8005386:	898a      	ldrh	r2, [r1, #12]
 8005388:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800538c:	d031      	beq.n	80053f2 <__ssputs_r+0x7e>
 800538e:	2302      	movs	r3, #2
 8005390:	6825      	ldr	r5, [r4, #0]
 8005392:	6909      	ldr	r1, [r1, #16]
 8005394:	1a6f      	subs	r7, r5, r1
 8005396:	6965      	ldr	r5, [r4, #20]
 8005398:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800539c:	fb95 f5f3 	sdiv	r5, r5, r3
 80053a0:	f108 0301 	add.w	r3, r8, #1
 80053a4:	443b      	add	r3, r7
 80053a6:	429d      	cmp	r5, r3
 80053a8:	bf38      	it	cc
 80053aa:	461d      	movcc	r5, r3
 80053ac:	0553      	lsls	r3, r2, #21
 80053ae:	d531      	bpl.n	8005414 <__ssputs_r+0xa0>
 80053b0:	4629      	mov	r1, r5
 80053b2:	f000 fb2d 	bl	8005a10 <_malloc_r>
 80053b6:	4606      	mov	r6, r0
 80053b8:	b950      	cbnz	r0, 80053d0 <__ssputs_r+0x5c>
 80053ba:	230c      	movs	r3, #12
 80053bc:	f8ca 3000 	str.w	r3, [sl]
 80053c0:	89a3      	ldrh	r3, [r4, #12]
 80053c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053ca:	81a3      	strh	r3, [r4, #12]
 80053cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053d0:	463a      	mov	r2, r7
 80053d2:	6921      	ldr	r1, [r4, #16]
 80053d4:	f000 fac4 	bl	8005960 <memcpy>
 80053d8:	89a3      	ldrh	r3, [r4, #12]
 80053da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80053de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053e2:	81a3      	strh	r3, [r4, #12]
 80053e4:	6126      	str	r6, [r4, #16]
 80053e6:	443e      	add	r6, r7
 80053e8:	6026      	str	r6, [r4, #0]
 80053ea:	4646      	mov	r6, r8
 80053ec:	6165      	str	r5, [r4, #20]
 80053ee:	1bed      	subs	r5, r5, r7
 80053f0:	60a5      	str	r5, [r4, #8]
 80053f2:	4546      	cmp	r6, r8
 80053f4:	bf28      	it	cs
 80053f6:	4646      	movcs	r6, r8
 80053f8:	4649      	mov	r1, r9
 80053fa:	4632      	mov	r2, r6
 80053fc:	6820      	ldr	r0, [r4, #0]
 80053fe:	f7ff ff63 	bl	80052c8 <memmove>
 8005402:	68a3      	ldr	r3, [r4, #8]
 8005404:	2000      	movs	r0, #0
 8005406:	1b9b      	subs	r3, r3, r6
 8005408:	60a3      	str	r3, [r4, #8]
 800540a:	6823      	ldr	r3, [r4, #0]
 800540c:	441e      	add	r6, r3
 800540e:	6026      	str	r6, [r4, #0]
 8005410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005414:	462a      	mov	r2, r5
 8005416:	f000 fb59 	bl	8005acc <_realloc_r>
 800541a:	4606      	mov	r6, r0
 800541c:	2800      	cmp	r0, #0
 800541e:	d1e1      	bne.n	80053e4 <__ssputs_r+0x70>
 8005420:	6921      	ldr	r1, [r4, #16]
 8005422:	4650      	mov	r0, sl
 8005424:	f000 faa8 	bl	8005978 <_free_r>
 8005428:	e7c7      	b.n	80053ba <__ssputs_r+0x46>
	...

0800542c <_svfiprintf_r>:
 800542c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005430:	b09d      	sub	sp, #116	; 0x74
 8005432:	9303      	str	r3, [sp, #12]
 8005434:	898b      	ldrh	r3, [r1, #12]
 8005436:	4680      	mov	r8, r0
 8005438:	061c      	lsls	r4, r3, #24
 800543a:	460d      	mov	r5, r1
 800543c:	4616      	mov	r6, r2
 800543e:	d50f      	bpl.n	8005460 <_svfiprintf_r+0x34>
 8005440:	690b      	ldr	r3, [r1, #16]
 8005442:	b96b      	cbnz	r3, 8005460 <_svfiprintf_r+0x34>
 8005444:	2140      	movs	r1, #64	; 0x40
 8005446:	f000 fae3 	bl	8005a10 <_malloc_r>
 800544a:	6028      	str	r0, [r5, #0]
 800544c:	6128      	str	r0, [r5, #16]
 800544e:	b928      	cbnz	r0, 800545c <_svfiprintf_r+0x30>
 8005450:	230c      	movs	r3, #12
 8005452:	f8c8 3000 	str.w	r3, [r8]
 8005456:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800545a:	e0c4      	b.n	80055e6 <_svfiprintf_r+0x1ba>
 800545c:	2340      	movs	r3, #64	; 0x40
 800545e:	616b      	str	r3, [r5, #20]
 8005460:	2300      	movs	r3, #0
 8005462:	9309      	str	r3, [sp, #36]	; 0x24
 8005464:	2320      	movs	r3, #32
 8005466:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800546a:	2330      	movs	r3, #48	; 0x30
 800546c:	f04f 0b01 	mov.w	fp, #1
 8005470:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005474:	4637      	mov	r7, r6
 8005476:	463c      	mov	r4, r7
 8005478:	f814 3b01 	ldrb.w	r3, [r4], #1
 800547c:	2b00      	cmp	r3, #0
 800547e:	d13c      	bne.n	80054fa <_svfiprintf_r+0xce>
 8005480:	ebb7 0a06 	subs.w	sl, r7, r6
 8005484:	d00b      	beq.n	800549e <_svfiprintf_r+0x72>
 8005486:	4653      	mov	r3, sl
 8005488:	4632      	mov	r2, r6
 800548a:	4629      	mov	r1, r5
 800548c:	4640      	mov	r0, r8
 800548e:	f7ff ff71 	bl	8005374 <__ssputs_r>
 8005492:	3001      	adds	r0, #1
 8005494:	f000 80a2 	beq.w	80055dc <_svfiprintf_r+0x1b0>
 8005498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800549a:	4453      	add	r3, sl
 800549c:	9309      	str	r3, [sp, #36]	; 0x24
 800549e:	783b      	ldrb	r3, [r7, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 809b 	beq.w	80055dc <_svfiprintf_r+0x1b0>
 80054a6:	2300      	movs	r3, #0
 80054a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054ac:	9304      	str	r3, [sp, #16]
 80054ae:	9307      	str	r3, [sp, #28]
 80054b0:	9205      	str	r2, [sp, #20]
 80054b2:	9306      	str	r3, [sp, #24]
 80054b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054b8:	931a      	str	r3, [sp, #104]	; 0x68
 80054ba:	2205      	movs	r2, #5
 80054bc:	7821      	ldrb	r1, [r4, #0]
 80054be:	4850      	ldr	r0, [pc, #320]	; (8005600 <_svfiprintf_r+0x1d4>)
 80054c0:	f000 fa40 	bl	8005944 <memchr>
 80054c4:	1c67      	adds	r7, r4, #1
 80054c6:	9b04      	ldr	r3, [sp, #16]
 80054c8:	b9d8      	cbnz	r0, 8005502 <_svfiprintf_r+0xd6>
 80054ca:	06d9      	lsls	r1, r3, #27
 80054cc:	bf44      	itt	mi
 80054ce:	2220      	movmi	r2, #32
 80054d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80054d4:	071a      	lsls	r2, r3, #28
 80054d6:	bf44      	itt	mi
 80054d8:	222b      	movmi	r2, #43	; 0x2b
 80054da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80054de:	7822      	ldrb	r2, [r4, #0]
 80054e0:	2a2a      	cmp	r2, #42	; 0x2a
 80054e2:	d016      	beq.n	8005512 <_svfiprintf_r+0xe6>
 80054e4:	2100      	movs	r1, #0
 80054e6:	200a      	movs	r0, #10
 80054e8:	9a07      	ldr	r2, [sp, #28]
 80054ea:	4627      	mov	r7, r4
 80054ec:	783b      	ldrb	r3, [r7, #0]
 80054ee:	3401      	adds	r4, #1
 80054f0:	3b30      	subs	r3, #48	; 0x30
 80054f2:	2b09      	cmp	r3, #9
 80054f4:	d950      	bls.n	8005598 <_svfiprintf_r+0x16c>
 80054f6:	b1c9      	cbz	r1, 800552c <_svfiprintf_r+0x100>
 80054f8:	e011      	b.n	800551e <_svfiprintf_r+0xf2>
 80054fa:	2b25      	cmp	r3, #37	; 0x25
 80054fc:	d0c0      	beq.n	8005480 <_svfiprintf_r+0x54>
 80054fe:	4627      	mov	r7, r4
 8005500:	e7b9      	b.n	8005476 <_svfiprintf_r+0x4a>
 8005502:	4a3f      	ldr	r2, [pc, #252]	; (8005600 <_svfiprintf_r+0x1d4>)
 8005504:	463c      	mov	r4, r7
 8005506:	1a80      	subs	r0, r0, r2
 8005508:	fa0b f000 	lsl.w	r0, fp, r0
 800550c:	4318      	orrs	r0, r3
 800550e:	9004      	str	r0, [sp, #16]
 8005510:	e7d3      	b.n	80054ba <_svfiprintf_r+0x8e>
 8005512:	9a03      	ldr	r2, [sp, #12]
 8005514:	1d11      	adds	r1, r2, #4
 8005516:	6812      	ldr	r2, [r2, #0]
 8005518:	9103      	str	r1, [sp, #12]
 800551a:	2a00      	cmp	r2, #0
 800551c:	db01      	blt.n	8005522 <_svfiprintf_r+0xf6>
 800551e:	9207      	str	r2, [sp, #28]
 8005520:	e004      	b.n	800552c <_svfiprintf_r+0x100>
 8005522:	4252      	negs	r2, r2
 8005524:	f043 0302 	orr.w	r3, r3, #2
 8005528:	9207      	str	r2, [sp, #28]
 800552a:	9304      	str	r3, [sp, #16]
 800552c:	783b      	ldrb	r3, [r7, #0]
 800552e:	2b2e      	cmp	r3, #46	; 0x2e
 8005530:	d10d      	bne.n	800554e <_svfiprintf_r+0x122>
 8005532:	787b      	ldrb	r3, [r7, #1]
 8005534:	1c79      	adds	r1, r7, #1
 8005536:	2b2a      	cmp	r3, #42	; 0x2a
 8005538:	d132      	bne.n	80055a0 <_svfiprintf_r+0x174>
 800553a:	9b03      	ldr	r3, [sp, #12]
 800553c:	3702      	adds	r7, #2
 800553e:	1d1a      	adds	r2, r3, #4
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	9203      	str	r2, [sp, #12]
 8005544:	2b00      	cmp	r3, #0
 8005546:	bfb8      	it	lt
 8005548:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800554c:	9305      	str	r3, [sp, #20]
 800554e:	4c2d      	ldr	r4, [pc, #180]	; (8005604 <_svfiprintf_r+0x1d8>)
 8005550:	2203      	movs	r2, #3
 8005552:	7839      	ldrb	r1, [r7, #0]
 8005554:	4620      	mov	r0, r4
 8005556:	f000 f9f5 	bl	8005944 <memchr>
 800555a:	b138      	cbz	r0, 800556c <_svfiprintf_r+0x140>
 800555c:	2340      	movs	r3, #64	; 0x40
 800555e:	1b00      	subs	r0, r0, r4
 8005560:	fa03 f000 	lsl.w	r0, r3, r0
 8005564:	9b04      	ldr	r3, [sp, #16]
 8005566:	3701      	adds	r7, #1
 8005568:	4303      	orrs	r3, r0
 800556a:	9304      	str	r3, [sp, #16]
 800556c:	7839      	ldrb	r1, [r7, #0]
 800556e:	2206      	movs	r2, #6
 8005570:	4825      	ldr	r0, [pc, #148]	; (8005608 <_svfiprintf_r+0x1dc>)
 8005572:	1c7e      	adds	r6, r7, #1
 8005574:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005578:	f000 f9e4 	bl	8005944 <memchr>
 800557c:	2800      	cmp	r0, #0
 800557e:	d035      	beq.n	80055ec <_svfiprintf_r+0x1c0>
 8005580:	4b22      	ldr	r3, [pc, #136]	; (800560c <_svfiprintf_r+0x1e0>)
 8005582:	b9fb      	cbnz	r3, 80055c4 <_svfiprintf_r+0x198>
 8005584:	9b03      	ldr	r3, [sp, #12]
 8005586:	3307      	adds	r3, #7
 8005588:	f023 0307 	bic.w	r3, r3, #7
 800558c:	3308      	adds	r3, #8
 800558e:	9303      	str	r3, [sp, #12]
 8005590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005592:	444b      	add	r3, r9
 8005594:	9309      	str	r3, [sp, #36]	; 0x24
 8005596:	e76d      	b.n	8005474 <_svfiprintf_r+0x48>
 8005598:	fb00 3202 	mla	r2, r0, r2, r3
 800559c:	2101      	movs	r1, #1
 800559e:	e7a4      	b.n	80054ea <_svfiprintf_r+0xbe>
 80055a0:	2300      	movs	r3, #0
 80055a2:	240a      	movs	r4, #10
 80055a4:	4618      	mov	r0, r3
 80055a6:	9305      	str	r3, [sp, #20]
 80055a8:	460f      	mov	r7, r1
 80055aa:	783a      	ldrb	r2, [r7, #0]
 80055ac:	3101      	adds	r1, #1
 80055ae:	3a30      	subs	r2, #48	; 0x30
 80055b0:	2a09      	cmp	r2, #9
 80055b2:	d903      	bls.n	80055bc <_svfiprintf_r+0x190>
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d0ca      	beq.n	800554e <_svfiprintf_r+0x122>
 80055b8:	9005      	str	r0, [sp, #20]
 80055ba:	e7c8      	b.n	800554e <_svfiprintf_r+0x122>
 80055bc:	fb04 2000 	mla	r0, r4, r0, r2
 80055c0:	2301      	movs	r3, #1
 80055c2:	e7f1      	b.n	80055a8 <_svfiprintf_r+0x17c>
 80055c4:	ab03      	add	r3, sp, #12
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	462a      	mov	r2, r5
 80055ca:	4b11      	ldr	r3, [pc, #68]	; (8005610 <_svfiprintf_r+0x1e4>)
 80055cc:	a904      	add	r1, sp, #16
 80055ce:	4640      	mov	r0, r8
 80055d0:	f3af 8000 	nop.w
 80055d4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80055d8:	4681      	mov	r9, r0
 80055da:	d1d9      	bne.n	8005590 <_svfiprintf_r+0x164>
 80055dc:	89ab      	ldrh	r3, [r5, #12]
 80055de:	065b      	lsls	r3, r3, #25
 80055e0:	f53f af39 	bmi.w	8005456 <_svfiprintf_r+0x2a>
 80055e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055e6:	b01d      	add	sp, #116	; 0x74
 80055e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ec:	ab03      	add	r3, sp, #12
 80055ee:	9300      	str	r3, [sp, #0]
 80055f0:	462a      	mov	r2, r5
 80055f2:	4b07      	ldr	r3, [pc, #28]	; (8005610 <_svfiprintf_r+0x1e4>)
 80055f4:	a904      	add	r1, sp, #16
 80055f6:	4640      	mov	r0, r8
 80055f8:	f000 f884 	bl	8005704 <_printf_i>
 80055fc:	e7ea      	b.n	80055d4 <_svfiprintf_r+0x1a8>
 80055fe:	bf00      	nop
 8005600:	080064de 	.word	0x080064de
 8005604:	080064e4 	.word	0x080064e4
 8005608:	080064e8 	.word	0x080064e8
 800560c:	00000000 	.word	0x00000000
 8005610:	08005375 	.word	0x08005375

08005614 <_printf_common>:
 8005614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005618:	4691      	mov	r9, r2
 800561a:	461f      	mov	r7, r3
 800561c:	688a      	ldr	r2, [r1, #8]
 800561e:	690b      	ldr	r3, [r1, #16]
 8005620:	4606      	mov	r6, r0
 8005622:	4293      	cmp	r3, r2
 8005624:	bfb8      	it	lt
 8005626:	4613      	movlt	r3, r2
 8005628:	f8c9 3000 	str.w	r3, [r9]
 800562c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005630:	460c      	mov	r4, r1
 8005632:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005636:	b112      	cbz	r2, 800563e <_printf_common+0x2a>
 8005638:	3301      	adds	r3, #1
 800563a:	f8c9 3000 	str.w	r3, [r9]
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	0699      	lsls	r1, r3, #26
 8005642:	bf42      	ittt	mi
 8005644:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005648:	3302      	addmi	r3, #2
 800564a:	f8c9 3000 	strmi.w	r3, [r9]
 800564e:	6825      	ldr	r5, [r4, #0]
 8005650:	f015 0506 	ands.w	r5, r5, #6
 8005654:	d107      	bne.n	8005666 <_printf_common+0x52>
 8005656:	f104 0a19 	add.w	sl, r4, #25
 800565a:	68e3      	ldr	r3, [r4, #12]
 800565c:	f8d9 2000 	ldr.w	r2, [r9]
 8005660:	1a9b      	subs	r3, r3, r2
 8005662:	429d      	cmp	r5, r3
 8005664:	db2a      	blt.n	80056bc <_printf_common+0xa8>
 8005666:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800566a:	6822      	ldr	r2, [r4, #0]
 800566c:	3300      	adds	r3, #0
 800566e:	bf18      	it	ne
 8005670:	2301      	movne	r3, #1
 8005672:	0692      	lsls	r2, r2, #26
 8005674:	d42f      	bmi.n	80056d6 <_printf_common+0xc2>
 8005676:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800567a:	4639      	mov	r1, r7
 800567c:	4630      	mov	r0, r6
 800567e:	47c0      	blx	r8
 8005680:	3001      	adds	r0, #1
 8005682:	d022      	beq.n	80056ca <_printf_common+0xb6>
 8005684:	6823      	ldr	r3, [r4, #0]
 8005686:	68e5      	ldr	r5, [r4, #12]
 8005688:	f003 0306 	and.w	r3, r3, #6
 800568c:	2b04      	cmp	r3, #4
 800568e:	bf18      	it	ne
 8005690:	2500      	movne	r5, #0
 8005692:	f8d9 2000 	ldr.w	r2, [r9]
 8005696:	f04f 0900 	mov.w	r9, #0
 800569a:	bf08      	it	eq
 800569c:	1aad      	subeq	r5, r5, r2
 800569e:	68a3      	ldr	r3, [r4, #8]
 80056a0:	6922      	ldr	r2, [r4, #16]
 80056a2:	bf08      	it	eq
 80056a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056a8:	4293      	cmp	r3, r2
 80056aa:	bfc4      	itt	gt
 80056ac:	1a9b      	subgt	r3, r3, r2
 80056ae:	18ed      	addgt	r5, r5, r3
 80056b0:	341a      	adds	r4, #26
 80056b2:	454d      	cmp	r5, r9
 80056b4:	d11b      	bne.n	80056ee <_printf_common+0xda>
 80056b6:	2000      	movs	r0, #0
 80056b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056bc:	2301      	movs	r3, #1
 80056be:	4652      	mov	r2, sl
 80056c0:	4639      	mov	r1, r7
 80056c2:	4630      	mov	r0, r6
 80056c4:	47c0      	blx	r8
 80056c6:	3001      	adds	r0, #1
 80056c8:	d103      	bne.n	80056d2 <_printf_common+0xbe>
 80056ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056d2:	3501      	adds	r5, #1
 80056d4:	e7c1      	b.n	800565a <_printf_common+0x46>
 80056d6:	2030      	movs	r0, #48	; 0x30
 80056d8:	18e1      	adds	r1, r4, r3
 80056da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056de:	1c5a      	adds	r2, r3, #1
 80056e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056e4:	4422      	add	r2, r4
 80056e6:	3302      	adds	r3, #2
 80056e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056ec:	e7c3      	b.n	8005676 <_printf_common+0x62>
 80056ee:	2301      	movs	r3, #1
 80056f0:	4622      	mov	r2, r4
 80056f2:	4639      	mov	r1, r7
 80056f4:	4630      	mov	r0, r6
 80056f6:	47c0      	blx	r8
 80056f8:	3001      	adds	r0, #1
 80056fa:	d0e6      	beq.n	80056ca <_printf_common+0xb6>
 80056fc:	f109 0901 	add.w	r9, r9, #1
 8005700:	e7d7      	b.n	80056b2 <_printf_common+0x9e>
	...

08005704 <_printf_i>:
 8005704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005708:	4617      	mov	r7, r2
 800570a:	7e0a      	ldrb	r2, [r1, #24]
 800570c:	b085      	sub	sp, #20
 800570e:	2a6e      	cmp	r2, #110	; 0x6e
 8005710:	4698      	mov	r8, r3
 8005712:	4606      	mov	r6, r0
 8005714:	460c      	mov	r4, r1
 8005716:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005718:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800571c:	f000 80bc 	beq.w	8005898 <_printf_i+0x194>
 8005720:	d81a      	bhi.n	8005758 <_printf_i+0x54>
 8005722:	2a63      	cmp	r2, #99	; 0x63
 8005724:	d02e      	beq.n	8005784 <_printf_i+0x80>
 8005726:	d80a      	bhi.n	800573e <_printf_i+0x3a>
 8005728:	2a00      	cmp	r2, #0
 800572a:	f000 80c8 	beq.w	80058be <_printf_i+0x1ba>
 800572e:	2a58      	cmp	r2, #88	; 0x58
 8005730:	f000 808a 	beq.w	8005848 <_printf_i+0x144>
 8005734:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005738:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800573c:	e02a      	b.n	8005794 <_printf_i+0x90>
 800573e:	2a64      	cmp	r2, #100	; 0x64
 8005740:	d001      	beq.n	8005746 <_printf_i+0x42>
 8005742:	2a69      	cmp	r2, #105	; 0x69
 8005744:	d1f6      	bne.n	8005734 <_printf_i+0x30>
 8005746:	6821      	ldr	r1, [r4, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800574e:	d023      	beq.n	8005798 <_printf_i+0x94>
 8005750:	1d11      	adds	r1, r2, #4
 8005752:	6019      	str	r1, [r3, #0]
 8005754:	6813      	ldr	r3, [r2, #0]
 8005756:	e027      	b.n	80057a8 <_printf_i+0xa4>
 8005758:	2a73      	cmp	r2, #115	; 0x73
 800575a:	f000 80b4 	beq.w	80058c6 <_printf_i+0x1c2>
 800575e:	d808      	bhi.n	8005772 <_printf_i+0x6e>
 8005760:	2a6f      	cmp	r2, #111	; 0x6f
 8005762:	d02a      	beq.n	80057ba <_printf_i+0xb6>
 8005764:	2a70      	cmp	r2, #112	; 0x70
 8005766:	d1e5      	bne.n	8005734 <_printf_i+0x30>
 8005768:	680a      	ldr	r2, [r1, #0]
 800576a:	f042 0220 	orr.w	r2, r2, #32
 800576e:	600a      	str	r2, [r1, #0]
 8005770:	e003      	b.n	800577a <_printf_i+0x76>
 8005772:	2a75      	cmp	r2, #117	; 0x75
 8005774:	d021      	beq.n	80057ba <_printf_i+0xb6>
 8005776:	2a78      	cmp	r2, #120	; 0x78
 8005778:	d1dc      	bne.n	8005734 <_printf_i+0x30>
 800577a:	2278      	movs	r2, #120	; 0x78
 800577c:	496f      	ldr	r1, [pc, #444]	; (800593c <_printf_i+0x238>)
 800577e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005782:	e064      	b.n	800584e <_printf_i+0x14a>
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800578a:	1d11      	adds	r1, r2, #4
 800578c:	6019      	str	r1, [r3, #0]
 800578e:	6813      	ldr	r3, [r2, #0]
 8005790:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005794:	2301      	movs	r3, #1
 8005796:	e0a3      	b.n	80058e0 <_printf_i+0x1dc>
 8005798:	f011 0f40 	tst.w	r1, #64	; 0x40
 800579c:	f102 0104 	add.w	r1, r2, #4
 80057a0:	6019      	str	r1, [r3, #0]
 80057a2:	d0d7      	beq.n	8005754 <_printf_i+0x50>
 80057a4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	da03      	bge.n	80057b4 <_printf_i+0xb0>
 80057ac:	222d      	movs	r2, #45	; 0x2d
 80057ae:	425b      	negs	r3, r3
 80057b0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80057b4:	4962      	ldr	r1, [pc, #392]	; (8005940 <_printf_i+0x23c>)
 80057b6:	220a      	movs	r2, #10
 80057b8:	e017      	b.n	80057ea <_printf_i+0xe6>
 80057ba:	6820      	ldr	r0, [r4, #0]
 80057bc:	6819      	ldr	r1, [r3, #0]
 80057be:	f010 0f80 	tst.w	r0, #128	; 0x80
 80057c2:	d003      	beq.n	80057cc <_printf_i+0xc8>
 80057c4:	1d08      	adds	r0, r1, #4
 80057c6:	6018      	str	r0, [r3, #0]
 80057c8:	680b      	ldr	r3, [r1, #0]
 80057ca:	e006      	b.n	80057da <_printf_i+0xd6>
 80057cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80057d0:	f101 0004 	add.w	r0, r1, #4
 80057d4:	6018      	str	r0, [r3, #0]
 80057d6:	d0f7      	beq.n	80057c8 <_printf_i+0xc4>
 80057d8:	880b      	ldrh	r3, [r1, #0]
 80057da:	2a6f      	cmp	r2, #111	; 0x6f
 80057dc:	bf14      	ite	ne
 80057de:	220a      	movne	r2, #10
 80057e0:	2208      	moveq	r2, #8
 80057e2:	4957      	ldr	r1, [pc, #348]	; (8005940 <_printf_i+0x23c>)
 80057e4:	2000      	movs	r0, #0
 80057e6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80057ea:	6865      	ldr	r5, [r4, #4]
 80057ec:	2d00      	cmp	r5, #0
 80057ee:	60a5      	str	r5, [r4, #8]
 80057f0:	f2c0 809c 	blt.w	800592c <_printf_i+0x228>
 80057f4:	6820      	ldr	r0, [r4, #0]
 80057f6:	f020 0004 	bic.w	r0, r0, #4
 80057fa:	6020      	str	r0, [r4, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d13f      	bne.n	8005880 <_printf_i+0x17c>
 8005800:	2d00      	cmp	r5, #0
 8005802:	f040 8095 	bne.w	8005930 <_printf_i+0x22c>
 8005806:	4675      	mov	r5, lr
 8005808:	2a08      	cmp	r2, #8
 800580a:	d10b      	bne.n	8005824 <_printf_i+0x120>
 800580c:	6823      	ldr	r3, [r4, #0]
 800580e:	07da      	lsls	r2, r3, #31
 8005810:	d508      	bpl.n	8005824 <_printf_i+0x120>
 8005812:	6923      	ldr	r3, [r4, #16]
 8005814:	6862      	ldr	r2, [r4, #4]
 8005816:	429a      	cmp	r2, r3
 8005818:	bfde      	ittt	le
 800581a:	2330      	movle	r3, #48	; 0x30
 800581c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005820:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005824:	ebae 0305 	sub.w	r3, lr, r5
 8005828:	6123      	str	r3, [r4, #16]
 800582a:	f8cd 8000 	str.w	r8, [sp]
 800582e:	463b      	mov	r3, r7
 8005830:	aa03      	add	r2, sp, #12
 8005832:	4621      	mov	r1, r4
 8005834:	4630      	mov	r0, r6
 8005836:	f7ff feed 	bl	8005614 <_printf_common>
 800583a:	3001      	adds	r0, #1
 800583c:	d155      	bne.n	80058ea <_printf_i+0x1e6>
 800583e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005842:	b005      	add	sp, #20
 8005844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005848:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800584c:	493c      	ldr	r1, [pc, #240]	; (8005940 <_printf_i+0x23c>)
 800584e:	6822      	ldr	r2, [r4, #0]
 8005850:	6818      	ldr	r0, [r3, #0]
 8005852:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005856:	f100 0504 	add.w	r5, r0, #4
 800585a:	601d      	str	r5, [r3, #0]
 800585c:	d001      	beq.n	8005862 <_printf_i+0x15e>
 800585e:	6803      	ldr	r3, [r0, #0]
 8005860:	e002      	b.n	8005868 <_printf_i+0x164>
 8005862:	0655      	lsls	r5, r2, #25
 8005864:	d5fb      	bpl.n	800585e <_printf_i+0x15a>
 8005866:	8803      	ldrh	r3, [r0, #0]
 8005868:	07d0      	lsls	r0, r2, #31
 800586a:	bf44      	itt	mi
 800586c:	f042 0220 	orrmi.w	r2, r2, #32
 8005870:	6022      	strmi	r2, [r4, #0]
 8005872:	b91b      	cbnz	r3, 800587c <_printf_i+0x178>
 8005874:	6822      	ldr	r2, [r4, #0]
 8005876:	f022 0220 	bic.w	r2, r2, #32
 800587a:	6022      	str	r2, [r4, #0]
 800587c:	2210      	movs	r2, #16
 800587e:	e7b1      	b.n	80057e4 <_printf_i+0xe0>
 8005880:	4675      	mov	r5, lr
 8005882:	fbb3 f0f2 	udiv	r0, r3, r2
 8005886:	fb02 3310 	mls	r3, r2, r0, r3
 800588a:	5ccb      	ldrb	r3, [r1, r3]
 800588c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005890:	4603      	mov	r3, r0
 8005892:	2800      	cmp	r0, #0
 8005894:	d1f5      	bne.n	8005882 <_printf_i+0x17e>
 8005896:	e7b7      	b.n	8005808 <_printf_i+0x104>
 8005898:	6808      	ldr	r0, [r1, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	f010 0f80 	tst.w	r0, #128	; 0x80
 80058a0:	6949      	ldr	r1, [r1, #20]
 80058a2:	d004      	beq.n	80058ae <_printf_i+0x1aa>
 80058a4:	1d10      	adds	r0, r2, #4
 80058a6:	6018      	str	r0, [r3, #0]
 80058a8:	6813      	ldr	r3, [r2, #0]
 80058aa:	6019      	str	r1, [r3, #0]
 80058ac:	e007      	b.n	80058be <_printf_i+0x1ba>
 80058ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058b2:	f102 0004 	add.w	r0, r2, #4
 80058b6:	6018      	str	r0, [r3, #0]
 80058b8:	6813      	ldr	r3, [r2, #0]
 80058ba:	d0f6      	beq.n	80058aa <_printf_i+0x1a6>
 80058bc:	8019      	strh	r1, [r3, #0]
 80058be:	2300      	movs	r3, #0
 80058c0:	4675      	mov	r5, lr
 80058c2:	6123      	str	r3, [r4, #16]
 80058c4:	e7b1      	b.n	800582a <_printf_i+0x126>
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	1d11      	adds	r1, r2, #4
 80058ca:	6019      	str	r1, [r3, #0]
 80058cc:	6815      	ldr	r5, [r2, #0]
 80058ce:	2100      	movs	r1, #0
 80058d0:	6862      	ldr	r2, [r4, #4]
 80058d2:	4628      	mov	r0, r5
 80058d4:	f000 f836 	bl	8005944 <memchr>
 80058d8:	b108      	cbz	r0, 80058de <_printf_i+0x1da>
 80058da:	1b40      	subs	r0, r0, r5
 80058dc:	6060      	str	r0, [r4, #4]
 80058de:	6863      	ldr	r3, [r4, #4]
 80058e0:	6123      	str	r3, [r4, #16]
 80058e2:	2300      	movs	r3, #0
 80058e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058e8:	e79f      	b.n	800582a <_printf_i+0x126>
 80058ea:	6923      	ldr	r3, [r4, #16]
 80058ec:	462a      	mov	r2, r5
 80058ee:	4639      	mov	r1, r7
 80058f0:	4630      	mov	r0, r6
 80058f2:	47c0      	blx	r8
 80058f4:	3001      	adds	r0, #1
 80058f6:	d0a2      	beq.n	800583e <_printf_i+0x13a>
 80058f8:	6823      	ldr	r3, [r4, #0]
 80058fa:	079b      	lsls	r3, r3, #30
 80058fc:	d507      	bpl.n	800590e <_printf_i+0x20a>
 80058fe:	2500      	movs	r5, #0
 8005900:	f104 0919 	add.w	r9, r4, #25
 8005904:	68e3      	ldr	r3, [r4, #12]
 8005906:	9a03      	ldr	r2, [sp, #12]
 8005908:	1a9b      	subs	r3, r3, r2
 800590a:	429d      	cmp	r5, r3
 800590c:	db05      	blt.n	800591a <_printf_i+0x216>
 800590e:	68e0      	ldr	r0, [r4, #12]
 8005910:	9b03      	ldr	r3, [sp, #12]
 8005912:	4298      	cmp	r0, r3
 8005914:	bfb8      	it	lt
 8005916:	4618      	movlt	r0, r3
 8005918:	e793      	b.n	8005842 <_printf_i+0x13e>
 800591a:	2301      	movs	r3, #1
 800591c:	464a      	mov	r2, r9
 800591e:	4639      	mov	r1, r7
 8005920:	4630      	mov	r0, r6
 8005922:	47c0      	blx	r8
 8005924:	3001      	adds	r0, #1
 8005926:	d08a      	beq.n	800583e <_printf_i+0x13a>
 8005928:	3501      	adds	r5, #1
 800592a:	e7eb      	b.n	8005904 <_printf_i+0x200>
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1a7      	bne.n	8005880 <_printf_i+0x17c>
 8005930:	780b      	ldrb	r3, [r1, #0]
 8005932:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005936:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800593a:	e765      	b.n	8005808 <_printf_i+0x104>
 800593c:	08006500 	.word	0x08006500
 8005940:	080064ef 	.word	0x080064ef

08005944 <memchr>:
 8005944:	b510      	push	{r4, lr}
 8005946:	b2c9      	uxtb	r1, r1
 8005948:	4402      	add	r2, r0
 800594a:	4290      	cmp	r0, r2
 800594c:	4603      	mov	r3, r0
 800594e:	d101      	bne.n	8005954 <memchr+0x10>
 8005950:	2000      	movs	r0, #0
 8005952:	bd10      	pop	{r4, pc}
 8005954:	781c      	ldrb	r4, [r3, #0]
 8005956:	3001      	adds	r0, #1
 8005958:	428c      	cmp	r4, r1
 800595a:	d1f6      	bne.n	800594a <memchr+0x6>
 800595c:	4618      	mov	r0, r3
 800595e:	bd10      	pop	{r4, pc}

08005960 <memcpy>:
 8005960:	b510      	push	{r4, lr}
 8005962:	1e43      	subs	r3, r0, #1
 8005964:	440a      	add	r2, r1
 8005966:	4291      	cmp	r1, r2
 8005968:	d100      	bne.n	800596c <memcpy+0xc>
 800596a:	bd10      	pop	{r4, pc}
 800596c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005970:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005974:	e7f7      	b.n	8005966 <memcpy+0x6>
	...

08005978 <_free_r>:
 8005978:	b538      	push	{r3, r4, r5, lr}
 800597a:	4605      	mov	r5, r0
 800597c:	2900      	cmp	r1, #0
 800597e:	d043      	beq.n	8005a08 <_free_r+0x90>
 8005980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005984:	1f0c      	subs	r4, r1, #4
 8005986:	2b00      	cmp	r3, #0
 8005988:	bfb8      	it	lt
 800598a:	18e4      	addlt	r4, r4, r3
 800598c:	f000 f8d4 	bl	8005b38 <__malloc_lock>
 8005990:	4a1e      	ldr	r2, [pc, #120]	; (8005a0c <_free_r+0x94>)
 8005992:	6813      	ldr	r3, [r2, #0]
 8005994:	4610      	mov	r0, r2
 8005996:	b933      	cbnz	r3, 80059a6 <_free_r+0x2e>
 8005998:	6063      	str	r3, [r4, #4]
 800599a:	6014      	str	r4, [r2, #0]
 800599c:	4628      	mov	r0, r5
 800599e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059a2:	f000 b8ca 	b.w	8005b3a <__malloc_unlock>
 80059a6:	42a3      	cmp	r3, r4
 80059a8:	d90b      	bls.n	80059c2 <_free_r+0x4a>
 80059aa:	6821      	ldr	r1, [r4, #0]
 80059ac:	1862      	adds	r2, r4, r1
 80059ae:	4293      	cmp	r3, r2
 80059b0:	bf01      	itttt	eq
 80059b2:	681a      	ldreq	r2, [r3, #0]
 80059b4:	685b      	ldreq	r3, [r3, #4]
 80059b6:	1852      	addeq	r2, r2, r1
 80059b8:	6022      	streq	r2, [r4, #0]
 80059ba:	6063      	str	r3, [r4, #4]
 80059bc:	6004      	str	r4, [r0, #0]
 80059be:	e7ed      	b.n	800599c <_free_r+0x24>
 80059c0:	4613      	mov	r3, r2
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	b10a      	cbz	r2, 80059ca <_free_r+0x52>
 80059c6:	42a2      	cmp	r2, r4
 80059c8:	d9fa      	bls.n	80059c0 <_free_r+0x48>
 80059ca:	6819      	ldr	r1, [r3, #0]
 80059cc:	1858      	adds	r0, r3, r1
 80059ce:	42a0      	cmp	r0, r4
 80059d0:	d10b      	bne.n	80059ea <_free_r+0x72>
 80059d2:	6820      	ldr	r0, [r4, #0]
 80059d4:	4401      	add	r1, r0
 80059d6:	1858      	adds	r0, r3, r1
 80059d8:	4282      	cmp	r2, r0
 80059da:	6019      	str	r1, [r3, #0]
 80059dc:	d1de      	bne.n	800599c <_free_r+0x24>
 80059de:	6810      	ldr	r0, [r2, #0]
 80059e0:	6852      	ldr	r2, [r2, #4]
 80059e2:	4401      	add	r1, r0
 80059e4:	6019      	str	r1, [r3, #0]
 80059e6:	605a      	str	r2, [r3, #4]
 80059e8:	e7d8      	b.n	800599c <_free_r+0x24>
 80059ea:	d902      	bls.n	80059f2 <_free_r+0x7a>
 80059ec:	230c      	movs	r3, #12
 80059ee:	602b      	str	r3, [r5, #0]
 80059f0:	e7d4      	b.n	800599c <_free_r+0x24>
 80059f2:	6820      	ldr	r0, [r4, #0]
 80059f4:	1821      	adds	r1, r4, r0
 80059f6:	428a      	cmp	r2, r1
 80059f8:	bf01      	itttt	eq
 80059fa:	6811      	ldreq	r1, [r2, #0]
 80059fc:	6852      	ldreq	r2, [r2, #4]
 80059fe:	1809      	addeq	r1, r1, r0
 8005a00:	6021      	streq	r1, [r4, #0]
 8005a02:	6062      	str	r2, [r4, #4]
 8005a04:	605c      	str	r4, [r3, #4]
 8005a06:	e7c9      	b.n	800599c <_free_r+0x24>
 8005a08:	bd38      	pop	{r3, r4, r5, pc}
 8005a0a:	bf00      	nop
 8005a0c:	20000524 	.word	0x20000524

08005a10 <_malloc_r>:
 8005a10:	b570      	push	{r4, r5, r6, lr}
 8005a12:	1ccd      	adds	r5, r1, #3
 8005a14:	f025 0503 	bic.w	r5, r5, #3
 8005a18:	3508      	adds	r5, #8
 8005a1a:	2d0c      	cmp	r5, #12
 8005a1c:	bf38      	it	cc
 8005a1e:	250c      	movcc	r5, #12
 8005a20:	2d00      	cmp	r5, #0
 8005a22:	4606      	mov	r6, r0
 8005a24:	db01      	blt.n	8005a2a <_malloc_r+0x1a>
 8005a26:	42a9      	cmp	r1, r5
 8005a28:	d903      	bls.n	8005a32 <_malloc_r+0x22>
 8005a2a:	230c      	movs	r3, #12
 8005a2c:	6033      	str	r3, [r6, #0]
 8005a2e:	2000      	movs	r0, #0
 8005a30:	bd70      	pop	{r4, r5, r6, pc}
 8005a32:	f000 f881 	bl	8005b38 <__malloc_lock>
 8005a36:	4a23      	ldr	r2, [pc, #140]	; (8005ac4 <_malloc_r+0xb4>)
 8005a38:	6814      	ldr	r4, [r2, #0]
 8005a3a:	4621      	mov	r1, r4
 8005a3c:	b991      	cbnz	r1, 8005a64 <_malloc_r+0x54>
 8005a3e:	4c22      	ldr	r4, [pc, #136]	; (8005ac8 <_malloc_r+0xb8>)
 8005a40:	6823      	ldr	r3, [r4, #0]
 8005a42:	b91b      	cbnz	r3, 8005a4c <_malloc_r+0x3c>
 8005a44:	4630      	mov	r0, r6
 8005a46:	f000 f867 	bl	8005b18 <_sbrk_r>
 8005a4a:	6020      	str	r0, [r4, #0]
 8005a4c:	4629      	mov	r1, r5
 8005a4e:	4630      	mov	r0, r6
 8005a50:	f000 f862 	bl	8005b18 <_sbrk_r>
 8005a54:	1c43      	adds	r3, r0, #1
 8005a56:	d126      	bne.n	8005aa6 <_malloc_r+0x96>
 8005a58:	230c      	movs	r3, #12
 8005a5a:	4630      	mov	r0, r6
 8005a5c:	6033      	str	r3, [r6, #0]
 8005a5e:	f000 f86c 	bl	8005b3a <__malloc_unlock>
 8005a62:	e7e4      	b.n	8005a2e <_malloc_r+0x1e>
 8005a64:	680b      	ldr	r3, [r1, #0]
 8005a66:	1b5b      	subs	r3, r3, r5
 8005a68:	d41a      	bmi.n	8005aa0 <_malloc_r+0x90>
 8005a6a:	2b0b      	cmp	r3, #11
 8005a6c:	d90f      	bls.n	8005a8e <_malloc_r+0x7e>
 8005a6e:	600b      	str	r3, [r1, #0]
 8005a70:	18cc      	adds	r4, r1, r3
 8005a72:	50cd      	str	r5, [r1, r3]
 8005a74:	4630      	mov	r0, r6
 8005a76:	f000 f860 	bl	8005b3a <__malloc_unlock>
 8005a7a:	f104 000b 	add.w	r0, r4, #11
 8005a7e:	1d23      	adds	r3, r4, #4
 8005a80:	f020 0007 	bic.w	r0, r0, #7
 8005a84:	1ac3      	subs	r3, r0, r3
 8005a86:	d01b      	beq.n	8005ac0 <_malloc_r+0xb0>
 8005a88:	425a      	negs	r2, r3
 8005a8a:	50e2      	str	r2, [r4, r3]
 8005a8c:	bd70      	pop	{r4, r5, r6, pc}
 8005a8e:	428c      	cmp	r4, r1
 8005a90:	bf0b      	itete	eq
 8005a92:	6863      	ldreq	r3, [r4, #4]
 8005a94:	684b      	ldrne	r3, [r1, #4]
 8005a96:	6013      	streq	r3, [r2, #0]
 8005a98:	6063      	strne	r3, [r4, #4]
 8005a9a:	bf18      	it	ne
 8005a9c:	460c      	movne	r4, r1
 8005a9e:	e7e9      	b.n	8005a74 <_malloc_r+0x64>
 8005aa0:	460c      	mov	r4, r1
 8005aa2:	6849      	ldr	r1, [r1, #4]
 8005aa4:	e7ca      	b.n	8005a3c <_malloc_r+0x2c>
 8005aa6:	1cc4      	adds	r4, r0, #3
 8005aa8:	f024 0403 	bic.w	r4, r4, #3
 8005aac:	42a0      	cmp	r0, r4
 8005aae:	d005      	beq.n	8005abc <_malloc_r+0xac>
 8005ab0:	1a21      	subs	r1, r4, r0
 8005ab2:	4630      	mov	r0, r6
 8005ab4:	f000 f830 	bl	8005b18 <_sbrk_r>
 8005ab8:	3001      	adds	r0, #1
 8005aba:	d0cd      	beq.n	8005a58 <_malloc_r+0x48>
 8005abc:	6025      	str	r5, [r4, #0]
 8005abe:	e7d9      	b.n	8005a74 <_malloc_r+0x64>
 8005ac0:	bd70      	pop	{r4, r5, r6, pc}
 8005ac2:	bf00      	nop
 8005ac4:	20000524 	.word	0x20000524
 8005ac8:	20000528 	.word	0x20000528

08005acc <_realloc_r>:
 8005acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ace:	4607      	mov	r7, r0
 8005ad0:	4614      	mov	r4, r2
 8005ad2:	460e      	mov	r6, r1
 8005ad4:	b921      	cbnz	r1, 8005ae0 <_realloc_r+0x14>
 8005ad6:	4611      	mov	r1, r2
 8005ad8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005adc:	f7ff bf98 	b.w	8005a10 <_malloc_r>
 8005ae0:	b922      	cbnz	r2, 8005aec <_realloc_r+0x20>
 8005ae2:	f7ff ff49 	bl	8005978 <_free_r>
 8005ae6:	4625      	mov	r5, r4
 8005ae8:	4628      	mov	r0, r5
 8005aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aec:	f000 f826 	bl	8005b3c <_malloc_usable_size_r>
 8005af0:	4284      	cmp	r4, r0
 8005af2:	d90f      	bls.n	8005b14 <_realloc_r+0x48>
 8005af4:	4621      	mov	r1, r4
 8005af6:	4638      	mov	r0, r7
 8005af8:	f7ff ff8a 	bl	8005a10 <_malloc_r>
 8005afc:	4605      	mov	r5, r0
 8005afe:	2800      	cmp	r0, #0
 8005b00:	d0f2      	beq.n	8005ae8 <_realloc_r+0x1c>
 8005b02:	4631      	mov	r1, r6
 8005b04:	4622      	mov	r2, r4
 8005b06:	f7ff ff2b 	bl	8005960 <memcpy>
 8005b0a:	4631      	mov	r1, r6
 8005b0c:	4638      	mov	r0, r7
 8005b0e:	f7ff ff33 	bl	8005978 <_free_r>
 8005b12:	e7e9      	b.n	8005ae8 <_realloc_r+0x1c>
 8005b14:	4635      	mov	r5, r6
 8005b16:	e7e7      	b.n	8005ae8 <_realloc_r+0x1c>

08005b18 <_sbrk_r>:
 8005b18:	b538      	push	{r3, r4, r5, lr}
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	4c05      	ldr	r4, [pc, #20]	; (8005b34 <_sbrk_r+0x1c>)
 8005b1e:	4605      	mov	r5, r0
 8005b20:	4608      	mov	r0, r1
 8005b22:	6023      	str	r3, [r4, #0]
 8005b24:	f7ff fb40 	bl	80051a8 <_sbrk>
 8005b28:	1c43      	adds	r3, r0, #1
 8005b2a:	d102      	bne.n	8005b32 <_sbrk_r+0x1a>
 8005b2c:	6823      	ldr	r3, [r4, #0]
 8005b2e:	b103      	cbz	r3, 8005b32 <_sbrk_r+0x1a>
 8005b30:	602b      	str	r3, [r5, #0]
 8005b32:	bd38      	pop	{r3, r4, r5, pc}
 8005b34:	20001968 	.word	0x20001968

08005b38 <__malloc_lock>:
 8005b38:	4770      	bx	lr

08005b3a <__malloc_unlock>:
 8005b3a:	4770      	bx	lr

08005b3c <_malloc_usable_size_r>:
 8005b3c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005b40:	2800      	cmp	r0, #0
 8005b42:	f1a0 0004 	sub.w	r0, r0, #4
 8005b46:	bfbc      	itt	lt
 8005b48:	580b      	ldrlt	r3, [r1, r0]
 8005b4a:	18c0      	addlt	r0, r0, r3
 8005b4c:	4770      	bx	lr
	...

08005b50 <_init>:
 8005b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b52:	bf00      	nop
 8005b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b56:	bc08      	pop	{r3}
 8005b58:	469e      	mov	lr, r3
 8005b5a:	4770      	bx	lr

08005b5c <_fini>:
 8005b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5e:	bf00      	nop
 8005b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b62:	bc08      	pop	{r3}
 8005b64:	469e      	mov	lr, r3
 8005b66:	4770      	bx	lr
