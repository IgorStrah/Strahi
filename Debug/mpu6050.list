
mpu6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004778  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08004888  08004888  00014888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004a10  08004a10  00014a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004a14  08004a14  00014a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08004a18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000d24  20000070  08004a88  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000d94  08004a88  00020d94  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   00025aeb  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004b57  00000000  00000000  00045b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a2f3  00000000  00000000  0004a6db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000d18  00000000  00000000  000549d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001458  00000000  00000000  000556e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000094d6  00000000  00000000  00056b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000458d  00000000  00000000  00060016  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000645a3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002d64  00000000  00000000  00064620  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08004870 	.word	0x08004870

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08004870 	.word	0x08004870

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2iz>:
 8000a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a0c:	d215      	bcs.n	8000a3a <__aeabi_d2iz+0x36>
 8000a0e:	d511      	bpl.n	8000a34 <__aeabi_d2iz+0x30>
 8000a10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a18:	d912      	bls.n	8000a40 <__aeabi_d2iz+0x3c>
 8000a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a2e:	bf18      	it	ne
 8000a30:	4240      	negne	r0, r0
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d105      	bne.n	8000a4c <__aeabi_d2iz+0x48>
 8000a40:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a44:	bf08      	it	eq
 8000a46:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_frsub>:
 8000a54:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a58:	e002      	b.n	8000a60 <__addsf3>
 8000a5a:	bf00      	nop

08000a5c <__aeabi_fsub>:
 8000a5c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a60 <__addsf3>:
 8000a60:	0042      	lsls	r2, r0, #1
 8000a62:	bf1f      	itttt	ne
 8000a64:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a68:	ea92 0f03 	teqne	r2, r3
 8000a6c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a70:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a74:	d06a      	beq.n	8000b4c <__addsf3+0xec>
 8000a76:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a7a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a7e:	bfc1      	itttt	gt
 8000a80:	18d2      	addgt	r2, r2, r3
 8000a82:	4041      	eorgt	r1, r0
 8000a84:	4048      	eorgt	r0, r1
 8000a86:	4041      	eorgt	r1, r0
 8000a88:	bfb8      	it	lt
 8000a8a:	425b      	neglt	r3, r3
 8000a8c:	2b19      	cmp	r3, #25
 8000a8e:	bf88      	it	hi
 8000a90:	4770      	bxhi	lr
 8000a92:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aaa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000aae:	bf18      	it	ne
 8000ab0:	4249      	negne	r1, r1
 8000ab2:	ea92 0f03 	teq	r2, r3
 8000ab6:	d03f      	beq.n	8000b38 <__addsf3+0xd8>
 8000ab8:	f1a2 0201 	sub.w	r2, r2, #1
 8000abc:	fa41 fc03 	asr.w	ip, r1, r3
 8000ac0:	eb10 000c 	adds.w	r0, r0, ip
 8000ac4:	f1c3 0320 	rsb	r3, r3, #32
 8000ac8:	fa01 f103 	lsl.w	r1, r1, r3
 8000acc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ad0:	d502      	bpl.n	8000ad8 <__addsf3+0x78>
 8000ad2:	4249      	negs	r1, r1
 8000ad4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ad8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000adc:	d313      	bcc.n	8000b06 <__addsf3+0xa6>
 8000ade:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ae2:	d306      	bcc.n	8000af2 <__addsf3+0x92>
 8000ae4:	0840      	lsrs	r0, r0, #1
 8000ae6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aea:	f102 0201 	add.w	r2, r2, #1
 8000aee:	2afe      	cmp	r2, #254	; 0xfe
 8000af0:	d251      	bcs.n	8000b96 <__addsf3+0x136>
 8000af2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000af6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000afa:	bf08      	it	eq
 8000afc:	f020 0001 	biceq.w	r0, r0, #1
 8000b00:	ea40 0003 	orr.w	r0, r0, r3
 8000b04:	4770      	bx	lr
 8000b06:	0049      	lsls	r1, r1, #1
 8000b08:	eb40 0000 	adc.w	r0, r0, r0
 8000b0c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b10:	f1a2 0201 	sub.w	r2, r2, #1
 8000b14:	d1ed      	bne.n	8000af2 <__addsf3+0x92>
 8000b16:	fab0 fc80 	clz	ip, r0
 8000b1a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b1e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b22:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b26:	bfaa      	itet	ge
 8000b28:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b2c:	4252      	neglt	r2, r2
 8000b2e:	4318      	orrge	r0, r3
 8000b30:	bfbc      	itt	lt
 8000b32:	40d0      	lsrlt	r0, r2
 8000b34:	4318      	orrlt	r0, r3
 8000b36:	4770      	bx	lr
 8000b38:	f092 0f00 	teq	r2, #0
 8000b3c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b40:	bf06      	itte	eq
 8000b42:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b46:	3201      	addeq	r2, #1
 8000b48:	3b01      	subne	r3, #1
 8000b4a:	e7b5      	b.n	8000ab8 <__addsf3+0x58>
 8000b4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b54:	bf18      	it	ne
 8000b56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5a:	d021      	beq.n	8000ba0 <__addsf3+0x140>
 8000b5c:	ea92 0f03 	teq	r2, r3
 8000b60:	d004      	beq.n	8000b6c <__addsf3+0x10c>
 8000b62:	f092 0f00 	teq	r2, #0
 8000b66:	bf08      	it	eq
 8000b68:	4608      	moveq	r0, r1
 8000b6a:	4770      	bx	lr
 8000b6c:	ea90 0f01 	teq	r0, r1
 8000b70:	bf1c      	itt	ne
 8000b72:	2000      	movne	r0, #0
 8000b74:	4770      	bxne	lr
 8000b76:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b7a:	d104      	bne.n	8000b86 <__addsf3+0x126>
 8000b7c:	0040      	lsls	r0, r0, #1
 8000b7e:	bf28      	it	cs
 8000b80:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b84:	4770      	bx	lr
 8000b86:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b8a:	bf3c      	itt	cc
 8000b8c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b90:	4770      	bxcc	lr
 8000b92:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b96:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	4770      	bx	lr
 8000ba0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ba4:	bf16      	itet	ne
 8000ba6:	4608      	movne	r0, r1
 8000ba8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bac:	4601      	movne	r1, r0
 8000bae:	0242      	lsls	r2, r0, #9
 8000bb0:	bf06      	itte	eq
 8000bb2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bb6:	ea90 0f01 	teqeq	r0, r1
 8000bba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bbe:	4770      	bx	lr

08000bc0 <__aeabi_ui2f>:
 8000bc0:	f04f 0300 	mov.w	r3, #0
 8000bc4:	e004      	b.n	8000bd0 <__aeabi_i2f+0x8>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_i2f>:
 8000bc8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	bf48      	it	mi
 8000bce:	4240      	negmi	r0, r0
 8000bd0:	ea5f 0c00 	movs.w	ip, r0
 8000bd4:	bf08      	it	eq
 8000bd6:	4770      	bxeq	lr
 8000bd8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bdc:	4601      	mov	r1, r0
 8000bde:	f04f 0000 	mov.w	r0, #0
 8000be2:	e01c      	b.n	8000c1e <__aeabi_l2f+0x2a>

08000be4 <__aeabi_ul2f>:
 8000be4:	ea50 0201 	orrs.w	r2, r0, r1
 8000be8:	bf08      	it	eq
 8000bea:	4770      	bxeq	lr
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	e00a      	b.n	8000c08 <__aeabi_l2f+0x14>
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_l2f>:
 8000bf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bf8:	bf08      	it	eq
 8000bfa:	4770      	bxeq	lr
 8000bfc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c00:	d502      	bpl.n	8000c08 <__aeabi_l2f+0x14>
 8000c02:	4240      	negs	r0, r0
 8000c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c08:	ea5f 0c01 	movs.w	ip, r1
 8000c0c:	bf02      	ittt	eq
 8000c0e:	4684      	moveq	ip, r0
 8000c10:	4601      	moveq	r1, r0
 8000c12:	2000      	moveq	r0, #0
 8000c14:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c18:	bf08      	it	eq
 8000c1a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c22:	fabc f28c 	clz	r2, ip
 8000c26:	3a08      	subs	r2, #8
 8000c28:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c2c:	db10      	blt.n	8000c50 <__aeabi_l2f+0x5c>
 8000c2e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c32:	4463      	add	r3, ip
 8000c34:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c38:	f1c2 0220 	rsb	r2, r2, #32
 8000c3c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c40:	fa20 f202 	lsr.w	r2, r0, r2
 8000c44:	eb43 0002 	adc.w	r0, r3, r2
 8000c48:	bf08      	it	eq
 8000c4a:	f020 0001 	biceq.w	r0, r0, #1
 8000c4e:	4770      	bx	lr
 8000c50:	f102 0220 	add.w	r2, r2, #32
 8000c54:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c58:	f1c2 0220 	rsb	r2, r2, #32
 8000c5c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c60:	fa21 f202 	lsr.w	r2, r1, r2
 8000c64:	eb43 0002 	adc.w	r0, r3, r2
 8000c68:	bf08      	it	eq
 8000c6a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6e:	4770      	bx	lr

08000c70 <__aeabi_fmul>:
 8000c70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c78:	bf1e      	ittt	ne
 8000c7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c7e:	ea92 0f0c 	teqne	r2, ip
 8000c82:	ea93 0f0c 	teqne	r3, ip
 8000c86:	d06f      	beq.n	8000d68 <__aeabi_fmul+0xf8>
 8000c88:	441a      	add	r2, r3
 8000c8a:	ea80 0c01 	eor.w	ip, r0, r1
 8000c8e:	0240      	lsls	r0, r0, #9
 8000c90:	bf18      	it	ne
 8000c92:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c96:	d01e      	beq.n	8000cd6 <__aeabi_fmul+0x66>
 8000c98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c9c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ca0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ca4:	fba0 3101 	umull	r3, r1, r0, r1
 8000ca8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cac:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cb0:	bf3e      	ittt	cc
 8000cb2:	0049      	lslcc	r1, r1, #1
 8000cb4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cb8:	005b      	lslcc	r3, r3, #1
 8000cba:	ea40 0001 	orr.w	r0, r0, r1
 8000cbe:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cc2:	2afd      	cmp	r2, #253	; 0xfd
 8000cc4:	d81d      	bhi.n	8000d02 <__aeabi_fmul+0x92>
 8000cc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cce:	bf08      	it	eq
 8000cd0:	f020 0001 	biceq.w	r0, r0, #1
 8000cd4:	4770      	bx	lr
 8000cd6:	f090 0f00 	teq	r0, #0
 8000cda:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cde:	bf08      	it	eq
 8000ce0:	0249      	lsleq	r1, r1, #9
 8000ce2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ce6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cea:	3a7f      	subs	r2, #127	; 0x7f
 8000cec:	bfc2      	ittt	gt
 8000cee:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cf2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cf6:	4770      	bxgt	lr
 8000cf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	3a01      	subs	r2, #1
 8000d02:	dc5d      	bgt.n	8000dc0 <__aeabi_fmul+0x150>
 8000d04:	f112 0f19 	cmn.w	r2, #25
 8000d08:	bfdc      	itt	le
 8000d0a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d0e:	4770      	bxle	lr
 8000d10:	f1c2 0200 	rsb	r2, r2, #0
 8000d14:	0041      	lsls	r1, r0, #1
 8000d16:	fa21 f102 	lsr.w	r1, r1, r2
 8000d1a:	f1c2 0220 	rsb	r2, r2, #32
 8000d1e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d22:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d26:	f140 0000 	adc.w	r0, r0, #0
 8000d2a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d2e:	bf08      	it	eq
 8000d30:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d34:	4770      	bx	lr
 8000d36:	f092 0f00 	teq	r2, #0
 8000d3a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d3e:	bf02      	ittt	eq
 8000d40:	0040      	lsleq	r0, r0, #1
 8000d42:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d46:	3a01      	subeq	r2, #1
 8000d48:	d0f9      	beq.n	8000d3e <__aeabi_fmul+0xce>
 8000d4a:	ea40 000c 	orr.w	r0, r0, ip
 8000d4e:	f093 0f00 	teq	r3, #0
 8000d52:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d56:	bf02      	ittt	eq
 8000d58:	0049      	lsleq	r1, r1, #1
 8000d5a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d5e:	3b01      	subeq	r3, #1
 8000d60:	d0f9      	beq.n	8000d56 <__aeabi_fmul+0xe6>
 8000d62:	ea41 010c 	orr.w	r1, r1, ip
 8000d66:	e78f      	b.n	8000c88 <__aeabi_fmul+0x18>
 8000d68:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d6c:	ea92 0f0c 	teq	r2, ip
 8000d70:	bf18      	it	ne
 8000d72:	ea93 0f0c 	teqne	r3, ip
 8000d76:	d00a      	beq.n	8000d8e <__aeabi_fmul+0x11e>
 8000d78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d7c:	bf18      	it	ne
 8000d7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d82:	d1d8      	bne.n	8000d36 <__aeabi_fmul+0xc6>
 8000d84:	ea80 0001 	eor.w	r0, r0, r1
 8000d88:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d8c:	4770      	bx	lr
 8000d8e:	f090 0f00 	teq	r0, #0
 8000d92:	bf17      	itett	ne
 8000d94:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d98:	4608      	moveq	r0, r1
 8000d9a:	f091 0f00 	teqne	r1, #0
 8000d9e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000da2:	d014      	beq.n	8000dce <__aeabi_fmul+0x15e>
 8000da4:	ea92 0f0c 	teq	r2, ip
 8000da8:	d101      	bne.n	8000dae <__aeabi_fmul+0x13e>
 8000daa:	0242      	lsls	r2, r0, #9
 8000dac:	d10f      	bne.n	8000dce <__aeabi_fmul+0x15e>
 8000dae:	ea93 0f0c 	teq	r3, ip
 8000db2:	d103      	bne.n	8000dbc <__aeabi_fmul+0x14c>
 8000db4:	024b      	lsls	r3, r1, #9
 8000db6:	bf18      	it	ne
 8000db8:	4608      	movne	r0, r1
 8000dba:	d108      	bne.n	8000dce <__aeabi_fmul+0x15e>
 8000dbc:	ea80 0001 	eor.w	r0, r0, r1
 8000dc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dcc:	4770      	bx	lr
 8000dce:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dd2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dd6:	4770      	bx	lr

08000dd8 <__aeabi_fdiv>:
 8000dd8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ddc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000de0:	bf1e      	ittt	ne
 8000de2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000de6:	ea92 0f0c 	teqne	r2, ip
 8000dea:	ea93 0f0c 	teqne	r3, ip
 8000dee:	d069      	beq.n	8000ec4 <__aeabi_fdiv+0xec>
 8000df0:	eba2 0203 	sub.w	r2, r2, r3
 8000df4:	ea80 0c01 	eor.w	ip, r0, r1
 8000df8:	0249      	lsls	r1, r1, #9
 8000dfa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dfe:	d037      	beq.n	8000e70 <__aeabi_fdiv+0x98>
 8000e00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e04:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e08:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e0c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e10:	428b      	cmp	r3, r1
 8000e12:	bf38      	it	cc
 8000e14:	005b      	lslcc	r3, r3, #1
 8000e16:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e1a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	bf24      	itt	cs
 8000e22:	1a5b      	subcs	r3, r3, r1
 8000e24:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e28:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e2c:	bf24      	itt	cs
 8000e2e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e32:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e36:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e3a:	bf24      	itt	cs
 8000e3c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e40:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e44:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e48:	bf24      	itt	cs
 8000e4a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e4e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e52:	011b      	lsls	r3, r3, #4
 8000e54:	bf18      	it	ne
 8000e56:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e5a:	d1e0      	bne.n	8000e1e <__aeabi_fdiv+0x46>
 8000e5c:	2afd      	cmp	r2, #253	; 0xfd
 8000e5e:	f63f af50 	bhi.w	8000d02 <__aeabi_fmul+0x92>
 8000e62:	428b      	cmp	r3, r1
 8000e64:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e68:	bf08      	it	eq
 8000e6a:	f020 0001 	biceq.w	r0, r0, #1
 8000e6e:	4770      	bx	lr
 8000e70:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e74:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e78:	327f      	adds	r2, #127	; 0x7f
 8000e7a:	bfc2      	ittt	gt
 8000e7c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e80:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e84:	4770      	bxgt	lr
 8000e86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e8a:	f04f 0300 	mov.w	r3, #0
 8000e8e:	3a01      	subs	r2, #1
 8000e90:	e737      	b.n	8000d02 <__aeabi_fmul+0x92>
 8000e92:	f092 0f00 	teq	r2, #0
 8000e96:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0040      	lsleq	r0, r0, #1
 8000e9e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ea2:	3a01      	subeq	r2, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fdiv+0xc2>
 8000ea6:	ea40 000c 	orr.w	r0, r0, ip
 8000eaa:	f093 0f00 	teq	r3, #0
 8000eae:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eb2:	bf02      	ittt	eq
 8000eb4:	0049      	lsleq	r1, r1, #1
 8000eb6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eba:	3b01      	subeq	r3, #1
 8000ebc:	d0f9      	beq.n	8000eb2 <__aeabi_fdiv+0xda>
 8000ebe:	ea41 010c 	orr.w	r1, r1, ip
 8000ec2:	e795      	b.n	8000df0 <__aeabi_fdiv+0x18>
 8000ec4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ec8:	ea92 0f0c 	teq	r2, ip
 8000ecc:	d108      	bne.n	8000ee0 <__aeabi_fdiv+0x108>
 8000ece:	0242      	lsls	r2, r0, #9
 8000ed0:	f47f af7d 	bne.w	8000dce <__aeabi_fmul+0x15e>
 8000ed4:	ea93 0f0c 	teq	r3, ip
 8000ed8:	f47f af70 	bne.w	8000dbc <__aeabi_fmul+0x14c>
 8000edc:	4608      	mov	r0, r1
 8000ede:	e776      	b.n	8000dce <__aeabi_fmul+0x15e>
 8000ee0:	ea93 0f0c 	teq	r3, ip
 8000ee4:	d104      	bne.n	8000ef0 <__aeabi_fdiv+0x118>
 8000ee6:	024b      	lsls	r3, r1, #9
 8000ee8:	f43f af4c 	beq.w	8000d84 <__aeabi_fmul+0x114>
 8000eec:	4608      	mov	r0, r1
 8000eee:	e76e      	b.n	8000dce <__aeabi_fmul+0x15e>
 8000ef0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ef4:	bf18      	it	ne
 8000ef6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000efa:	d1ca      	bne.n	8000e92 <__aeabi_fdiv+0xba>
 8000efc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f00:	f47f af5c 	bne.w	8000dbc <__aeabi_fmul+0x14c>
 8000f04:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f08:	f47f af3c 	bne.w	8000d84 <__aeabi_fmul+0x114>
 8000f0c:	e75f      	b.n	8000dce <__aeabi_fmul+0x15e>
 8000f0e:	bf00      	nop

08000f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f10:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_InitTick+0x3c>)
{
 8000f14:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f16:	7818      	ldrb	r0, [r3, #0]
 8000f18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f20:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <HAL_InitTick+0x40>)
 8000f22:	6810      	ldr	r0, [r2, #0]
 8000f24:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f28:	f000 f8ac 	bl	8001084 <HAL_SYSTICK_Config>
 8000f2c:	4604      	mov	r4, r0
 8000f2e:	b958      	cbnz	r0, 8000f48 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f30:	2d0f      	cmp	r5, #15
 8000f32:	d809      	bhi.n	8000f48 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f34:	4602      	mov	r2, r0
 8000f36:	4629      	mov	r1, r5
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	f000 f854 	bl	8000fe8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <HAL_InitTick+0x44>)
 8000f42:	4620      	mov	r0, r4
 8000f44:	601d      	str	r5, [r3, #0]
 8000f46:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000f48:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000f4a:	bd38      	pop	{r3, r4, r5, pc}
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	20000008 	.word	0x20000008
 8000f54:	20000004 	.word	0x20000004

08000f58 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <HAL_Init+0x20>)
{
 8000f5a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f5c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f5e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f60:	f043 0310 	orr.w	r3, r3, #16
 8000f64:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f66:	f000 f82d 	bl	8000fc4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f7ff ffd0 	bl	8000f10 <HAL_InitTick>
  HAL_MspInit();
 8000f70:	f002 fdda 	bl	8003b28 <HAL_MspInit>
}
 8000f74:	2000      	movs	r0, #0
 8000f76:	bd08      	pop	{r3, pc}
 8000f78:	40022000 	.word	0x40022000

08000f7c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f7c:	4a03      	ldr	r2, [pc, #12]	; (8000f8c <HAL_IncTick+0x10>)
 8000f7e:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <HAL_IncTick+0x14>)
 8000f80:	6811      	ldr	r1, [r2, #0]
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	440b      	add	r3, r1
 8000f86:	6013      	str	r3, [r2, #0]
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000098 	.word	0x20000098
 8000f90:	20000000 	.word	0x20000000

08000f94 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f94:	4b01      	ldr	r3, [pc, #4]	; (8000f9c <HAL_GetTick+0x8>)
 8000f96:	6818      	ldr	r0, [r3, #0]
}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20000098 	.word	0x20000098

08000fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa0:	b538      	push	{r3, r4, r5, lr}
 8000fa2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000fa4:	f7ff fff6 	bl	8000f94 <HAL_GetTick>
 8000fa8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000faa:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000fac:	bf1e      	ittt	ne
 8000fae:	4b04      	ldrne	r3, [pc, #16]	; (8000fc0 <HAL_Delay+0x20>)
 8000fb0:	781b      	ldrbne	r3, [r3, #0]
 8000fb2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fb4:	f7ff ffee 	bl	8000f94 <HAL_GetTick>
 8000fb8:	1b40      	subs	r0, r0, r5
 8000fba:	4284      	cmp	r4, r0
 8000fbc:	d8fa      	bhi.n	8000fb4 <HAL_Delay+0x14>
  {
  }
}
 8000fbe:	bd38      	pop	{r3, r4, r5, pc}
 8000fc0:	20000000 	.word	0x20000000

08000fc4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc4:	4a07      	ldr	r2, [pc, #28]	; (8000fe4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000fc6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000fca:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fd2:	041b      	lsls	r3, r3, #16
 8000fd4:	0c1b      	lsrs	r3, r3, #16
 8000fd6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000fde:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000fe0:	60d3      	str	r3, [r2, #12]
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe8:	4b17      	ldr	r3, [pc, #92]	; (8001048 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fea:	b530      	push	{r4, r5, lr}
 8000fec:	68dc      	ldr	r4, [r3, #12]
 8000fee:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff8:	2b04      	cmp	r3, #4
 8000ffa:	bf28      	it	cs
 8000ffc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffe:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001004:	bf98      	it	ls
 8001006:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	fa05 f303 	lsl.w	r3, r5, r3
 800100c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001010:	bf88      	it	hi
 8001012:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	4019      	ands	r1, r3
 8001016:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001018:	fa05 f404 	lsl.w	r4, r5, r4
 800101c:	3c01      	subs	r4, #1
 800101e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001020:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001022:	ea42 0201 	orr.w	r2, r2, r1
 8001026:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102a:	bfaf      	iteee	ge
 800102c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001030:	4b06      	ldrlt	r3, [pc, #24]	; (800104c <HAL_NVIC_SetPriority+0x64>)
 8001032:	f000 000f 	andlt.w	r0, r0, #15
 8001036:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001038:	bfa5      	ittet	ge
 800103a:	b2d2      	uxtbge	r2, r2
 800103c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001040:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001042:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001046:	bd30      	pop	{r4, r5, pc}
 8001048:	e000ed00 	.word	0xe000ed00
 800104c:	e000ed14 	.word	0xe000ed14

08001050 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001050:	2301      	movs	r3, #1
 8001052:	0942      	lsrs	r2, r0, #5
 8001054:	f000 001f 	and.w	r0, r0, #31
 8001058:	fa03 f000 	lsl.w	r0, r3, r0
 800105c:	4b01      	ldr	r3, [pc, #4]	; (8001064 <HAL_NVIC_EnableIRQ+0x14>)
 800105e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001062:	4770      	bx	lr
 8001064:	e000e100 	.word	0xe000e100

08001068 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001068:	2201      	movs	r2, #1
 800106a:	0943      	lsrs	r3, r0, #5
 800106c:	f000 001f 	and.w	r0, r0, #31
 8001070:	fa02 f000 	lsl.w	r0, r2, r0
 8001074:	4a02      	ldr	r2, [pc, #8]	; (8001080 <HAL_NVIC_DisableIRQ+0x18>)
 8001076:	3320      	adds	r3, #32
 8001078:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000e100 	.word	0xe000e100

08001084 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001084:	3801      	subs	r0, #1
 8001086:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800108a:	d20a      	bcs.n	80010a2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001090:	4a06      	ldr	r2, [pc, #24]	; (80010ac <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001092:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001094:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001098:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800109c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80010a2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000e010 	.word	0xe000e010
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80010b4:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80010b6:	4616      	mov	r6, r2
 80010b8:	4b65      	ldr	r3, [pc, #404]	; (8001250 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010ba:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001260 <HAL_GPIO_Init+0x1b0>
 80010be:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001264 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80010c2:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010c6:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80010c8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010cc:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80010d0:	45a0      	cmp	r8, r4
 80010d2:	d17f      	bne.n	80011d4 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80010d4:	684d      	ldr	r5, [r1, #4]
 80010d6:	2d12      	cmp	r5, #18
 80010d8:	f000 80af 	beq.w	800123a <HAL_GPIO_Init+0x18a>
 80010dc:	f200 8088 	bhi.w	80011f0 <HAL_GPIO_Init+0x140>
 80010e0:	2d02      	cmp	r5, #2
 80010e2:	f000 80a7 	beq.w	8001234 <HAL_GPIO_Init+0x184>
 80010e6:	d87c      	bhi.n	80011e2 <HAL_GPIO_Init+0x132>
 80010e8:	2d00      	cmp	r5, #0
 80010ea:	f000 808e 	beq.w	800120a <HAL_GPIO_Init+0x15a>
 80010ee:	2d01      	cmp	r5, #1
 80010f0:	f000 809e 	beq.w	8001230 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010f4:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010f8:	2cff      	cmp	r4, #255	; 0xff
 80010fa:	bf93      	iteet	ls
 80010fc:	4682      	movls	sl, r0
 80010fe:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001102:	3d08      	subhi	r5, #8
 8001104:	f8d0 b000 	ldrls.w	fp, [r0]
 8001108:	bf92      	itee	ls
 800110a:	00b5      	lslls	r5, r6, #2
 800110c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001110:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001112:	fa09 f805 	lsl.w	r8, r9, r5
 8001116:	ea2b 0808 	bic.w	r8, fp, r8
 800111a:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800111e:	bf88      	it	hi
 8001120:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001124:	ea48 0505 	orr.w	r5, r8, r5
 8001128:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800112c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001130:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001134:	d04e      	beq.n	80011d4 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001136:	4d47      	ldr	r5, [pc, #284]	; (8001254 <HAL_GPIO_Init+0x1a4>)
 8001138:	4f46      	ldr	r7, [pc, #280]	; (8001254 <HAL_GPIO_Init+0x1a4>)
 800113a:	69ad      	ldr	r5, [r5, #24]
 800113c:	f026 0803 	bic.w	r8, r6, #3
 8001140:	f045 0501 	orr.w	r5, r5, #1
 8001144:	61bd      	str	r5, [r7, #24]
 8001146:	69bd      	ldr	r5, [r7, #24]
 8001148:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800114c:	f005 0501 	and.w	r5, r5, #1
 8001150:	9501      	str	r5, [sp, #4]
 8001152:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001156:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800115a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800115c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001160:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001164:	fa09 f90b 	lsl.w	r9, r9, fp
 8001168:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800116c:	4d3a      	ldr	r5, [pc, #232]	; (8001258 <HAL_GPIO_Init+0x1a8>)
 800116e:	42a8      	cmp	r0, r5
 8001170:	d068      	beq.n	8001244 <HAL_GPIO_Init+0x194>
 8001172:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001176:	42a8      	cmp	r0, r5
 8001178:	d066      	beq.n	8001248 <HAL_GPIO_Init+0x198>
 800117a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800117e:	42a8      	cmp	r0, r5
 8001180:	d064      	beq.n	800124c <HAL_GPIO_Init+0x19c>
 8001182:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001186:	42a8      	cmp	r0, r5
 8001188:	bf0c      	ite	eq
 800118a:	2503      	moveq	r5, #3
 800118c:	2504      	movne	r5, #4
 800118e:	fa05 f50b 	lsl.w	r5, r5, fp
 8001192:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8001196:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800119a:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800119c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80011a0:	bf14      	ite	ne
 80011a2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011a4:	43a5      	biceq	r5, r4
 80011a6:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011a8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011aa:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80011ae:	bf14      	ite	ne
 80011b0:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011b2:	43a5      	biceq	r5, r4
 80011b4:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011b6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011b8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80011bc:	bf14      	ite	ne
 80011be:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011c0:	43a5      	biceq	r5, r4
 80011c2:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011c4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011c6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80011ca:	bf14      	ite	ne
 80011cc:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011ce:	ea25 0404 	biceq.w	r4, r5, r4
 80011d2:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80011d4:	3601      	adds	r6, #1
 80011d6:	2e10      	cmp	r6, #16
 80011d8:	f47f af73 	bne.w	80010c2 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80011dc:	b003      	add	sp, #12
 80011de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80011e2:	2d03      	cmp	r5, #3
 80011e4:	d022      	beq.n	800122c <HAL_GPIO_Init+0x17c>
 80011e6:	2d11      	cmp	r5, #17
 80011e8:	d184      	bne.n	80010f4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011ea:	68ca      	ldr	r2, [r1, #12]
 80011ec:	3204      	adds	r2, #4
          break;
 80011ee:	e781      	b.n	80010f4 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80011f0:	4f1a      	ldr	r7, [pc, #104]	; (800125c <HAL_GPIO_Init+0x1ac>)
 80011f2:	42bd      	cmp	r5, r7
 80011f4:	d009      	beq.n	800120a <HAL_GPIO_Init+0x15a>
 80011f6:	d812      	bhi.n	800121e <HAL_GPIO_Init+0x16e>
 80011f8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001268 <HAL_GPIO_Init+0x1b8>
 80011fc:	454d      	cmp	r5, r9
 80011fe:	d004      	beq.n	800120a <HAL_GPIO_Init+0x15a>
 8001200:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001204:	454d      	cmp	r5, r9
 8001206:	f47f af75 	bne.w	80010f4 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800120a:	688a      	ldr	r2, [r1, #8]
 800120c:	b1c2      	cbz	r2, 8001240 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800120e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001210:	bf0c      	ite	eq
 8001212:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001216:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800121a:	2208      	movs	r2, #8
 800121c:	e76a      	b.n	80010f4 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800121e:	4575      	cmp	r5, lr
 8001220:	d0f3      	beq.n	800120a <HAL_GPIO_Init+0x15a>
 8001222:	4565      	cmp	r5, ip
 8001224:	d0f1      	beq.n	800120a <HAL_GPIO_Init+0x15a>
 8001226:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800126c <HAL_GPIO_Init+0x1bc>
 800122a:	e7eb      	b.n	8001204 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800122c:	2200      	movs	r2, #0
 800122e:	e761      	b.n	80010f4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001230:	68ca      	ldr	r2, [r1, #12]
          break;
 8001232:	e75f      	b.n	80010f4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001234:	68ca      	ldr	r2, [r1, #12]
 8001236:	3208      	adds	r2, #8
          break;
 8001238:	e75c      	b.n	80010f4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800123a:	68ca      	ldr	r2, [r1, #12]
 800123c:	320c      	adds	r2, #12
          break;
 800123e:	e759      	b.n	80010f4 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001240:	2204      	movs	r2, #4
 8001242:	e757      	b.n	80010f4 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001244:	2500      	movs	r5, #0
 8001246:	e7a2      	b.n	800118e <HAL_GPIO_Init+0xde>
 8001248:	2501      	movs	r5, #1
 800124a:	e7a0      	b.n	800118e <HAL_GPIO_Init+0xde>
 800124c:	2502      	movs	r5, #2
 800124e:	e79e      	b.n	800118e <HAL_GPIO_Init+0xde>
 8001250:	40010400 	.word	0x40010400
 8001254:	40021000 	.word	0x40021000
 8001258:	40010800 	.word	0x40010800
 800125c:	10210000 	.word	0x10210000
 8001260:	10310000 	.word	0x10310000
 8001264:	10320000 	.word	0x10320000
 8001268:	10110000 	.word	0x10110000
 800126c:	10220000 	.word	0x10220000

08001270 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001270:	6883      	ldr	r3, [r0, #8]
 8001272:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001274:	bf14      	ite	ne
 8001276:	2001      	movne	r0, #1
 8001278:	2000      	moveq	r0, #0
 800127a:	4770      	bx	lr

0800127c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800127c:	6802      	ldr	r2, [r0, #0]
 800127e:	6953      	ldr	r3, [r2, #20]
 8001280:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001284:	d00d      	beq.n	80012a2 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001286:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800128a:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800128c:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 800128e:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001290:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8001292:	2300      	movs	r3, #0
 8001294:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001296:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 800129a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 800129e:	2001      	movs	r0, #1
 80012a0:	4770      	bx	lr
  }
  return HAL_OK;
 80012a2:	4618      	mov	r0, r3
}
 80012a4:	4770      	bx	lr

080012a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80012a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012aa:	4604      	mov	r4, r0
 80012ac:	4617      	mov	r7, r2
 80012ae:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80012b0:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80012b4:	b28e      	uxth	r6, r1
 80012b6:	6825      	ldr	r5, [r4, #0]
 80012b8:	f1b8 0f01 	cmp.w	r8, #1
 80012bc:	bf0c      	ite	eq
 80012be:	696b      	ldreq	r3, [r5, #20]
 80012c0:	69ab      	ldrne	r3, [r5, #24]
 80012c2:	ea36 0303 	bics.w	r3, r6, r3
 80012c6:	bf14      	ite	ne
 80012c8:	2001      	movne	r0, #1
 80012ca:	2000      	moveq	r0, #0
 80012cc:	b908      	cbnz	r0, 80012d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 80012ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80012d2:	696b      	ldr	r3, [r5, #20]
 80012d4:	055a      	lsls	r2, r3, #21
 80012d6:	d512      	bpl.n	80012fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80012d8:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 80012da:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80012dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012e0:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012e2:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80012e6:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80012e8:	2304      	movs	r3, #4
 80012ea:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80012ec:	2300      	movs	r3, #0
      return HAL_ERROR;
 80012ee:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 80012f0:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 80012f2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 80012f6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 80012fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80012fe:	1c7b      	adds	r3, r7, #1
 8001300:	d0d9      	beq.n	80012b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001302:	b94f      	cbnz	r7, 8001318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001304:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001306:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001308:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800130a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800130e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8001312:	2003      	movs	r0, #3
 8001314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001318:	f7ff fe3c 	bl	8000f94 <HAL_GetTick>
 800131c:	eba0 0009 	sub.w	r0, r0, r9
 8001320:	4287      	cmp	r7, r0
 8001322:	d2c8      	bcs.n	80012b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8001324:	e7ee      	b.n	8001304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08001326 <I2C_WaitOnFlagUntilTimeout>:
{
 8001326:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800132a:	4604      	mov	r4, r0
 800132c:	4690      	mov	r8, r2
 800132e:	461f      	mov	r7, r3
 8001330:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001332:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001336:	b28d      	uxth	r5, r1
 8001338:	6823      	ldr	r3, [r4, #0]
 800133a:	f1b9 0f01 	cmp.w	r9, #1
 800133e:	bf0c      	ite	eq
 8001340:	695b      	ldreq	r3, [r3, #20]
 8001342:	699b      	ldrne	r3, [r3, #24]
 8001344:	ea35 0303 	bics.w	r3, r5, r3
 8001348:	bf0c      	ite	eq
 800134a:	2301      	moveq	r3, #1
 800134c:	2300      	movne	r3, #0
 800134e:	4543      	cmp	r3, r8
 8001350:	d002      	beq.n	8001358 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001352:	2000      	movs	r0, #0
}
 8001354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001358:	1c7b      	adds	r3, r7, #1
 800135a:	d0ed      	beq.n	8001338 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800135c:	b95f      	cbnz	r7, 8001376 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 800135e:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001360:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001362:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001364:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001368:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800136c:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800136e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001376:	f7ff fe0d 	bl	8000f94 <HAL_GetTick>
 800137a:	1b80      	subs	r0, r0, r6
 800137c:	4287      	cmp	r7, r0
 800137e:	d2db      	bcs.n	8001338 <I2C_WaitOnFlagUntilTimeout+0x12>
 8001380:	e7ed      	b.n	800135e <I2C_WaitOnFlagUntilTimeout+0x38>

08001382 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8001382:	b570      	push	{r4, r5, r6, lr}
 8001384:	4604      	mov	r4, r0
 8001386:	460d      	mov	r5, r1
 8001388:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800138a:	6823      	ldr	r3, [r4, #0]
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	061b      	lsls	r3, r3, #24
 8001390:	d501      	bpl.n	8001396 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8001392:	2000      	movs	r0, #0
 8001394:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001396:	4620      	mov	r0, r4
 8001398:	f7ff ff70 	bl	800127c <I2C_IsAcknowledgeFailed>
 800139c:	b9a8      	cbnz	r0, 80013ca <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 800139e:	1c6a      	adds	r2, r5, #1
 80013a0:	d0f3      	beq.n	800138a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80013a2:	b965      	cbnz	r5, 80013be <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80013a6:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013a8:	f043 0320 	orr.w	r3, r3, #32
 80013ac:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80013ae:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 80013b0:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 80013b2:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80013b4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80013b8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80013bc:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80013be:	f7ff fde9 	bl	8000f94 <HAL_GetTick>
 80013c2:	1b80      	subs	r0, r0, r6
 80013c4:	4285      	cmp	r5, r0
 80013c6:	d2e0      	bcs.n	800138a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 80013c8:	e7ec      	b.n	80013a4 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80013ca:	2001      	movs	r0, #1
}
 80013cc:	bd70      	pop	{r4, r5, r6, pc}

080013ce <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 80013ce:	b570      	push	{r4, r5, r6, lr}
 80013d0:	4604      	mov	r4, r0
 80013d2:	460d      	mov	r5, r1
 80013d4:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80013d6:	6820      	ldr	r0, [r4, #0]
 80013d8:	6943      	ldr	r3, [r0, #20]
 80013da:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80013de:	d001      	beq.n	80013e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80013e0:	2000      	movs	r0, #0
}
 80013e2:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80013e4:	6942      	ldr	r2, [r0, #20]
 80013e6:	06d2      	lsls	r2, r2, #27
 80013e8:	d50b      	bpl.n	8001402 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013ea:	f06f 0210 	mvn.w	r2, #16
 80013ee:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 80013f0:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013f2:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80013f4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 80013f8:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80013fa:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 80013fc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001400:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001402:	b95d      	cbnz	r5, 800141c <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001404:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001406:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001408:	f043 0320 	orr.w	r3, r3, #32
 800140c:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 800140e:	2320      	movs	r3, #32
 8001410:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8001414:	2300      	movs	r3, #0
 8001416:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800141a:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800141c:	f7ff fdba 	bl	8000f94 <HAL_GetTick>
 8001420:	1b80      	subs	r0, r0, r6
 8001422:	4285      	cmp	r5, r0
 8001424:	d2d7      	bcs.n	80013d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8001426:	e7ed      	b.n	8001404 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

08001428 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8001428:	b570      	push	{r4, r5, r6, lr}
 800142a:	4604      	mov	r4, r0
 800142c:	460d      	mov	r5, r1
 800142e:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001430:	6823      	ldr	r3, [r4, #0]
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	075b      	lsls	r3, r3, #29
 8001436:	d501      	bpl.n	800143c <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001438:	2000      	movs	r0, #0
 800143a:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800143c:	4620      	mov	r0, r4
 800143e:	f7ff ff1d 	bl	800127c <I2C_IsAcknowledgeFailed>
 8001442:	b9a8      	cbnz	r0, 8001470 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001444:	1c6a      	adds	r2, r5, #1
 8001446:	d0f3      	beq.n	8001430 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001448:	b965      	cbnz	r5, 8001464 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800144a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 800144c:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800144e:	f043 0320 	orr.w	r3, r3, #32
 8001452:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001454:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8001456:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8001458:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800145a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800145e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001462:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001464:	f7ff fd96 	bl	8000f94 <HAL_GetTick>
 8001468:	1b80      	subs	r0, r0, r6
 800146a:	4285      	cmp	r5, r0
 800146c:	d2e0      	bcs.n	8001430 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 800146e:	e7ec      	b.n	800144a <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001470:	2001      	movs	r0, #1
}
 8001472:	bd70      	pop	{r4, r5, r6, pc}

08001474 <HAL_I2C_Init>:
{
 8001474:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 8001476:	4604      	mov	r4, r0
 8001478:	b908      	cbnz	r0, 800147e <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800147a:	2001      	movs	r0, #1
 800147c:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 800147e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001482:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001486:	b91b      	cbnz	r3, 8001490 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001488:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800148c:	f002 fba4 	bl	8003bd8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001490:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001492:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001494:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001498:	6813      	ldr	r3, [r2, #0]
 800149a:	f023 0301 	bic.w	r3, r3, #1
 800149e:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014a0:	f000 fd40 	bl	8001f24 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014a4:	6863      	ldr	r3, [r4, #4]
 80014a6:	4a2f      	ldr	r2, [pc, #188]	; (8001564 <HAL_I2C_Init+0xf0>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d830      	bhi.n	800150e <HAL_I2C_Init+0x9a>
 80014ac:	4a2e      	ldr	r2, [pc, #184]	; (8001568 <HAL_I2C_Init+0xf4>)
 80014ae:	4290      	cmp	r0, r2
 80014b0:	d9e3      	bls.n	800147a <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80014b2:	4a2e      	ldr	r2, [pc, #184]	; (800156c <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 80014b4:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80014b6:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 80014ba:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80014bc:	3201      	adds	r2, #1
 80014be:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80014c0:	4a28      	ldr	r2, [pc, #160]	; (8001564 <HAL_I2C_Init+0xf0>)
 80014c2:	3801      	subs	r0, #1
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d832      	bhi.n	800152e <HAL_I2C_Init+0xba>
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80014ce:	1c43      	adds	r3, r0, #1
 80014d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014d4:	2b04      	cmp	r3, #4
 80014d6:	bf38      	it	cc
 80014d8:	2304      	movcc	r3, #4
 80014da:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014dc:	6a22      	ldr	r2, [r4, #32]
 80014de:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014e0:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014e2:	4313      	orrs	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80014e6:	68e2      	ldr	r2, [r4, #12]
 80014e8:	6923      	ldr	r3, [r4, #16]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80014ee:	69a2      	ldr	r2, [r4, #24]
 80014f0:	6963      	ldr	r3, [r4, #20]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80014f6:	680b      	ldr	r3, [r1, #0]
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80014fe:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001500:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001502:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001506:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001508:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 800150c:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800150e:	4a18      	ldr	r2, [pc, #96]	; (8001570 <HAL_I2C_Init+0xfc>)
 8001510:	4290      	cmp	r0, r2
 8001512:	d9b2      	bls.n	800147a <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001514:	4d15      	ldr	r5, [pc, #84]	; (800156c <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001516:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 800151a:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 800151e:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001520:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 8001522:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001524:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001528:	fbb2 f2f5 	udiv	r2, r2, r5
 800152c:	e7c6      	b.n	80014bc <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800152e:	68a2      	ldr	r2, [r4, #8]
 8001530:	b952      	cbnz	r2, 8001548 <HAL_I2C_Init+0xd4>
 8001532:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001536:	fbb0 f0f3 	udiv	r0, r0, r3
 800153a:	1c43      	adds	r3, r0, #1
 800153c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001540:	b16b      	cbz	r3, 800155e <HAL_I2C_Init+0xea>
 8001542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001546:	e7c8      	b.n	80014da <HAL_I2C_Init+0x66>
 8001548:	2219      	movs	r2, #25
 800154a:	4353      	muls	r3, r2
 800154c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001550:	1c43      	adds	r3, r0, #1
 8001552:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001556:	b113      	cbz	r3, 800155e <HAL_I2C_Init+0xea>
 8001558:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800155c:	e7bd      	b.n	80014da <HAL_I2C_Init+0x66>
 800155e:	2301      	movs	r3, #1
 8001560:	e7bb      	b.n	80014da <HAL_I2C_Init+0x66>
 8001562:	bf00      	nop
 8001564:	000186a0 	.word	0x000186a0
 8001568:	001e847f 	.word	0x001e847f
 800156c:	000f4240 	.word	0x000f4240
 8001570:	003d08ff 	.word	0x003d08ff

08001574 <HAL_I2C_Master_Transmit>:
{
 8001574:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001578:	4604      	mov	r4, r0
 800157a:	461f      	mov	r7, r3
 800157c:	460d      	mov	r5, r1
 800157e:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8001580:	f7ff fd08 	bl	8000f94 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001584:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001588:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 800158a:	2b20      	cmp	r3, #32
 800158c:	d004      	beq.n	8001598 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 800158e:	2502      	movs	r5, #2
}
 8001590:	4628      	mov	r0, r5
 8001592:	b004      	add	sp, #16
 8001594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001598:	9000      	str	r0, [sp, #0]
 800159a:	2319      	movs	r3, #25
 800159c:	2201      	movs	r2, #1
 800159e:	495d      	ldr	r1, [pc, #372]	; (8001714 <HAL_I2C_Master_Transmit+0x1a0>)
 80015a0:	4620      	mov	r0, r4
 80015a2:	f7ff fec0 	bl	8001326 <I2C_WaitOnFlagUntilTimeout>
 80015a6:	2800      	cmp	r0, #0
 80015a8:	d1f1      	bne.n	800158e <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 80015aa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d0ed      	beq.n	800158e <HAL_I2C_Master_Transmit+0x1a>
 80015b2:	2301      	movs	r3, #1
 80015b4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015b8:	6823      	ldr	r3, [r4, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80015be:	bf5e      	ittt	pl
 80015c0:	681a      	ldrpl	r2, [r3, #0]
 80015c2:	f042 0201 	orrpl.w	r2, r2, #1
 80015c6:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015ce:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80015d0:	2221      	movs	r2, #33	; 0x21
 80015d2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80015d6:	2210      	movs	r2, #16
 80015d8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015dc:	2200      	movs	r2, #0
 80015de:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015e0:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 80015e4:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015e6:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80015e8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80015ea:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80015ee:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80015f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80015f2:	2a04      	cmp	r2, #4
 80015f4:	d004      	beq.n	8001600 <HAL_I2C_Master_Transmit+0x8c>
 80015f6:	2a01      	cmp	r2, #1
 80015f8:	d002      	beq.n	8001600 <HAL_I2C_Master_Transmit+0x8c>
 80015fa:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80015fe:	d104      	bne.n	800160a <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	e002      	b.n	8001610 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800160a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800160c:	2a12      	cmp	r2, #18
 800160e:	d0f7      	beq.n	8001600 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001610:	9600      	str	r6, [sp, #0]
 8001612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001614:	2200      	movs	r2, #0
 8001616:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800161a:	4620      	mov	r0, r4
 800161c:	f7ff fe83 	bl	8001326 <I2C_WaitOnFlagUntilTimeout>
 8001620:	bb28      	cbnz	r0, 800166e <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001622:	6923      	ldr	r3, [r4, #16]
 8001624:	6822      	ldr	r2, [r4, #0]
 8001626:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800162a:	d112      	bne.n	8001652 <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800162c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001630:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001632:	4633      	mov	r3, r6
 8001634:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001636:	4938      	ldr	r1, [pc, #224]	; (8001718 <HAL_I2C_Master_Transmit+0x1a4>)
 8001638:	4620      	mov	r0, r4
 800163a:	f7ff fe34 	bl	80012a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800163e:	4605      	mov	r5, r0
 8001640:	b9a0      	cbnz	r0, 800166c <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001642:	6823      	ldr	r3, [r4, #0]
 8001644:	9003      	str	r0, [sp, #12]
 8001646:	695a      	ldr	r2, [r3, #20]
 8001648:	9203      	str	r2, [sp, #12]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	9303      	str	r3, [sp, #12]
 800164e:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8001650:	e050      	b.n	80016f4 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001652:	11eb      	asrs	r3, r5, #7
 8001654:	f003 0306 	and.w	r3, r3, #6
 8001658:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800165c:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800165e:	492f      	ldr	r1, [pc, #188]	; (800171c <HAL_I2C_Master_Transmit+0x1a8>)
 8001660:	4633      	mov	r3, r6
 8001662:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001664:	4620      	mov	r0, r4
 8001666:	f7ff fe1e 	bl	80012a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800166a:	b148      	cbz	r0, 8001680 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800166c:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800166e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001670:	2b04      	cmp	r3, #4
 8001672:	f04f 0300 	mov.w	r3, #0
 8001676:	d107      	bne.n	8001688 <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 8001678:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 800167c:	2501      	movs	r5, #1
 800167e:	e787      	b.n	8001590 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001680:	6823      	ldr	r3, [r4, #0]
 8001682:	b2ed      	uxtb	r5, r5
 8001684:	611d      	str	r5, [r3, #16]
 8001686:	e7d4      	b.n	8001632 <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 8001688:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 800168c:	2503      	movs	r5, #3
 800168e:	e77f      	b.n	8001590 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001690:	4632      	mov	r2, r6
 8001692:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001694:	4620      	mov	r0, r4
 8001696:	f7ff fe74 	bl	8001382 <I2C_WaitOnTXEFlagUntilTimeout>
 800169a:	b140      	cbz	r0, 80016ae <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800169c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800169e:	2b04      	cmp	r3, #4
 80016a0:	d1f4      	bne.n	800168c <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80016a2:	6822      	ldr	r2, [r4, #0]
 80016a4:	6813      	ldr	r3, [r2, #0]
 80016a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	e7e6      	b.n	800167c <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80016ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80016b0:	6820      	ldr	r0, [r4, #0]
 80016b2:	1c4b      	adds	r3, r1, #1
 80016b4:	6263      	str	r3, [r4, #36]	; 0x24
 80016b6:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 80016b8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80016ba:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 80016bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016be:	3b01      	subs	r3, #1
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016c4:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 80016c6:	1e53      	subs	r3, r2, #1
 80016c8:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016ca:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 80016cc:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016ce:	d50a      	bpl.n	80016e6 <HAL_I2C_Master_Transmit+0x172>
 80016d0:	b14b      	cbz	r3, 80016e6 <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80016d2:	1c8b      	adds	r3, r1, #2
 80016d4:	6263      	str	r3, [r4, #36]	; 0x24
 80016d6:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 80016d8:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80016da:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 80016dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80016de:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80016e0:	3b01      	subs	r3, #1
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016e6:	4632      	mov	r2, r6
 80016e8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80016ea:	4620      	mov	r0, r4
 80016ec:	f7ff fe9c 	bl	8001428 <I2C_WaitOnBTFFlagUntilTimeout>
 80016f0:	2800      	cmp	r0, #0
 80016f2:	d1d3      	bne.n	800169c <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 80016f4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1ca      	bne.n	8001690 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80016fa:	6821      	ldr	r1, [r4, #0]
 80016fc:	680a      	ldr	r2, [r1, #0]
 80016fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001702:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001704:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8001706:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 800170a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800170e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001712:	e73d      	b.n	8001590 <HAL_I2C_Master_Transmit+0x1c>
 8001714:	00100002 	.word	0x00100002
 8001718:	00010002 	.word	0x00010002
 800171c:	00010008 	.word	0x00010008

08001720 <HAL_I2C_Master_Receive>:
{
 8001720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001724:	4604      	mov	r4, r0
 8001726:	b089      	sub	sp, #36	; 0x24
 8001728:	4698      	mov	r8, r3
 800172a:	460d      	mov	r5, r1
 800172c:	4691      	mov	r9, r2
 800172e:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8001730:	f7ff fc30 	bl	8000f94 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001734:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001738:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 800173a:	2b20      	cmp	r3, #32
 800173c:	d004      	beq.n	8001748 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 800173e:	2502      	movs	r5, #2
}
 8001740:	4628      	mov	r0, r5
 8001742:	b009      	add	sp, #36	; 0x24
 8001744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001748:	9000      	str	r0, [sp, #0]
 800174a:	2319      	movs	r3, #25
 800174c:	2201      	movs	r2, #1
 800174e:	49a2      	ldr	r1, [pc, #648]	; (80019d8 <HAL_I2C_Master_Receive+0x2b8>)
 8001750:	4620      	mov	r0, r4
 8001752:	f7ff fde8 	bl	8001326 <I2C_WaitOnFlagUntilTimeout>
 8001756:	2800      	cmp	r0, #0
 8001758:	d1f1      	bne.n	800173e <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 800175a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800175e:	2b01      	cmp	r3, #1
 8001760:	d0ed      	beq.n	800173e <HAL_I2C_Master_Receive+0x1e>
 8001762:	2301      	movs	r3, #1
 8001764:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001768:	6823      	ldr	r3, [r4, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800176e:	bf5e      	ittt	pl
 8001770:	681a      	ldrpl	r2, [r3, #0]
 8001772:	f042 0201 	orrpl.w	r2, r2, #1
 8001776:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800177e:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001780:	2222      	movs	r2, #34	; 0x22
 8001782:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001786:	2210      	movs	r2, #16
 8001788:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800178c:	2200      	movs	r2, #0
 800178e:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001790:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8001794:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001798:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800179a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 800179c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80017a0:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80017a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80017a4:	6819      	ldr	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80017a6:	2a04      	cmp	r2, #4
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80017a8:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80017ac:	6019      	str	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80017ae:	d004      	beq.n	80017ba <HAL_I2C_Master_Receive+0x9a>
 80017b0:	2a01      	cmp	r2, #1
 80017b2:	d002      	beq.n	80017ba <HAL_I2C_Master_Receive+0x9a>
 80017b4:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80017b8:	d104      	bne.n	80017c4 <HAL_I2C_Master_Receive+0xa4>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	e002      	b.n	80017ca <HAL_I2C_Master_Receive+0xaa>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80017c4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80017c6:	2a11      	cmp	r2, #17
 80017c8:	d0f7      	beq.n	80017ba <HAL_I2C_Master_Receive+0x9a>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017ca:	9600      	str	r6, [sp, #0]
 80017cc:	463b      	mov	r3, r7
 80017ce:	2200      	movs	r2, #0
 80017d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80017d4:	4620      	mov	r0, r4
 80017d6:	f7ff fda6 	bl	8001326 <I2C_WaitOnFlagUntilTimeout>
 80017da:	2800      	cmp	r0, #0
 80017dc:	d14d      	bne.n	800187a <HAL_I2C_Master_Receive+0x15a>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017de:	6923      	ldr	r3, [r4, #16]
 80017e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017e4:	6823      	ldr	r3, [r4, #0]
 80017e6:	d139      	bne.n	800185c <HAL_I2C_Master_Receive+0x13c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80017e8:	f045 0501 	orr.w	r5, r5, #1
 80017ec:	b2ed      	uxtb	r5, r5
 80017ee:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80017f0:	4633      	mov	r3, r6
 80017f2:	463a      	mov	r2, r7
 80017f4:	4979      	ldr	r1, [pc, #484]	; (80019dc <HAL_I2C_Master_Receive+0x2bc>)
 80017f6:	4620      	mov	r0, r4
 80017f8:	f7ff fd55 	bl	80012a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017fc:	4605      	mov	r5, r0
 80017fe:	2800      	cmp	r0, #0
 8001800:	d13a      	bne.n	8001878 <HAL_I2C_Master_Receive+0x158>
    if(hi2c->XferSize == 0U)
 8001802:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001804:	6823      	ldr	r3, [r4, #0]
 8001806:	2a00      	cmp	r2, #0
 8001808:	d069      	beq.n	80018de <HAL_I2C_Master_Receive+0x1be>
    else if(hi2c->XferSize == 1U)
 800180a:	2a01      	cmp	r2, #1
 800180c:	d17a      	bne.n	8001904 <HAL_I2C_Master_Receive+0x1e4>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001814:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001816:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001818:	6823      	ldr	r3, [r4, #0]
 800181a:	9504      	str	r5, [sp, #16]
 800181c:	695a      	ldr	r2, [r3, #20]
 800181e:	9204      	str	r2, [sp, #16]
 8001820:	699a      	ldr	r2, [r3, #24]
 8001822:	9204      	str	r2, [sp, #16]
 8001824:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800182c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800182e:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001830:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80019e4 <HAL_I2C_Master_Receive+0x2c4>
    while(hi2c->XferSize > 0U)
 8001834:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001836:	2b00      	cmp	r3, #0
 8001838:	d05b      	beq.n	80018f2 <HAL_I2C_Master_Receive+0x1d2>
      if(hi2c->XferSize <= 3U)
 800183a:	2b03      	cmp	r3, #3
 800183c:	f200 80d4 	bhi.w	80019e8 <HAL_I2C_Master_Receive+0x2c8>
        if(hi2c->XferSize == 1U)
 8001840:	2b01      	cmp	r3, #1
 8001842:	d17b      	bne.n	800193c <HAL_I2C_Master_Receive+0x21c>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001844:	4632      	mov	r2, r6
 8001846:	4639      	mov	r1, r7
 8001848:	4620      	mov	r0, r4
 800184a:	f7ff fdc0 	bl	80013ce <I2C_WaitOnRXNEFlagUntilTimeout>
 800184e:	2800      	cmp	r0, #0
 8001850:	f000 8093 	beq.w	800197a <HAL_I2C_Master_Receive+0x25a>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001854:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001856:	2b20      	cmp	r3, #32
 8001858:	d116      	bne.n	8001888 <HAL_I2C_Master_Receive+0x168>
 800185a:	e03e      	b.n	80018da <HAL_I2C_Master_Receive+0x1ba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800185c:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8001860:	f008 0806 	and.w	r8, r8, #6
 8001864:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8001868:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800186a:	495d      	ldr	r1, [pc, #372]	; (80019e0 <HAL_I2C_Master_Receive+0x2c0>)
 800186c:	4633      	mov	r3, r6
 800186e:	463a      	mov	r2, r7
 8001870:	4620      	mov	r0, r4
 8001872:	f7ff fd18 	bl	80012a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001876:	b148      	cbz	r0, 800188c <HAL_I2C_Master_Receive+0x16c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001878:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800187a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800187c:	2b04      	cmp	r3, #4
 800187e:	f04f 0300 	mov.w	r3, #0
 8001882:	d128      	bne.n	80018d6 <HAL_I2C_Master_Receive+0x1b6>
        __HAL_UNLOCK(hi2c);
 8001884:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 8001888:	2501      	movs	r5, #1
 800188a:	e759      	b.n	8001740 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800188c:	6823      	ldr	r3, [r4, #0]
 800188e:	b2ed      	uxtb	r5, r5
 8001890:	611d      	str	r5, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001892:	463a      	mov	r2, r7
 8001894:	4633      	mov	r3, r6
 8001896:	4951      	ldr	r1, [pc, #324]	; (80019dc <HAL_I2C_Master_Receive+0x2bc>)
 8001898:	4620      	mov	r0, r4
 800189a:	f7ff fd04 	bl	80012a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800189e:	4602      	mov	r2, r0
 80018a0:	2800      	cmp	r0, #0
 80018a2:	d1e9      	bne.n	8001878 <HAL_I2C_Master_Receive+0x158>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018a4:	6823      	ldr	r3, [r4, #0]
 80018a6:	9007      	str	r0, [sp, #28]
 80018a8:	6959      	ldr	r1, [r3, #20]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018aa:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ac:	9107      	str	r1, [sp, #28]
 80018ae:	6999      	ldr	r1, [r3, #24]
 80018b0:	9107      	str	r1, [sp, #28]
 80018b2:	9907      	ldr	r1, [sp, #28]
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80018b4:	6819      	ldr	r1, [r3, #0]
 80018b6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80018ba:	6019      	str	r1, [r3, #0]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018bc:	9600      	str	r6, [sp, #0]
 80018be:	463b      	mov	r3, r7
 80018c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018c4:	f7ff fd2f 	bl	8001326 <I2C_WaitOnFlagUntilTimeout>
 80018c8:	2800      	cmp	r0, #0
 80018ca:	d1d6      	bne.n	800187a <HAL_I2C_Master_Receive+0x15a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80018cc:	6822      	ldr	r2, [r4, #0]
 80018ce:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 80018d2:	6113      	str	r3, [r2, #16]
 80018d4:	e78c      	b.n	80017f0 <HAL_I2C_Master_Receive+0xd0>
        __HAL_UNLOCK(hi2c);
 80018d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_TIMEOUT;
 80018da:	2503      	movs	r5, #3
 80018dc:	e730      	b.n	8001740 <HAL_I2C_Master_Receive+0x20>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018de:	9503      	str	r5, [sp, #12]
 80018e0:	695a      	ldr	r2, [r3, #20]
 80018e2:	9203      	str	r2, [sp, #12]
 80018e4:	699a      	ldr	r2, [r3, #24]
 80018e6:	9203      	str	r2, [sp, #12]
 80018e8:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018f0:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80018f2:	2320      	movs	r3, #32
 80018f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80018fe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001902:	e71d      	b.n	8001740 <HAL_I2C_Master_Receive+0x20>
    else if(hi2c->XferSize == 2U)
 8001904:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001906:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 8001908:	d10e      	bne.n	8001928 <HAL_I2C_Master_Receive+0x208>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 800190a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800190e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001910:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001912:	6823      	ldr	r3, [r4, #0]
 8001914:	9505      	str	r5, [sp, #20]
 8001916:	695a      	ldr	r2, [r3, #20]
 8001918:	9205      	str	r2, [sp, #20]
 800191a:	699a      	ldr	r2, [r3, #24]
 800191c:	9205      	str	r2, [sp, #20]
 800191e:	9a05      	ldr	r2, [sp, #20]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001926:	e781      	b.n	800182c <HAL_I2C_Master_Receive+0x10c>
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001928:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800192c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800192e:	9506      	str	r5, [sp, #24]
 8001930:	695a      	ldr	r2, [r3, #20]
 8001932:	9206      	str	r2, [sp, #24]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	9306      	str	r3, [sp, #24]
 8001938:	9b06      	ldr	r3, [sp, #24]
 800193a:	e779      	b.n	8001830 <HAL_I2C_Master_Receive+0x110>
        else if(hi2c->XferSize == 2U)
 800193c:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800193e:	9600      	str	r6, [sp, #0]
 8001940:	463b      	mov	r3, r7
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	4641      	mov	r1, r8
 8001948:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 800194a:	d124      	bne.n	8001996 <HAL_I2C_Master_Receive+0x276>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800194c:	f7ff fceb 	bl	8001326 <I2C_WaitOnFlagUntilTimeout>
 8001950:	2800      	cmp	r0, #0
 8001952:	d1c2      	bne.n	80018da <HAL_I2C_Master_Receive+0x1ba>
 8001954:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001956:	6823      	ldr	r3, [r4, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800195e:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001960:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	1c51      	adds	r1, r2, #1
 8001966:	6261      	str	r1, [r4, #36]	; 0x24
 8001968:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 800196a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800196c:	3b01      	subs	r3, #1
 800196e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001970:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001972:	3b01      	subs	r3, #1
 8001974:	b29b      	uxth	r3, r3
 8001976:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001978:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800197a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800197c:	1c5a      	adds	r2, r3, #1
 800197e:	6262      	str	r2, [r4, #36]	; 0x24
 8001980:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001982:	6912      	ldr	r2, [r2, #16]
 8001984:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001986:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001988:	3b01      	subs	r3, #1
 800198a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800198c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800198e:	3b01      	subs	r3, #1
 8001990:	b29b      	uxth	r3, r3
 8001992:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001994:	e74e      	b.n	8001834 <HAL_I2C_Master_Receive+0x114>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001996:	f7ff fcc6 	bl	8001326 <I2C_WaitOnFlagUntilTimeout>
 800199a:	4602      	mov	r2, r0
 800199c:	2800      	cmp	r0, #0
 800199e:	d19c      	bne.n	80018da <HAL_I2C_Master_Receive+0x1ba>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80019a0:	6821      	ldr	r1, [r4, #0]
 80019a2:	680b      	ldr	r3, [r1, #0]
 80019a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019a8:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80019aa:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80019ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019ae:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80019b0:	1c59      	adds	r1, r3, #1
 80019b2:	6261      	str	r1, [r4, #36]	; 0x24
 80019b4:	6821      	ldr	r1, [r4, #0]
 80019b6:	6909      	ldr	r1, [r1, #16]
 80019b8:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 80019ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019bc:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 80019be:	3b01      	subs	r3, #1
 80019c0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80019c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019c4:	4641      	mov	r1, r8
          hi2c->XferCount--;
 80019c6:	3b01      	subs	r3, #1
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019cc:	463b      	mov	r3, r7
 80019ce:	f7ff fcaa 	bl	8001326 <I2C_WaitOnFlagUntilTimeout>
 80019d2:	2800      	cmp	r0, #0
 80019d4:	d0bf      	beq.n	8001956 <HAL_I2C_Master_Receive+0x236>
 80019d6:	e780      	b.n	80018da <HAL_I2C_Master_Receive+0x1ba>
 80019d8:	00100002 	.word	0x00100002
 80019dc:	00010002 	.word	0x00010002
 80019e0:	00010008 	.word	0x00010008
 80019e4:	00010004 	.word	0x00010004
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80019e8:	4632      	mov	r2, r6
 80019ea:	4639      	mov	r1, r7
 80019ec:	4620      	mov	r0, r4
 80019ee:	f7ff fcee 	bl	80013ce <I2C_WaitOnRXNEFlagUntilTimeout>
 80019f2:	2800      	cmp	r0, #0
 80019f4:	f47f af2e 	bne.w	8001854 <HAL_I2C_Master_Receive+0x134>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80019f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019fa:	1c5a      	adds	r2, r3, #1
 80019fc:	6262      	str	r2, [r4, #36]	; 0x24
 80019fe:	6822      	ldr	r2, [r4, #0]
 8001a00:	6912      	ldr	r2, [r2, #16]
 8001a02:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001a04:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001a06:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001a0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001a14:	6953      	ldr	r3, [r2, #20]
 8001a16:	075b      	lsls	r3, r3, #29
 8001a18:	f57f af0c 	bpl.w	8001834 <HAL_I2C_Master_Receive+0x114>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001a1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a1e:	1c59      	adds	r1, r3, #1
 8001a20:	6261      	str	r1, [r4, #36]	; 0x24
 8001a22:	e7ae      	b.n	8001982 <HAL_I2C_Master_Receive+0x262>

08001a24 <HAL_I2C_GetState>:
  return hi2c->State;
 8001a24:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8001a28:	4770      	bx	lr

08001a2a <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8001a2a:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8001a2c:	4770      	bx	lr
	...

08001a30 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a30:	6803      	ldr	r3, [r0, #0]
{
 8001a32:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a36:	07db      	lsls	r3, r3, #31
{
 8001a38:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a3a:	d410      	bmi.n	8001a5e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a3c:	682b      	ldr	r3, [r5, #0]
 8001a3e:	079f      	lsls	r7, r3, #30
 8001a40:	d45e      	bmi.n	8001b00 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a42:	682b      	ldr	r3, [r5, #0]
 8001a44:	0719      	lsls	r1, r3, #28
 8001a46:	f100 8095 	bmi.w	8001b74 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a4a:	682b      	ldr	r3, [r5, #0]
 8001a4c:	075a      	lsls	r2, r3, #29
 8001a4e:	f100 80bf 	bmi.w	8001bd0 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a52:	69ea      	ldr	r2, [r5, #28]
 8001a54:	2a00      	cmp	r2, #0
 8001a56:	f040 812d 	bne.w	8001cb4 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	e014      	b.n	8001a88 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a5e:	4c90      	ldr	r4, [pc, #576]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001a60:	6863      	ldr	r3, [r4, #4]
 8001a62:	f003 030c 	and.w	r3, r3, #12
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d007      	beq.n	8001a7a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a6a:	6863      	ldr	r3, [r4, #4]
 8001a6c:	f003 030c 	and.w	r3, r3, #12
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	d10c      	bne.n	8001a8e <HAL_RCC_OscConfig+0x5e>
 8001a74:	6863      	ldr	r3, [r4, #4]
 8001a76:	03de      	lsls	r6, r3, #15
 8001a78:	d509      	bpl.n	8001a8e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7a:	6823      	ldr	r3, [r4, #0]
 8001a7c:	039c      	lsls	r4, r3, #14
 8001a7e:	d5dd      	bpl.n	8001a3c <HAL_RCC_OscConfig+0xc>
 8001a80:	686b      	ldr	r3, [r5, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1da      	bne.n	8001a3c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001a86:	2001      	movs	r0, #1
}
 8001a88:	b002      	add	sp, #8
 8001a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a8e:	686b      	ldr	r3, [r5, #4]
 8001a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a94:	d110      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x88>
 8001a96:	6823      	ldr	r3, [r4, #0]
 8001a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a9c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a9e:	f7ff fa79 	bl	8000f94 <HAL_GetTick>
 8001aa2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa4:	6823      	ldr	r3, [r4, #0]
 8001aa6:	0398      	lsls	r0, r3, #14
 8001aa8:	d4c8      	bmi.n	8001a3c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aaa:	f7ff fa73 	bl	8000f94 <HAL_GetTick>
 8001aae:	1b80      	subs	r0, r0, r6
 8001ab0:	2864      	cmp	r0, #100	; 0x64
 8001ab2:	d9f7      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001ab4:	2003      	movs	r0, #3
 8001ab6:	e7e7      	b.n	8001a88 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab8:	b99b      	cbnz	r3, 8001ae2 <HAL_RCC_OscConfig+0xb2>
 8001aba:	6823      	ldr	r3, [r4, #0]
 8001abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac0:	6023      	str	r3, [r4, #0]
 8001ac2:	6823      	ldr	r3, [r4, #0]
 8001ac4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ac8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001aca:	f7ff fa63 	bl	8000f94 <HAL_GetTick>
 8001ace:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad0:	6823      	ldr	r3, [r4, #0]
 8001ad2:	0399      	lsls	r1, r3, #14
 8001ad4:	d5b2      	bpl.n	8001a3c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ad6:	f7ff fa5d 	bl	8000f94 <HAL_GetTick>
 8001ada:	1b80      	subs	r0, r0, r6
 8001adc:	2864      	cmp	r0, #100	; 0x64
 8001ade:	d9f7      	bls.n	8001ad0 <HAL_RCC_OscConfig+0xa0>
 8001ae0:	e7e8      	b.n	8001ab4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ae6:	6823      	ldr	r3, [r4, #0]
 8001ae8:	d103      	bne.n	8001af2 <HAL_RCC_OscConfig+0xc2>
 8001aea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aee:	6023      	str	r3, [r4, #0]
 8001af0:	e7d1      	b.n	8001a96 <HAL_RCC_OscConfig+0x66>
 8001af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af6:	6023      	str	r3, [r4, #0]
 8001af8:	6823      	ldr	r3, [r4, #0]
 8001afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001afe:	e7cd      	b.n	8001a9c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b00:	4c67      	ldr	r4, [pc, #412]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001b02:	6863      	ldr	r3, [r4, #4]
 8001b04:	f013 0f0c 	tst.w	r3, #12
 8001b08:	d007      	beq.n	8001b1a <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b0a:	6863      	ldr	r3, [r4, #4]
 8001b0c:	f003 030c 	and.w	r3, r3, #12
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d110      	bne.n	8001b36 <HAL_RCC_OscConfig+0x106>
 8001b14:	6863      	ldr	r3, [r4, #4]
 8001b16:	03da      	lsls	r2, r3, #15
 8001b18:	d40d      	bmi.n	8001b36 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b1a:	6823      	ldr	r3, [r4, #0]
 8001b1c:	079b      	lsls	r3, r3, #30
 8001b1e:	d502      	bpl.n	8001b26 <HAL_RCC_OscConfig+0xf6>
 8001b20:	692b      	ldr	r3, [r5, #16]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d1af      	bne.n	8001a86 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b26:	6823      	ldr	r3, [r4, #0]
 8001b28:	696a      	ldr	r2, [r5, #20]
 8001b2a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001b2e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001b32:	6023      	str	r3, [r4, #0]
 8001b34:	e785      	b.n	8001a42 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b36:	692a      	ldr	r2, [r5, #16]
 8001b38:	4b5a      	ldr	r3, [pc, #360]	; (8001ca4 <HAL_RCC_OscConfig+0x274>)
 8001b3a:	b16a      	cbz	r2, 8001b58 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b40:	f7ff fa28 	bl	8000f94 <HAL_GetTick>
 8001b44:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b46:	6823      	ldr	r3, [r4, #0]
 8001b48:	079f      	lsls	r7, r3, #30
 8001b4a:	d4ec      	bmi.n	8001b26 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b4c:	f7ff fa22 	bl	8000f94 <HAL_GetTick>
 8001b50:	1b80      	subs	r0, r0, r6
 8001b52:	2802      	cmp	r0, #2
 8001b54:	d9f7      	bls.n	8001b46 <HAL_RCC_OscConfig+0x116>
 8001b56:	e7ad      	b.n	8001ab4 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001b58:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b5a:	f7ff fa1b 	bl	8000f94 <HAL_GetTick>
 8001b5e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b60:	6823      	ldr	r3, [r4, #0]
 8001b62:	0798      	lsls	r0, r3, #30
 8001b64:	f57f af6d 	bpl.w	8001a42 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b68:	f7ff fa14 	bl	8000f94 <HAL_GetTick>
 8001b6c:	1b80      	subs	r0, r0, r6
 8001b6e:	2802      	cmp	r0, #2
 8001b70:	d9f6      	bls.n	8001b60 <HAL_RCC_OscConfig+0x130>
 8001b72:	e79f      	b.n	8001ab4 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b74:	69aa      	ldr	r2, [r5, #24]
 8001b76:	4c4a      	ldr	r4, [pc, #296]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001b78:	4b4b      	ldr	r3, [pc, #300]	; (8001ca8 <HAL_RCC_OscConfig+0x278>)
 8001b7a:	b1da      	cbz	r2, 8001bb4 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001b80:	f7ff fa08 	bl	8000f94 <HAL_GetTick>
 8001b84:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b88:	079b      	lsls	r3, r3, #30
 8001b8a:	d50d      	bpl.n	8001ba8 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b8c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001b90:	4b46      	ldr	r3, [pc, #280]	; (8001cac <HAL_RCC_OscConfig+0x27c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b98:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001b9a:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001b9c:	9b01      	ldr	r3, [sp, #4]
 8001b9e:	1e5a      	subs	r2, r3, #1
 8001ba0:	9201      	str	r2, [sp, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f9      	bne.n	8001b9a <HAL_RCC_OscConfig+0x16a>
 8001ba6:	e750      	b.n	8001a4a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ba8:	f7ff f9f4 	bl	8000f94 <HAL_GetTick>
 8001bac:	1b80      	subs	r0, r0, r6
 8001bae:	2802      	cmp	r0, #2
 8001bb0:	d9e9      	bls.n	8001b86 <HAL_RCC_OscConfig+0x156>
 8001bb2:	e77f      	b.n	8001ab4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001bb4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001bb6:	f7ff f9ed 	bl	8000f94 <HAL_GetTick>
 8001bba:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bbe:	079f      	lsls	r7, r3, #30
 8001bc0:	f57f af43 	bpl.w	8001a4a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bc4:	f7ff f9e6 	bl	8000f94 <HAL_GetTick>
 8001bc8:	1b80      	subs	r0, r0, r6
 8001bca:	2802      	cmp	r0, #2
 8001bcc:	d9f6      	bls.n	8001bbc <HAL_RCC_OscConfig+0x18c>
 8001bce:	e771      	b.n	8001ab4 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bd0:	4c33      	ldr	r4, [pc, #204]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001bd2:	69e3      	ldr	r3, [r4, #28]
 8001bd4:	00d8      	lsls	r0, r3, #3
 8001bd6:	d424      	bmi.n	8001c22 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001bd8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bda:	69e3      	ldr	r3, [r4, #28]
 8001bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be0:	61e3      	str	r3, [r4, #28]
 8001be2:	69e3      	ldr	r3, [r4, #28]
 8001be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bec:	4e30      	ldr	r6, [pc, #192]	; (8001cb0 <HAL_RCC_OscConfig+0x280>)
 8001bee:	6833      	ldr	r3, [r6, #0]
 8001bf0:	05d9      	lsls	r1, r3, #23
 8001bf2:	d518      	bpl.n	8001c26 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf4:	68eb      	ldr	r3, [r5, #12]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d126      	bne.n	8001c48 <HAL_RCC_OscConfig+0x218>
 8001bfa:	6a23      	ldr	r3, [r4, #32]
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001c02:	f7ff f9c7 	bl	8000f94 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c06:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001c0a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c0c:	6a23      	ldr	r3, [r4, #32]
 8001c0e:	079b      	lsls	r3, r3, #30
 8001c10:	d53f      	bpl.n	8001c92 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001c12:	2f00      	cmp	r7, #0
 8001c14:	f43f af1d 	beq.w	8001a52 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c18:	69e3      	ldr	r3, [r4, #28]
 8001c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	61e3      	str	r3, [r4, #28]
 8001c20:	e717      	b.n	8001a52 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001c22:	2700      	movs	r7, #0
 8001c24:	e7e2      	b.n	8001bec <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c26:	6833      	ldr	r3, [r6, #0]
 8001c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001c2e:	f7ff f9b1 	bl	8000f94 <HAL_GetTick>
 8001c32:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c34:	6833      	ldr	r3, [r6, #0]
 8001c36:	05da      	lsls	r2, r3, #23
 8001c38:	d4dc      	bmi.n	8001bf4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c3a:	f7ff f9ab 	bl	8000f94 <HAL_GetTick>
 8001c3e:	eba0 0008 	sub.w	r0, r0, r8
 8001c42:	2864      	cmp	r0, #100	; 0x64
 8001c44:	d9f6      	bls.n	8001c34 <HAL_RCC_OscConfig+0x204>
 8001c46:	e735      	b.n	8001ab4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c48:	b9ab      	cbnz	r3, 8001c76 <HAL_RCC_OscConfig+0x246>
 8001c4a:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c4c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c50:	f023 0301 	bic.w	r3, r3, #1
 8001c54:	6223      	str	r3, [r4, #32]
 8001c56:	6a23      	ldr	r3, [r4, #32]
 8001c58:	f023 0304 	bic.w	r3, r3, #4
 8001c5c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001c5e:	f7ff f999 	bl	8000f94 <HAL_GetTick>
 8001c62:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c64:	6a23      	ldr	r3, [r4, #32]
 8001c66:	0798      	lsls	r0, r3, #30
 8001c68:	d5d3      	bpl.n	8001c12 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c6a:	f7ff f993 	bl	8000f94 <HAL_GetTick>
 8001c6e:	1b80      	subs	r0, r0, r6
 8001c70:	4540      	cmp	r0, r8
 8001c72:	d9f7      	bls.n	8001c64 <HAL_RCC_OscConfig+0x234>
 8001c74:	e71e      	b.n	8001ab4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c76:	2b05      	cmp	r3, #5
 8001c78:	6a23      	ldr	r3, [r4, #32]
 8001c7a:	d103      	bne.n	8001c84 <HAL_RCC_OscConfig+0x254>
 8001c7c:	f043 0304 	orr.w	r3, r3, #4
 8001c80:	6223      	str	r3, [r4, #32]
 8001c82:	e7ba      	b.n	8001bfa <HAL_RCC_OscConfig+0x1ca>
 8001c84:	f023 0301 	bic.w	r3, r3, #1
 8001c88:	6223      	str	r3, [r4, #32]
 8001c8a:	6a23      	ldr	r3, [r4, #32]
 8001c8c:	f023 0304 	bic.w	r3, r3, #4
 8001c90:	e7b6      	b.n	8001c00 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c92:	f7ff f97f 	bl	8000f94 <HAL_GetTick>
 8001c96:	eba0 0008 	sub.w	r0, r0, r8
 8001c9a:	42b0      	cmp	r0, r6
 8001c9c:	d9b6      	bls.n	8001c0c <HAL_RCC_OscConfig+0x1dc>
 8001c9e:	e709      	b.n	8001ab4 <HAL_RCC_OscConfig+0x84>
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	42420000 	.word	0x42420000
 8001ca8:	42420480 	.word	0x42420480
 8001cac:	20000008 	.word	0x20000008
 8001cb0:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cb4:	4c22      	ldr	r4, [pc, #136]	; (8001d40 <HAL_RCC_OscConfig+0x310>)
 8001cb6:	6863      	ldr	r3, [r4, #4]
 8001cb8:	f003 030c 	and.w	r3, r3, #12
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	f43f aee2 	beq.w	8001a86 <HAL_RCC_OscConfig+0x56>
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	4e1f      	ldr	r6, [pc, #124]	; (8001d44 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cc6:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001cc8:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cca:	d12b      	bne.n	8001d24 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001ccc:	f7ff f962 	bl	8000f94 <HAL_GetTick>
 8001cd0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd2:	6823      	ldr	r3, [r4, #0]
 8001cd4:	0199      	lsls	r1, r3, #6
 8001cd6:	d41f      	bmi.n	8001d18 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cd8:	6a2b      	ldr	r3, [r5, #32]
 8001cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cde:	d105      	bne.n	8001cec <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ce0:	6862      	ldr	r2, [r4, #4]
 8001ce2:	68a9      	ldr	r1, [r5, #8]
 8001ce4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cec:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001cee:	6862      	ldr	r2, [r4, #4]
 8001cf0:	430b      	orrs	r3, r1
 8001cf2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001cfe:	f7ff f949 	bl	8000f94 <HAL_GetTick>
 8001d02:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d04:	6823      	ldr	r3, [r4, #0]
 8001d06:	019a      	lsls	r2, r3, #6
 8001d08:	f53f aea7 	bmi.w	8001a5a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d0c:	f7ff f942 	bl	8000f94 <HAL_GetTick>
 8001d10:	1b40      	subs	r0, r0, r5
 8001d12:	2802      	cmp	r0, #2
 8001d14:	d9f6      	bls.n	8001d04 <HAL_RCC_OscConfig+0x2d4>
 8001d16:	e6cd      	b.n	8001ab4 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d18:	f7ff f93c 	bl	8000f94 <HAL_GetTick>
 8001d1c:	1bc0      	subs	r0, r0, r7
 8001d1e:	2802      	cmp	r0, #2
 8001d20:	d9d7      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x2a2>
 8001d22:	e6c7      	b.n	8001ab4 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001d24:	f7ff f936 	bl	8000f94 <HAL_GetTick>
 8001d28:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d2a:	6823      	ldr	r3, [r4, #0]
 8001d2c:	019b      	lsls	r3, r3, #6
 8001d2e:	f57f ae94 	bpl.w	8001a5a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d32:	f7ff f92f 	bl	8000f94 <HAL_GetTick>
 8001d36:	1b40      	subs	r0, r0, r5
 8001d38:	2802      	cmp	r0, #2
 8001d3a:	d9f6      	bls.n	8001d2a <HAL_RCC_OscConfig+0x2fa>
 8001d3c:	e6ba      	b.n	8001ab4 <HAL_RCC_OscConfig+0x84>
 8001d3e:	bf00      	nop
 8001d40:	40021000 	.word	0x40021000
 8001d44:	42420060 	.word	0x42420060

08001d48 <HAL_RCC_GetSysClockFreq>:
{
 8001d48:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d4a:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001d4c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d4e:	ac02      	add	r4, sp, #8
 8001d50:	f103 0510 	add.w	r5, r3, #16
 8001d54:	4622      	mov	r2, r4
 8001d56:	6818      	ldr	r0, [r3, #0]
 8001d58:	6859      	ldr	r1, [r3, #4]
 8001d5a:	3308      	adds	r3, #8
 8001d5c:	c203      	stmia	r2!, {r0, r1}
 8001d5e:	42ab      	cmp	r3, r5
 8001d60:	4614      	mov	r4, r2
 8001d62:	d1f7      	bne.n	8001d54 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d64:	2301      	movs	r3, #1
 8001d66:	f88d 3004 	strb.w	r3, [sp, #4]
 8001d6a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001d6c:	4911      	ldr	r1, [pc, #68]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d6e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001d72:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001d74:	f003 020c 	and.w	r2, r3, #12
 8001d78:	2a08      	cmp	r2, #8
 8001d7a:	d117      	bne.n	8001dac <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d7c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001d80:	a806      	add	r0, sp, #24
 8001d82:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d84:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d86:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d8a:	d50c      	bpl.n	8001da6 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d8c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d8e:	480a      	ldr	r0, [pc, #40]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d90:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d94:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d96:	aa06      	add	r2, sp, #24
 8001d98:	4413      	add	r3, r2
 8001d9a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d9e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001da2:	b007      	add	sp, #28
 8001da4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001da6:	4805      	ldr	r0, [pc, #20]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x74>)
 8001da8:	4350      	muls	r0, r2
 8001daa:	e7fa      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001dac:	4802      	ldr	r0, [pc, #8]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001dae:	e7f8      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0x5a>
 8001db0:	08004888 	.word	0x08004888
 8001db4:	40021000 	.word	0x40021000
 8001db8:	007a1200 	.word	0x007a1200
 8001dbc:	003d0900 	.word	0x003d0900

08001dc0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001dc0:	4a54      	ldr	r2, [pc, #336]	; (8001f14 <HAL_RCC_ClockConfig+0x154>)
{
 8001dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001dc6:	6813      	ldr	r3, [r2, #0]
{
 8001dc8:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	428b      	cmp	r3, r1
{
 8001dd0:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001dd2:	d32a      	bcc.n	8001e2a <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd4:	6829      	ldr	r1, [r5, #0]
 8001dd6:	078c      	lsls	r4, r1, #30
 8001dd8:	d434      	bmi.n	8001e44 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dda:	07ca      	lsls	r2, r1, #31
 8001ddc:	d447      	bmi.n	8001e6e <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001dde:	4a4d      	ldr	r2, [pc, #308]	; (8001f14 <HAL_RCC_ClockConfig+0x154>)
 8001de0:	6813      	ldr	r3, [r2, #0]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	429e      	cmp	r6, r3
 8001de8:	f0c0 8082 	bcc.w	8001ef0 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dec:	682a      	ldr	r2, [r5, #0]
 8001dee:	4c4a      	ldr	r4, [pc, #296]	; (8001f18 <HAL_RCC_ClockConfig+0x158>)
 8001df0:	f012 0f04 	tst.w	r2, #4
 8001df4:	f040 8087 	bne.w	8001f06 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df8:	0713      	lsls	r3, r2, #28
 8001dfa:	d506      	bpl.n	8001e0a <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dfc:	6863      	ldr	r3, [r4, #4]
 8001dfe:	692a      	ldr	r2, [r5, #16]
 8001e00:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001e04:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001e08:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e0a:	f7ff ff9d 	bl	8001d48 <HAL_RCC_GetSysClockFreq>
 8001e0e:	6863      	ldr	r3, [r4, #4]
 8001e10:	4a42      	ldr	r2, [pc, #264]	; (8001f1c <HAL_RCC_ClockConfig+0x15c>)
 8001e12:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e16:	5cd3      	ldrb	r3, [r2, r3]
 8001e18:	40d8      	lsrs	r0, r3
 8001e1a:	4b41      	ldr	r3, [pc, #260]	; (8001f20 <HAL_RCC_ClockConfig+0x160>)
 8001e1c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f7ff f876 	bl	8000f10 <HAL_InitTick>
  return HAL_OK;
 8001e24:	2000      	movs	r0, #0
}
 8001e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2a:	6813      	ldr	r3, [r2, #0]
 8001e2c:	f023 0307 	bic.w	r3, r3, #7
 8001e30:	430b      	orrs	r3, r1
 8001e32:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e34:	6813      	ldr	r3, [r2, #0]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	4299      	cmp	r1, r3
 8001e3c:	d0ca      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001e3e:	2001      	movs	r0, #1
 8001e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e44:	4b34      	ldr	r3, [pc, #208]	; (8001f18 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e46:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e4a:	bf1e      	ittt	ne
 8001e4c:	685a      	ldrne	r2, [r3, #4]
 8001e4e:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001e52:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e54:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e56:	bf42      	ittt	mi
 8001e58:	685a      	ldrmi	r2, [r3, #4]
 8001e5a:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001e5e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	68a8      	ldr	r0, [r5, #8]
 8001e64:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001e68:	4302      	orrs	r2, r0
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	e7b5      	b.n	8001dda <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e6e:	686a      	ldr	r2, [r5, #4]
 8001e70:	4c29      	ldr	r4, [pc, #164]	; (8001f18 <HAL_RCC_ClockConfig+0x158>)
 8001e72:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e74:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e76:	d11c      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e78:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e7c:	d0df      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e7e:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e80:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e84:	f023 0303 	bic.w	r3, r3, #3
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001e8c:	f7ff f882 	bl	8000f94 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e90:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001e92:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d114      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e98:	6863      	ldr	r3, [r4, #4]
 8001e9a:	f003 030c 	and.w	r3, r3, #12
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d09d      	beq.n	8001dde <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea2:	f7ff f877 	bl	8000f94 <HAL_GetTick>
 8001ea6:	1bc0      	subs	r0, r0, r7
 8001ea8:	4540      	cmp	r0, r8
 8001eaa:	d9f5      	bls.n	8001e98 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8001eac:	2003      	movs	r0, #3
 8001eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eb2:	2a02      	cmp	r2, #2
 8001eb4:	d102      	bne.n	8001ebc <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001eba:	e7df      	b.n	8001e7c <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ebc:	f013 0f02 	tst.w	r3, #2
 8001ec0:	e7dc      	b.n	8001e7c <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d10f      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ec6:	6863      	ldr	r3, [r4, #4]
 8001ec8:	f003 030c 	and.w	r3, r3, #12
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d086      	beq.n	8001dde <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed0:	f7ff f860 	bl	8000f94 <HAL_GetTick>
 8001ed4:	1bc0      	subs	r0, r0, r7
 8001ed6:	4540      	cmp	r0, r8
 8001ed8:	d9f5      	bls.n	8001ec6 <HAL_RCC_ClockConfig+0x106>
 8001eda:	e7e7      	b.n	8001eac <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001edc:	f7ff f85a 	bl	8000f94 <HAL_GetTick>
 8001ee0:	1bc0      	subs	r0, r0, r7
 8001ee2:	4540      	cmp	r0, r8
 8001ee4:	d8e2      	bhi.n	8001eac <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ee6:	6863      	ldr	r3, [r4, #4]
 8001ee8:	f013 0f0c 	tst.w	r3, #12
 8001eec:	d1f6      	bne.n	8001edc <HAL_RCC_ClockConfig+0x11c>
 8001eee:	e776      	b.n	8001dde <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef0:	6813      	ldr	r3, [r2, #0]
 8001ef2:	f023 0307 	bic.w	r3, r3, #7
 8001ef6:	4333      	orrs	r3, r6
 8001ef8:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001efa:	6813      	ldr	r3, [r2, #0]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	429e      	cmp	r6, r3
 8001f02:	d19c      	bne.n	8001e3e <HAL_RCC_ClockConfig+0x7e>
 8001f04:	e772      	b.n	8001dec <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f06:	6863      	ldr	r3, [r4, #4]
 8001f08:	68e9      	ldr	r1, [r5, #12]
 8001f0a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f0e:	430b      	orrs	r3, r1
 8001f10:	6063      	str	r3, [r4, #4]
 8001f12:	e771      	b.n	8001df8 <HAL_RCC_ClockConfig+0x38>
 8001f14:	40022000 	.word	0x40022000
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	080049c2 	.word	0x080049c2
 8001f20:	20000008 	.word	0x20000008

08001f24 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f24:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001f26:	4a05      	ldr	r2, [pc, #20]	; (8001f3c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001f2e:	5cd3      	ldrb	r3, [r2, r3]
 8001f30:	4a03      	ldr	r2, [pc, #12]	; (8001f40 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001f32:	6810      	ldr	r0, [r2, #0]
}    
 8001f34:	40d8      	lsrs	r0, r3
 8001f36:	4770      	bx	lr
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	080049d2 	.word	0x080049d2
 8001f40:	20000008 	.word	0x20000008

08001f44 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001f46:	4a05      	ldr	r2, [pc, #20]	; (8001f5c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001f4e:	5cd3      	ldrb	r3, [r2, r3]
 8001f50:	4a03      	ldr	r2, [pc, #12]	; (8001f60 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001f52:	6810      	ldr	r0, [r2, #0]
} 
 8001f54:	40d8      	lsrs	r0, r3
 8001f56:	4770      	bx	lr
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	080049d2 	.word	0x080049d2
 8001f60:	20000008 	.word	0x20000008

08001f64 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f64:	6a03      	ldr	r3, [r0, #32]
{
 8001f66:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f68:	f023 0301 	bic.w	r3, r3, #1
 8001f6c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f6e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f70:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f72:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f74:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f76:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001f7a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f7c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001f7e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001f82:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f84:	4d0a      	ldr	r5, [pc, #40]	; (8001fb0 <TIM_OC1_SetConfig+0x4c>)
 8001f86:	42a8      	cmp	r0, r5
 8001f88:	d10b      	bne.n	8001fa2 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001f8a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001f8c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001f90:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f92:	698e      	ldr	r6, [r1, #24]
 8001f94:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f96:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f9a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f9c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001fa0:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fa2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001fa4:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001fa6:	684a      	ldr	r2, [r1, #4]
 8001fa8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001faa:	6203      	str	r3, [r0, #32]
 8001fac:	bd70      	pop	{r4, r5, r6, pc}
 8001fae:	bf00      	nop
 8001fb0:	40012c00 	.word	0x40012c00

08001fb4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001fb4:	6a03      	ldr	r3, [r0, #32]
{
 8001fb6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fbc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fbe:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fc0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001fc2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fc4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001fc6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001fca:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001fcc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001fce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001fd2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001fd6:	4d0b      	ldr	r5, [pc, #44]	; (8002004 <TIM_OC3_SetConfig+0x50>)
 8001fd8:	42a8      	cmp	r0, r5
 8001fda:	d10d      	bne.n	8001ff8 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001fdc:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001fde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001fe2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001fe6:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001fe8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001fea:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001fee:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001ff0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ff4:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ff8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001ffa:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001ffc:	684a      	ldr	r2, [r1, #4]
 8001ffe:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002000:	6203      	str	r3, [r0, #32]
 8002002:	bd70      	pop	{r4, r5, r6, pc}
 8002004:	40012c00 	.word	0x40012c00

08002008 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002008:	6a03      	ldr	r3, [r0, #32]
{
 800200a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800200c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002010:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002012:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002014:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002016:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002018:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800201a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800201e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002022:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002024:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002028:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800202c:	4d06      	ldr	r5, [pc, #24]	; (8002048 <TIM_OC4_SetConfig+0x40>)
 800202e:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8002030:	bf02      	ittt	eq
 8002032:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002034:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8002038:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800203c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800203e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002040:	684a      	ldr	r2, [r1, #4]
 8002042:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002044:	6203      	str	r3, [r0, #32]
 8002046:	bd30      	pop	{r4, r5, pc}
 8002048:	40012c00 	.word	0x40012c00

0800204c <HAL_TIM_Base_DeInit>:
  htim->State = HAL_TIM_STATE_BUSY;
 800204c:	2302      	movs	r3, #2
  __HAL_TIM_DISABLE(htim);
 800204e:	f241 1211 	movw	r2, #4369	; 0x1111
{
 8002052:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8002054:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 8002058:	6803      	ldr	r3, [r0, #0]
{
 800205a:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE(htim);
 800205c:	6a19      	ldr	r1, [r3, #32]
 800205e:	4211      	tst	r1, r2
 8002060:	d108      	bne.n	8002074 <HAL_TIM_Base_DeInit+0x28>
 8002062:	f240 4244 	movw	r2, #1092	; 0x444
 8002066:	6a19      	ldr	r1, [r3, #32]
 8002068:	4211      	tst	r1, r2
 800206a:	bf02      	ittt	eq
 800206c:	681a      	ldreq	r2, [r3, #0]
 800206e:	f022 0201 	biceq.w	r2, r2, #1
 8002072:	601a      	streq	r2, [r3, #0]
  HAL_TIM_Base_MspDeInit(htim);
 8002074:	4620      	mov	r0, r4
 8002076:	f001 fe07 	bl	8003c88 <HAL_TIM_Base_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 800207a:	2000      	movs	r0, #0
 800207c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002080:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002084:	bd10      	pop	{r4, pc}

08002086 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002086:	6803      	ldr	r3, [r0, #0]
}
 8002088:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800208a:	68da      	ldr	r2, [r3, #12]
 800208c:	f042 0201 	orr.w	r2, r2, #1
 8002090:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	f042 0201 	orr.w	r2, r2, #1
 8002098:	601a      	str	r2, [r3, #0]
}
 800209a:	4770      	bx	lr

0800209c <HAL_TIM_PWM_MspInit>:
 800209c:	4770      	bx	lr

0800209e <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800209e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80020a2:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	f04f 0302 	mov.w	r3, #2
 80020aa:	d01c      	beq.n	80020e6 <HAL_TIM_ConfigClockSource+0x48>
 80020ac:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80020ae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80020b2:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 80020b4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80020b8:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020ba:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80020be:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80020c2:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80020c4:	680a      	ldr	r2, [r1, #0]
 80020c6:	2a40      	cmp	r2, #64	; 0x40
 80020c8:	d079      	beq.n	80021be <HAL_TIM_ConfigClockSource+0x120>
 80020ca:	d819      	bhi.n	8002100 <HAL_TIM_ConfigClockSource+0x62>
 80020cc:	2a10      	cmp	r2, #16
 80020ce:	f000 8093 	beq.w	80021f8 <HAL_TIM_ConfigClockSource+0x15a>
 80020d2:	d80a      	bhi.n	80020ea <HAL_TIM_ConfigClockSource+0x4c>
 80020d4:	2a00      	cmp	r2, #0
 80020d6:	f000 8089 	beq.w	80021ec <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 80020da:	2301      	movs	r3, #1
 80020dc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80020e0:	2300      	movs	r3, #0
 80020e2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80020e6:	4618      	mov	r0, r3
}
 80020e8:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80020ea:	2a20      	cmp	r2, #32
 80020ec:	f000 808a 	beq.w	8002204 <HAL_TIM_ConfigClockSource+0x166>
 80020f0:	2a30      	cmp	r2, #48	; 0x30
 80020f2:	d1f2      	bne.n	80020da <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80020f4:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80020f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80020fa:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80020fe:	e036      	b.n	800216e <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002100:	2a70      	cmp	r2, #112	; 0x70
 8002102:	d036      	beq.n	8002172 <HAL_TIM_ConfigClockSource+0xd4>
 8002104:	d81b      	bhi.n	800213e <HAL_TIM_ConfigClockSource+0xa0>
 8002106:	2a50      	cmp	r2, #80	; 0x50
 8002108:	d042      	beq.n	8002190 <HAL_TIM_ConfigClockSource+0xf2>
 800210a:	2a60      	cmp	r2, #96	; 0x60
 800210c:	d1e5      	bne.n	80020da <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800210e:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002110:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002112:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002116:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002118:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800211a:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800211c:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800211e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002122:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002126:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800212a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800212e:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002130:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002132:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002134:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002138:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 800213c:	e017      	b.n	800216e <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800213e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002142:	d011      	beq.n	8002168 <HAL_TIM_ConfigClockSource+0xca>
 8002144:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002148:	d1c7      	bne.n	80020da <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800214a:	688a      	ldr	r2, [r1, #8]
 800214c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800214e:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002150:	68c9      	ldr	r1, [r1, #12]
 8002152:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002154:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002158:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800215c:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800215e:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002166:	e002      	b.n	800216e <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	e7b3      	b.n	80020da <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002172:	688a      	ldr	r2, [r1, #8]
 8002174:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002176:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002178:	68c9      	ldr	r1, [r1, #12]
 800217a:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800217c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002180:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002184:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8002186:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002188:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800218a:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 800218e:	e7ee      	b.n	800216e <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002190:	684c      	ldr	r4, [r1, #4]
 8002192:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002194:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002196:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002198:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800219c:	f025 0501 	bic.w	r5, r5, #1
 80021a0:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021a2:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80021a4:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021a6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021aa:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80021ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021b0:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80021b2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80021b4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80021b8:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 80021bc:	e7d7      	b.n	800216e <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021be:	684c      	ldr	r4, [r1, #4]
 80021c0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80021c2:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021c4:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021c6:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021ca:	f025 0501 	bic.w	r5, r5, #1
 80021ce:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021d0:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80021d2:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021d4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021d8:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80021dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021de:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80021e0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80021e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80021e6:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80021ea:	e7c0      	b.n	800216e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80021ec:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80021ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80021f2:	f042 0207 	orr.w	r2, r2, #7
 80021f6:	e7ba      	b.n	800216e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80021f8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80021fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80021fe:	f042 0217 	orr.w	r2, r2, #23
 8002202:	e7b4      	b.n	800216e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002204:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002206:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800220a:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800220e:	e7ae      	b.n	800216e <HAL_TIM_ConfigClockSource+0xd0>

08002210 <HAL_TIM_OC_DelayElapsedCallback>:
 8002210:	4770      	bx	lr

08002212 <HAL_TIM_IC_CaptureCallback>:
 8002212:	4770      	bx	lr

08002214 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002214:	4770      	bx	lr

08002216 <HAL_TIM_TriggerCallback>:
 8002216:	4770      	bx	lr

08002218 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002218:	6803      	ldr	r3, [r0, #0]
{
 800221a:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800221c:	691a      	ldr	r2, [r3, #16]
{
 800221e:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002220:	0791      	lsls	r1, r2, #30
 8002222:	d50e      	bpl.n	8002242 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	0792      	lsls	r2, r2, #30
 8002228:	d50b      	bpl.n	8002242 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800222a:	f06f 0202 	mvn.w	r2, #2
 800222e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002230:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002232:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002234:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002236:	079b      	lsls	r3, r3, #30
 8002238:	d077      	beq.n	800232a <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800223a:	f7ff ffea 	bl	8002212 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800223e:	2300      	movs	r3, #0
 8002240:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002242:	6823      	ldr	r3, [r4, #0]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	0750      	lsls	r0, r2, #29
 8002248:	d510      	bpl.n	800226c <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800224a:	68da      	ldr	r2, [r3, #12]
 800224c:	0751      	lsls	r1, r2, #29
 800224e:	d50d      	bpl.n	800226c <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002250:	f06f 0204 	mvn.w	r2, #4
 8002254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002256:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002258:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800225a:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800225c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002260:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002262:	d068      	beq.n	8002336 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002264:	f7ff ffd5 	bl	8002212 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002268:	2300      	movs	r3, #0
 800226a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800226c:	6823      	ldr	r3, [r4, #0]
 800226e:	691a      	ldr	r2, [r3, #16]
 8002270:	0712      	lsls	r2, r2, #28
 8002272:	d50f      	bpl.n	8002294 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002274:	68da      	ldr	r2, [r3, #12]
 8002276:	0710      	lsls	r0, r2, #28
 8002278:	d50c      	bpl.n	8002294 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800227a:	f06f 0208 	mvn.w	r2, #8
 800227e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002280:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002282:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002284:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002286:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8002288:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800228a:	d05a      	beq.n	8002342 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800228c:	f7ff ffc1 	bl	8002212 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002290:	2300      	movs	r3, #0
 8002292:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002294:	6823      	ldr	r3, [r4, #0]
 8002296:	691a      	ldr	r2, [r3, #16]
 8002298:	06d2      	lsls	r2, r2, #27
 800229a:	d510      	bpl.n	80022be <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	06d0      	lsls	r0, r2, #27
 80022a0:	d50d      	bpl.n	80022be <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022a2:	f06f 0210 	mvn.w	r2, #16
 80022a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022a8:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022aa:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022ac:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022ae:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80022b2:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022b4:	d04b      	beq.n	800234e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80022b6:	f7ff ffac 	bl	8002212 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ba:	2300      	movs	r3, #0
 80022bc:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022be:	6823      	ldr	r3, [r4, #0]
 80022c0:	691a      	ldr	r2, [r3, #16]
 80022c2:	07d1      	lsls	r1, r2, #31
 80022c4:	d508      	bpl.n	80022d8 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	07d2      	lsls	r2, r2, #31
 80022ca:	d505      	bpl.n	80022d8 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022cc:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80022d0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022d2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80022d4:	f000 fab0 	bl	8002838 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022d8:	6823      	ldr	r3, [r4, #0]
 80022da:	691a      	ldr	r2, [r3, #16]
 80022dc:	0610      	lsls	r0, r2, #24
 80022de:	d508      	bpl.n	80022f2 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	0611      	lsls	r1, r2, #24
 80022e4:	d505      	bpl.n	80022f2 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80022ea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022ec:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80022ee:	f000 f952 	bl	8002596 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022f2:	6823      	ldr	r3, [r4, #0]
 80022f4:	691a      	ldr	r2, [r3, #16]
 80022f6:	0652      	lsls	r2, r2, #25
 80022f8:	d508      	bpl.n	800230c <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	0650      	lsls	r0, r2, #25
 80022fe:	d505      	bpl.n	800230c <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002300:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002304:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002306:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002308:	f7ff ff85 	bl	8002216 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800230c:	6823      	ldr	r3, [r4, #0]
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	0691      	lsls	r1, r2, #26
 8002312:	d522      	bpl.n	800235a <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	0692      	lsls	r2, r2, #26
 8002318:	d51f      	bpl.n	800235a <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800231a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800231e:	4620      	mov	r0, r4
}
 8002320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002324:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002326:	f000 b935 	b.w	8002594 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800232a:	f7ff ff71 	bl	8002210 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800232e:	4620      	mov	r0, r4
 8002330:	f7ff ff70 	bl	8002214 <HAL_TIM_PWM_PulseFinishedCallback>
 8002334:	e783      	b.n	800223e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002336:	f7ff ff6b 	bl	8002210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800233a:	4620      	mov	r0, r4
 800233c:	f7ff ff6a 	bl	8002214 <HAL_TIM_PWM_PulseFinishedCallback>
 8002340:	e792      	b.n	8002268 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002342:	f7ff ff65 	bl	8002210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002346:	4620      	mov	r0, r4
 8002348:	f7ff ff64 	bl	8002214 <HAL_TIM_PWM_PulseFinishedCallback>
 800234c:	e7a0      	b.n	8002290 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800234e:	f7ff ff5f 	bl	8002210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002352:	4620      	mov	r0, r4
 8002354:	f7ff ff5e 	bl	8002214 <HAL_TIM_PWM_PulseFinishedCallback>
 8002358:	e7af      	b.n	80022ba <HAL_TIM_IRQHandler+0xa2>
 800235a:	bd10      	pop	{r4, pc}

0800235c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800235c:	4a1a      	ldr	r2, [pc, #104]	; (80023c8 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800235e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002360:	4290      	cmp	r0, r2
 8002362:	d00a      	beq.n	800237a <TIM_Base_SetConfig+0x1e>
 8002364:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002368:	d007      	beq.n	800237a <TIM_Base_SetConfig+0x1e>
 800236a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800236e:	4290      	cmp	r0, r2
 8002370:	d003      	beq.n	800237a <TIM_Base_SetConfig+0x1e>
 8002372:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002376:	4290      	cmp	r0, r2
 8002378:	d115      	bne.n	80023a6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 800237a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800237c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002380:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002382:	4a11      	ldr	r2, [pc, #68]	; (80023c8 <TIM_Base_SetConfig+0x6c>)
 8002384:	4290      	cmp	r0, r2
 8002386:	d00a      	beq.n	800239e <TIM_Base_SetConfig+0x42>
 8002388:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800238c:	d007      	beq.n	800239e <TIM_Base_SetConfig+0x42>
 800238e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002392:	4290      	cmp	r0, r2
 8002394:	d003      	beq.n	800239e <TIM_Base_SetConfig+0x42>
 8002396:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800239a:	4290      	cmp	r0, r2
 800239c:	d103      	bne.n	80023a6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800239e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80023a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023a4:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80023a6:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 80023a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80023ac:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80023ae:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023b0:	688b      	ldr	r3, [r1, #8]
 80023b2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80023b4:	680b      	ldr	r3, [r1, #0]
 80023b6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023b8:	4b03      	ldr	r3, [pc, #12]	; (80023c8 <TIM_Base_SetConfig+0x6c>)
 80023ba:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80023bc:	bf04      	itt	eq
 80023be:	690b      	ldreq	r3, [r1, #16]
 80023c0:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80023c2:	2301      	movs	r3, #1
 80023c4:	6143      	str	r3, [r0, #20]
 80023c6:	4770      	bx	lr
 80023c8:	40012c00 	.word	0x40012c00

080023cc <HAL_TIM_Base_Init>:
{
 80023cc:	b510      	push	{r4, lr}
  if(htim == NULL)
 80023ce:	4604      	mov	r4, r0
 80023d0:	b1a0      	cbz	r0, 80023fc <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80023d2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80023d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023da:	b91b      	cbnz	r3, 80023e4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80023dc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80023e0:	f001 fbc4 	bl	8003b6c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80023e4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023e6:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80023e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023ec:	1d21      	adds	r1, r4, #4
 80023ee:	f7ff ffb5 	bl	800235c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80023f2:	2301      	movs	r3, #1
  return HAL_OK;
 80023f4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80023f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80023fa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80023fc:	2001      	movs	r0, #1
}
 80023fe:	bd10      	pop	{r4, pc}

08002400 <HAL_TIM_PWM_Init>:
{
 8002400:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002402:	4604      	mov	r4, r0
 8002404:	b1a0      	cbz	r0, 8002430 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002406:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800240a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800240e:	b91b      	cbnz	r3, 8002418 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002410:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002414:	f7ff fe42 	bl	800209c <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002418:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800241a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800241c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002420:	1d21      	adds	r1, r4, #4
 8002422:	f7ff ff9b 	bl	800235c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002426:	2301      	movs	r3, #1
  return HAL_OK;
 8002428:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800242a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800242e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002430:	2001      	movs	r0, #1
}
 8002432:	bd10      	pop	{r4, pc}

08002434 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002434:	6a03      	ldr	r3, [r0, #32]
{
 8002436:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002438:	f023 0310 	bic.w	r3, r3, #16
 800243c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800243e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002440:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002442:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002444:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002446:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800244a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800244e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002450:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002454:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002458:	4d0b      	ldr	r5, [pc, #44]	; (8002488 <TIM_OC2_SetConfig+0x54>)
 800245a:	42a8      	cmp	r0, r5
 800245c:	d10d      	bne.n	800247a <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800245e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002460:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002464:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002468:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800246a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800246c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002470:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002472:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002476:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800247a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800247c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800247e:	684a      	ldr	r2, [r1, #4]
 8002480:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002482:	6203      	str	r3, [r0, #32]
 8002484:	bd70      	pop	{r4, r5, r6, pc}
 8002486:	bf00      	nop
 8002488:	40012c00 	.word	0x40012c00

0800248c <HAL_TIM_PWM_ConfigChannel>:
{
 800248c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800248e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002492:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002494:	2b01      	cmp	r3, #1
 8002496:	f04f 0002 	mov.w	r0, #2
 800249a:	d025      	beq.n	80024e8 <HAL_TIM_PWM_ConfigChannel+0x5c>
 800249c:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800249e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80024a2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80024a6:	2a0c      	cmp	r2, #12
 80024a8:	d818      	bhi.n	80024dc <HAL_TIM_PWM_ConfigChannel+0x50>
 80024aa:	e8df f002 	tbb	[pc, r2]
 80024ae:	1707      	.short	0x1707
 80024b0:	171e1717 	.word	0x171e1717
 80024b4:	172f1717 	.word	0x172f1717
 80024b8:	1717      	.short	0x1717
 80024ba:	40          	.byte	0x40
 80024bb:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024bc:	6820      	ldr	r0, [r4, #0]
 80024be:	f7ff fd51 	bl	8001f64 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024c2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024c4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024c6:	699a      	ldr	r2, [r3, #24]
 80024c8:	f042 0208 	orr.w	r2, r2, #8
 80024cc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80024ce:	699a      	ldr	r2, [r3, #24]
 80024d0:	f022 0204 	bic.w	r2, r2, #4
 80024d4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024d6:	699a      	ldr	r2, [r3, #24]
 80024d8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80024da:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80024dc:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80024de:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80024e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80024e4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80024e8:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024ea:	6820      	ldr	r0, [r4, #0]
 80024ec:	f7ff ffa2 	bl	8002434 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024f0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80024f2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024f4:	699a      	ldr	r2, [r3, #24]
 80024f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024fc:	699a      	ldr	r2, [r3, #24]
 80024fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002502:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002504:	699a      	ldr	r2, [r3, #24]
 8002506:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800250a:	e7e6      	b.n	80024da <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800250c:	6820      	ldr	r0, [r4, #0]
 800250e:	f7ff fd51 	bl	8001fb4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002512:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002514:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002516:	69da      	ldr	r2, [r3, #28]
 8002518:	f042 0208 	orr.w	r2, r2, #8
 800251c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800251e:	69da      	ldr	r2, [r3, #28]
 8002520:	f022 0204 	bic.w	r2, r2, #4
 8002524:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002526:	69da      	ldr	r2, [r3, #28]
 8002528:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800252a:	61da      	str	r2, [r3, #28]
    break;
 800252c:	e7d6      	b.n	80024dc <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800252e:	6820      	ldr	r0, [r4, #0]
 8002530:	f7ff fd6a 	bl	8002008 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002534:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002536:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002538:	69da      	ldr	r2, [r3, #28]
 800253a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800253e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002540:	69da      	ldr	r2, [r3, #28]
 8002542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002546:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002548:	69da      	ldr	r2, [r3, #28]
 800254a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800254e:	e7ec      	b.n	800252a <HAL_TIM_PWM_ConfigChannel+0x9e>

08002550 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002550:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002554:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8002556:	2b01      	cmp	r3, #1
 8002558:	f04f 0302 	mov.w	r3, #2
 800255c:	d018      	beq.n	8002590 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 800255e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002562:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002564:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002566:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002568:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800256a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800256e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	4322      	orrs	r2, r4
 8002574:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800257c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	430a      	orrs	r2, r1
 8002582:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002584:	2301      	movs	r3, #1
 8002586:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800258a:	2300      	movs	r3, #0
 800258c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002590:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002592:	bd10      	pop	{r4, pc}

08002594 <HAL_TIMEx_CommutationCallback>:
 8002594:	4770      	bx	lr

08002596 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002596:	4770      	bx	lr

08002598 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800259c:	6805      	ldr	r5, [r0, #0]
 800259e:	68c2      	ldr	r2, [r0, #12]
 80025a0:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025a2:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025a8:	4313      	orrs	r3, r2
 80025aa:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025ac:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 80025ae:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025b0:	430b      	orrs	r3, r1
 80025b2:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 80025b4:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80025b8:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025bc:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80025be:	4313      	orrs	r3, r2
 80025c0:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025c2:	696b      	ldr	r3, [r5, #20]
 80025c4:	6982      	ldr	r2, [r0, #24]
 80025c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025ca:	4313      	orrs	r3, r2
 80025cc:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80025ce:	4b40      	ldr	r3, [pc, #256]	; (80026d0 <UART_SetConfig+0x138>)
{
 80025d0:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 80025d2:	429d      	cmp	r5, r3
 80025d4:	f04f 0419 	mov.w	r4, #25
 80025d8:	d146      	bne.n	8002668 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80025da:	f7ff fcb3 	bl	8001f44 <HAL_RCC_GetPCLK2Freq>
 80025de:	fb04 f300 	mul.w	r3, r4, r0
 80025e2:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80025e6:	f04f 0864 	mov.w	r8, #100	; 0x64
 80025ea:	00b6      	lsls	r6, r6, #2
 80025ec:	fbb3 f3f6 	udiv	r3, r3, r6
 80025f0:	fbb3 f3f8 	udiv	r3, r3, r8
 80025f4:	011e      	lsls	r6, r3, #4
 80025f6:	f7ff fca5 	bl	8001f44 <HAL_RCC_GetPCLK2Freq>
 80025fa:	4360      	muls	r0, r4
 80025fc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	fbb0 f7f3 	udiv	r7, r0, r3
 8002606:	f7ff fc9d 	bl	8001f44 <HAL_RCC_GetPCLK2Freq>
 800260a:	4360      	muls	r0, r4
 800260c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	fbb0 f3f3 	udiv	r3, r0, r3
 8002616:	fbb3 f3f8 	udiv	r3, r3, r8
 800261a:	fb08 7313 	mls	r3, r8, r3, r7
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	3332      	adds	r3, #50	; 0x32
 8002622:	fbb3 f3f8 	udiv	r3, r3, r8
 8002626:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800262a:	f7ff fc8b 	bl	8001f44 <HAL_RCC_GetPCLK2Freq>
 800262e:	4360      	muls	r0, r4
 8002630:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002634:	0092      	lsls	r2, r2, #2
 8002636:	fbb0 faf2 	udiv	sl, r0, r2
 800263a:	f7ff fc83 	bl	8001f44 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800263e:	4360      	muls	r0, r4
 8002640:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	fbb0 f3f3 	udiv	r3, r0, r3
 800264a:	fbb3 f3f8 	udiv	r3, r3, r8
 800264e:	fb08 a313 	mls	r3, r8, r3, sl
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	3332      	adds	r3, #50	; 0x32
 8002656:	fbb3 f3f8 	udiv	r3, r3, r8
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	433b      	orrs	r3, r7
 8002660:	4433      	add	r3, r6
 8002662:	60ab      	str	r3, [r5, #8]
 8002664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002668:	f7ff fc5c 	bl	8001f24 <HAL_RCC_GetPCLK1Freq>
 800266c:	fb04 f300 	mul.w	r3, r4, r0
 8002670:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002674:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002678:	00b6      	lsls	r6, r6, #2
 800267a:	fbb3 f3f6 	udiv	r3, r3, r6
 800267e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002682:	011e      	lsls	r6, r3, #4
 8002684:	f7ff fc4e 	bl	8001f24 <HAL_RCC_GetPCLK1Freq>
 8002688:	4360      	muls	r0, r4
 800268a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	fbb0 f7f3 	udiv	r7, r0, r3
 8002694:	f7ff fc46 	bl	8001f24 <HAL_RCC_GetPCLK1Freq>
 8002698:	4360      	muls	r0, r4
 800269a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80026a4:	fbb3 f3f8 	udiv	r3, r3, r8
 80026a8:	fb08 7313 	mls	r3, r8, r3, r7
 80026ac:	011b      	lsls	r3, r3, #4
 80026ae:	3332      	adds	r3, #50	; 0x32
 80026b0:	fbb3 f3f8 	udiv	r3, r3, r8
 80026b4:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80026b8:	f7ff fc34 	bl	8001f24 <HAL_RCC_GetPCLK1Freq>
 80026bc:	4360      	muls	r0, r4
 80026be:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80026c2:	0092      	lsls	r2, r2, #2
 80026c4:	fbb0 faf2 	udiv	sl, r0, r2
 80026c8:	f7ff fc2c 	bl	8001f24 <HAL_RCC_GetPCLK1Freq>
 80026cc:	e7b7      	b.n	800263e <UART_SetConfig+0xa6>
 80026ce:	bf00      	nop
 80026d0:	40013800 	.word	0x40013800

080026d4 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80026d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026d6:	4604      	mov	r4, r0
 80026d8:	460e      	mov	r6, r1
 80026da:	4617      	mov	r7, r2
 80026dc:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80026de:	6821      	ldr	r1, [r4, #0]
 80026e0:	680b      	ldr	r3, [r1, #0]
 80026e2:	ea36 0303 	bics.w	r3, r6, r3
 80026e6:	d101      	bne.n	80026ec <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80026e8:	2000      	movs	r0, #0
}
 80026ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 80026ec:	1c6b      	adds	r3, r5, #1
 80026ee:	d0f7      	beq.n	80026e0 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80026f0:	b995      	cbnz	r5, 8002718 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026f2:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80026f4:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80026fc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026fe:	695a      	ldr	r2, [r3, #20]
 8002700:	f022 0201 	bic.w	r2, r2, #1
 8002704:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002706:	2320      	movs	r3, #32
 8002708:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800270c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002710:	2300      	movs	r3, #0
 8002712:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002718:	f7fe fc3c 	bl	8000f94 <HAL_GetTick>
 800271c:	1bc0      	subs	r0, r0, r7
 800271e:	4285      	cmp	r5, r0
 8002720:	d2dd      	bcs.n	80026de <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8002722:	e7e6      	b.n	80026f2 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08002724 <HAL_UART_Init>:
{
 8002724:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002726:	4604      	mov	r4, r0
 8002728:	b340      	cbz	r0, 800277c <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800272a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800272e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002732:	b91b      	cbnz	r3, 800273c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002734:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002738:	f001 faca 	bl	8003cd0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800273c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800273e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002740:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002744:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002746:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002748:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800274c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800274e:	f7ff ff23 	bl	8002598 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002752:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002754:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002756:	691a      	ldr	r2, [r3, #16]
 8002758:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800275c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800275e:	695a      	ldr	r2, [r3, #20]
 8002760:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002764:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800276c:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 800276e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002770:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002772:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002776:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800277a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800277c:	2001      	movs	r0, #1
}
 800277e:	bd10      	pop	{r4, pc}

08002780 <HAL_UART_Transmit>:
{
 8002780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002784:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8002786:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 800278a:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 800278c:	2b20      	cmp	r3, #32
{
 800278e:	460d      	mov	r5, r1
 8002790:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8002792:	d14e      	bne.n	8002832 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8002794:	2900      	cmp	r1, #0
 8002796:	d049      	beq.n	800282c <HAL_UART_Transmit+0xac>
 8002798:	2a00      	cmp	r2, #0
 800279a:	d047      	beq.n	800282c <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 800279c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d046      	beq.n	8002832 <HAL_UART_Transmit+0xb2>
 80027a4:	2301      	movs	r3, #1
 80027a6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027aa:	2300      	movs	r3, #0
 80027ac:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027ae:	2321      	movs	r3, #33	; 0x21
 80027b0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80027b4:	f7fe fbee 	bl	8000f94 <HAL_GetTick>
 80027b8:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80027ba:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80027be:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80027c2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	b96b      	cbnz	r3, 80027e4 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027c8:	463b      	mov	r3, r7
 80027ca:	4632      	mov	r2, r6
 80027cc:	2140      	movs	r1, #64	; 0x40
 80027ce:	4620      	mov	r0, r4
 80027d0:	f7ff ff80 	bl	80026d4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80027d4:	b9a8      	cbnz	r0, 8002802 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80027d6:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80027d8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 80027dc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80027e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80027e4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027e6:	4632      	mov	r2, r6
      huart->TxXferCount--;
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80027ee:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027f0:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80027f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027f6:	4620      	mov	r0, r4
 80027f8:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80027fa:	d10e      	bne.n	800281a <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027fc:	f7ff ff6a 	bl	80026d4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002800:	b110      	cbz	r0, 8002808 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8002802:	2003      	movs	r0, #3
 8002804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002808:	882b      	ldrh	r3, [r5, #0]
 800280a:	6822      	ldr	r2, [r4, #0]
 800280c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002810:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002812:	6923      	ldr	r3, [r4, #16]
 8002814:	b943      	cbnz	r3, 8002828 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8002816:	3502      	adds	r5, #2
 8002818:	e7d3      	b.n	80027c2 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800281a:	f7ff ff5b 	bl	80026d4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800281e:	2800      	cmp	r0, #0
 8002820:	d1ef      	bne.n	8002802 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002822:	6823      	ldr	r3, [r4, #0]
 8002824:	782a      	ldrb	r2, [r5, #0]
 8002826:	605a      	str	r2, [r3, #4]
 8002828:	3501      	adds	r5, #1
 800282a:	e7ca      	b.n	80027c2 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800282c:	2001      	movs	r0, #1
 800282e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8002832:	2002      	movs	r0, #2
}
 8002834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002838 <HAL_TIM_PeriodElapsedCallback>:

#include "IRremote.h"


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002838:	b508      	push	{r3, lr}
	if(htim == &htim4)
 800283a:	4b27      	ldr	r3, [pc, #156]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800283c:	4283      	cmp	r3, r0
 800283e:	d145      	bne.n	80028cc <HAL_TIM_PeriodElapsedCallback+0x94>
	{
		uint8_t irdata = RECIV_PIN; // пин для приёма
 8002840:	2120      	movs	r1, #32
 8002842:	4826      	ldr	r0, [pc, #152]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002844:	f7fe fd14 	bl	8001270 <HAL_GPIO_ReadPin>

		irparams.timer++;  // One more 50uS tick
 8002848:	4b25      	ldr	r3, [pc, #148]	; (80028e0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800284a:	885a      	ldrh	r2, [r3, #2]
 800284c:	3201      	adds	r2, #1
 800284e:	b292      	uxth	r2, r2
 8002850:	805a      	strh	r2, [r3, #2]
		if(irparams.rawlen >= RAWBUF) irparams.rcvstate = STATE_OVERFLOW ;  // Buffer overflow
 8002852:	785a      	ldrb	r2, [r3, #1]

		switch(irparams.rcvstate)
 8002854:	781a      	ldrb	r2, [r3, #0]
 8002856:	3a02      	subs	r2, #2
 8002858:	2a04      	cmp	r2, #4
 800285a:	d837      	bhi.n	80028cc <HAL_TIM_PeriodElapsedCallback+0x94>
 800285c:	e8df f002 	tbb	[pc, r2]
 8002860:	342c1b03 	.word	0x342c1b03
 8002864:	37          	.byte	0x37
 8002865:	00          	.byte	0x00
		{
			case STATE_IDLE: // In the middle of a gap
				if(irdata == MARK)
 8002866:	2800      	cmp	r0, #0
 8002868:	d130      	bne.n	80028cc <HAL_TIM_PeriodElapsedCallback+0x94>
				{
					if(irparams.timer < GAP_TICKS)  // Not big enough to be a gap.
 800286a:	885a      	ldrh	r2, [r3, #2]
 800286c:	b292      	uxth	r2, r2
 800286e:	2a63      	cmp	r2, #99	; 0x63
 8002870:	d801      	bhi.n	8002876 <HAL_TIM_PeriodElapsedCallback+0x3e>
				}

			break;

			case STATE_STOP:  // Waiting; Measuring Gap
			 	if(irdata == MARK) irparams.timer = 0 ;  // Reset gap timer
 8002872:	8058      	strh	r0, [r3, #2]
 8002874:	bd08      	pop	{r3, pc}
						irparams.overflow = false;
 8002876:	f883 0204 	strb.w	r0, [r3, #516]	; 0x204
						irparams.rawlen  = 0;
 800287a:	7058      	strb	r0, [r3, #1]
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 800287c:	785a      	ldrb	r2, [r3, #1]
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	1c51      	adds	r1, r2, #1
 8002882:	b2c9      	uxtb	r1, r1
 8002884:	7059      	strb	r1, [r3, #1]
 8002886:	8859      	ldrh	r1, [r3, #2]
 8002888:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800288c:	b289      	uxth	r1, r1
 800288e:	8091      	strh	r1, [r2, #4]
					irparams.timer = 0;
 8002890:	8058      	strh	r0, [r3, #2]
					irparams.rcvstate = STATE_MARK;
 8002892:	2203      	movs	r2, #3
 8002894:	e00e      	b.n	80028b4 <HAL_TIM_PeriodElapsedCallback+0x7c>
				if(irdata == SPACE) // Mark ended; Record time
 8002896:	2801      	cmp	r0, #1
 8002898:	d118      	bne.n	80028cc <HAL_TIM_PeriodElapsedCallback+0x94>
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 800289a:	785a      	ldrb	r2, [r3, #1]
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	1c51      	adds	r1, r2, #1
 80028a0:	b2c9      	uxtb	r1, r1
 80028a2:	7059      	strb	r1, [r3, #1]
 80028a4:	8859      	ldrh	r1, [r3, #2]
 80028a6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80028aa:	b289      	uxth	r1, r1
 80028ac:	8091      	strh	r1, [r2, #4]
					irparams.timer = 0;
 80028ae:	2200      	movs	r2, #0
 80028b0:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_SPACE;
 80028b2:	2204      	movs	r2, #4
			break;

			case STATE_OVERFLOW:  // Flag up a read overflow; Stop the State Machine
				irparams.overflow = true;
				irparams.rcvstate = STATE_STOP;
 80028b4:	701a      	strb	r2, [r3, #0]
			break;
		}
	}
}
 80028b6:	e009      	b.n	80028cc <HAL_TIM_PeriodElapsedCallback+0x94>
				if(irdata == MARK) // Space just ended; Record time
 80028b8:	2800      	cmp	r0, #0
 80028ba:	d0df      	beq.n	800287c <HAL_TIM_PeriodElapsedCallback+0x44>
				else if(irparams.timer > GAP_TICKS) // Space
 80028bc:	885a      	ldrh	r2, [r3, #2]
 80028be:	b292      	uxth	r2, r2
 80028c0:	2a64      	cmp	r2, #100	; 0x64
 80028c2:	d903      	bls.n	80028cc <HAL_TIM_PeriodElapsedCallback+0x94>
				irparams.rcvstate = STATE_STOP;
 80028c4:	2205      	movs	r2, #5
 80028c6:	e7f5      	b.n	80028b4 <HAL_TIM_PeriodElapsedCallback+0x7c>
			 	if(irdata == MARK) irparams.timer = 0 ;  // Reset gap timer
 80028c8:	2800      	cmp	r0, #0
 80028ca:	d0d2      	beq.n	8002872 <HAL_TIM_PeriodElapsedCallback+0x3a>
 80028cc:	bd08      	pop	{r3, pc}
				irparams.overflow = true;
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 80028d4:	e7f6      	b.n	80028c4 <HAL_TIM_PeriodElapsedCallback+0x8c>
 80028d6:	bf00      	nop
 80028d8:	200002d0 	.word	0x200002d0
 80028dc:	40010c00 	.word	0x40010c00
 80028e0:	2000009c 	.word	0x2000009c

080028e4 <MATCH>:

////////////////////////////////////////////////////////////////////////////////////////////
int MATCH(int measured, int desired)
{
 80028e4:	b5d0      	push	{r4, r6, r7, lr}
 80028e6:	4604      	mov	r4, r0
 	return ((measured >= TICKS_LOW(desired)) && (measured <= TICKS_HIGH(desired)));
 80028e8:	4608      	mov	r0, r1
 80028ea:	f7fd fd8b 	bl	8000404 <__aeabi_i2d>
 80028ee:	2200      	movs	r2, #0
 80028f0:	4b11      	ldr	r3, [pc, #68]	; (8002938 <MATCH+0x54>)
 80028f2:	4606      	mov	r6, r0
 80028f4:	460f      	mov	r7, r1
 80028f6:	f7fd fdeb 	bl	80004d0 <__aeabi_dmul>
 80028fa:	2200      	movs	r2, #0
 80028fc:	4b0f      	ldr	r3, [pc, #60]	; (800293c <MATCH+0x58>)
 80028fe:	f7fd ff11 	bl	8000724 <__aeabi_ddiv>
 8002902:	f7fe f87f 	bl	8000a04 <__aeabi_d2iz>
 8002906:	42a0      	cmp	r0, r4
 8002908:	dc14      	bgt.n	8002934 <MATCH+0x50>
 800290a:	2200      	movs	r2, #0
 800290c:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <MATCH+0x5c>)
 800290e:	4630      	mov	r0, r6
 8002910:	4639      	mov	r1, r7
 8002912:	f7fd fddd 	bl	80004d0 <__aeabi_dmul>
 8002916:	2200      	movs	r2, #0
 8002918:	4b08      	ldr	r3, [pc, #32]	; (800293c <MATCH+0x58>)
 800291a:	f7fd ff03 	bl	8000724 <__aeabi_ddiv>
 800291e:	2200      	movs	r2, #0
 8002920:	4b08      	ldr	r3, [pc, #32]	; (8002944 <MATCH+0x60>)
 8002922:	f7fd fc23 	bl	800016c <__adddf3>
 8002926:	f7fe f86d 	bl	8000a04 <__aeabi_d2iz>
 800292a:	4284      	cmp	r4, r0
 800292c:	bfcc      	ite	gt
 800292e:	2000      	movgt	r0, #0
 8002930:	2001      	movle	r0, #1
 8002932:	bdd0      	pop	{r4, r6, r7, pc}
 8002934:	2000      	movs	r0, #0
}
 8002936:	bdd0      	pop	{r4, r6, r7, pc}
 8002938:	3fe80000 	.word	0x3fe80000
 800293c:	40490000 	.word	0x40490000
 8002940:	3ff40000 	.word	0x3ff40000
 8002944:	3ff00000 	.word	0x3ff00000

08002948 <MATCH_MARK>:

int MATCH_MARK(int measured_ticks, int desired_us)
{
 8002948:	b5d0      	push	{r4, r6, r7, lr}
 800294a:	4604      	mov	r4, r0
	return ((measured_ticks >= TICKS_LOW(desired_us + MARK_EXCESS)) && (measured_ticks <= TICKS_HIGH(desired_us + MARK_EXCESS)));
 800294c:	f101 0064 	add.w	r0, r1, #100	; 0x64
 8002950:	f7fd fd58 	bl	8000404 <__aeabi_i2d>
 8002954:	2200      	movs	r2, #0
 8002956:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <MATCH_MARK+0x58>)
 8002958:	4606      	mov	r6, r0
 800295a:	460f      	mov	r7, r1
 800295c:	f7fd fdb8 	bl	80004d0 <__aeabi_dmul>
 8002960:	2200      	movs	r2, #0
 8002962:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <MATCH_MARK+0x5c>)
 8002964:	f7fd fede 	bl	8000724 <__aeabi_ddiv>
 8002968:	f7fe f84c 	bl	8000a04 <__aeabi_d2iz>
 800296c:	42a0      	cmp	r0, r4
 800296e:	dc14      	bgt.n	800299a <MATCH_MARK+0x52>
 8002970:	2200      	movs	r2, #0
 8002972:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <MATCH_MARK+0x60>)
 8002974:	4630      	mov	r0, r6
 8002976:	4639      	mov	r1, r7
 8002978:	f7fd fdaa 	bl	80004d0 <__aeabi_dmul>
 800297c:	2200      	movs	r2, #0
 800297e:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <MATCH_MARK+0x5c>)
 8002980:	f7fd fed0 	bl	8000724 <__aeabi_ddiv>
 8002984:	2200      	movs	r2, #0
 8002986:	4b09      	ldr	r3, [pc, #36]	; (80029ac <MATCH_MARK+0x64>)
 8002988:	f7fd fbf0 	bl	800016c <__adddf3>
 800298c:	f7fe f83a 	bl	8000a04 <__aeabi_d2iz>
 8002990:	4284      	cmp	r4, r0
 8002992:	bfcc      	ite	gt
 8002994:	2000      	movgt	r0, #0
 8002996:	2001      	movle	r0, #1
 8002998:	bdd0      	pop	{r4, r6, r7, pc}
 800299a:	2000      	movs	r0, #0
}
 800299c:	bdd0      	pop	{r4, r6, r7, pc}
 800299e:	bf00      	nop
 80029a0:	3fe80000 	.word	0x3fe80000
 80029a4:	40490000 	.word	0x40490000
 80029a8:	3ff40000 	.word	0x3ff40000
 80029ac:	3ff00000 	.word	0x3ff00000

080029b0 <MATCH_SPACE>:

int MATCH_SPACE(int measured_ticks, int desired_us)
{
 80029b0:	b5d0      	push	{r4, r6, r7, lr}
 80029b2:	4604      	mov	r4, r0
	return ((measured_ticks >= TICKS_LOW(desired_us - MARK_EXCESS)) && (measured_ticks <= TICKS_HIGH(desired_us - MARK_EXCESS)));
 80029b4:	f1a1 0064 	sub.w	r0, r1, #100	; 0x64
 80029b8:	f7fd fd24 	bl	8000404 <__aeabi_i2d>
 80029bc:	2200      	movs	r2, #0
 80029be:	4b12      	ldr	r3, [pc, #72]	; (8002a08 <MATCH_SPACE+0x58>)
 80029c0:	4606      	mov	r6, r0
 80029c2:	460f      	mov	r7, r1
 80029c4:	f7fd fd84 	bl	80004d0 <__aeabi_dmul>
 80029c8:	2200      	movs	r2, #0
 80029ca:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <MATCH_SPACE+0x5c>)
 80029cc:	f7fd feaa 	bl	8000724 <__aeabi_ddiv>
 80029d0:	f7fe f818 	bl	8000a04 <__aeabi_d2iz>
 80029d4:	42a0      	cmp	r0, r4
 80029d6:	dc14      	bgt.n	8002a02 <MATCH_SPACE+0x52>
 80029d8:	2200      	movs	r2, #0
 80029da:	4b0d      	ldr	r3, [pc, #52]	; (8002a10 <MATCH_SPACE+0x60>)
 80029dc:	4630      	mov	r0, r6
 80029de:	4639      	mov	r1, r7
 80029e0:	f7fd fd76 	bl	80004d0 <__aeabi_dmul>
 80029e4:	2200      	movs	r2, #0
 80029e6:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <MATCH_SPACE+0x5c>)
 80029e8:	f7fd fe9c 	bl	8000724 <__aeabi_ddiv>
 80029ec:	2200      	movs	r2, #0
 80029ee:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <MATCH_SPACE+0x64>)
 80029f0:	f7fd fbbc 	bl	800016c <__adddf3>
 80029f4:	f7fe f806 	bl	8000a04 <__aeabi_d2iz>
 80029f8:	4284      	cmp	r4, r0
 80029fa:	bfcc      	ite	gt
 80029fc:	2000      	movgt	r0, #0
 80029fe:	2001      	movle	r0, #1
 8002a00:	bdd0      	pop	{r4, r6, r7, pc}
 8002a02:	2000      	movs	r0, #0
}
 8002a04:	bdd0      	pop	{r4, r6, r7, pc}
 8002a06:	bf00      	nop
 8002a08:	3fe80000 	.word	0x3fe80000
 8002a0c:	40490000 	.word	0x40490000
 8002a10:	3ff40000 	.word	0x3ff40000
 8002a14:	3ff00000 	.word	0x3ff00000

08002a18 <my_enableIRIn>:
	my_resume();
	return false;
}

void my_enableIRIn() // initialization
{
 8002a18:	b530      	push	{r4, r5, lr}
	DWT_Init(); // старт счётчика микросекунд

	HAL_TIM_Base_DeInit(&htim4);
 8002a1a:	4c18      	ldr	r4, [pc, #96]	; (8002a7c <my_enableIRIn+0x64>)
{
 8002a1c:	b087      	sub	sp, #28
	DWT_Init(); // старт счётчика микросекунд
 8002a1e:	f000 f8f5 	bl	8002c0c <DWT_Init>
	HAL_TIM_Base_DeInit(&htim4);
 8002a22:	4620      	mov	r0, r4
 8002a24:	f7ff fb12 	bl	800204c <HAL_TIM_Base_DeInit>

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a28:	2100      	movs	r1, #0
 8002a2a:	2210      	movs	r2, #16
 8002a2c:	a802      	add	r0, sp, #8
 8002a2e:	f001 fa2b 	bl	8003e88 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};

	htim4.Instance = TIM4;
	htim4.Init.Prescaler = MYPRESCALER;
 8002a32:	2347      	movs	r3, #71	; 0x47
 8002a34:	4a12      	ldr	r2, [pc, #72]	; (8002a80 <my_enableIRIn+0x68>)
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a36:	2500      	movs	r5, #0
	htim4.Init.Prescaler = MYPRESCALER;
 8002a38:	e884 000c 	stmia.w	r4, {r2, r3}
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim4.Init.Period = MYPERIOD;
 8002a3c:	2331      	movs	r3, #49	; 0x31
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	HAL_TIM_Base_Init(&htim4);
 8002a3e:	4620      	mov	r0, r4
	htim4.Init.Period = MYPERIOD;
 8002a40:	60e3      	str	r3, [r4, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a42:	9500      	str	r5, [sp, #0]
 8002a44:	9501      	str	r5, [sp, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a46:	60a5      	str	r5, [r4, #8]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a48:	6125      	str	r5, [r4, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a4a:	61a5      	str	r5, [r4, #24]
	HAL_TIM_Base_Init(&htim4);
 8002a4c:	f7ff fcbe 	bl	80023cc <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 8002a54:	a902      	add	r1, sp, #8
 8002a56:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a58:	9302      	str	r3, [sp, #8]
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 8002a5a:	f7ff fb20 	bl	800209e <HAL_TIM_ConfigClockSource>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 8002a5e:	4669      	mov	r1, sp
 8002a60:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a62:	9500      	str	r5, [sp, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a64:	9501      	str	r5, [sp, #4]
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 8002a66:	f7ff fd73 	bl	8002550 <HAL_TIMEx_MasterConfigSynchronization>

	irparams.rcvstate = STATE_IDLE;
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <my_enableIRIn+0x6c>)
	irparams.rawlen = 0;

	HAL_TIM_Base_Start_IT(&htim4);
 8002a6e:	4620      	mov	r0, r4
	irparams.rcvstate = STATE_IDLE;
 8002a70:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 8002a72:	705d      	strb	r5, [r3, #1]
	HAL_TIM_Base_Start_IT(&htim4);
 8002a74:	f7ff fb07 	bl	8002086 <HAL_TIM_Base_Start_IT>
}
 8002a78:	b007      	add	sp, #28
 8002a7a:	bd30      	pop	{r4, r5, pc}
 8002a7c:	200002d0 	.word	0x200002d0
 8002a80:	40000800 	.word	0x40000800
 8002a84:	2000009c 	.word	0x2000009c

08002a88 <my_resume>:
	return (irparams.rcvstate == STATE_IDLE || irparams.rcvstate == STATE_STOP) ? true : false;
}

void my_resume() // Restart the ISR state machine
{
	irparams.rcvstate = STATE_IDLE;
 8002a88:	2202      	movs	r2, #2
 8002a8a:	4b02      	ldr	r3, [pc, #8]	; (8002a94 <my_resume+0xc>)
 8002a8c:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 8002a8e:	2200      	movs	r2, #0
 8002a90:	705a      	strb	r2, [r3, #1]
 8002a92:	4770      	bx	lr
 8002a94:	2000009c 	.word	0x2000009c

08002a98 <compare>:
}

int compare(unsigned int oldval, unsigned int newval)
{
 8002a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a9a:	4606      	mov	r6, r0
	if(newval < oldval * .8) return 0;
 8002a9c:	4608      	mov	r0, r1
 8002a9e:	f7fd fca1 	bl	80003e4 <__aeabi_ui2d>
 8002aa2:	4604      	mov	r4, r0
 8002aa4:	4630      	mov	r0, r6
 8002aa6:	460d      	mov	r5, r1
 8002aa8:	f7fd fc9c 	bl	80003e4 <__aeabi_ui2d>
 8002aac:	a310      	add	r3, pc, #64	; (adr r3, 8002af0 <compare+0x58>)
 8002aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab2:	4606      	mov	r6, r0
 8002ab4:	460f      	mov	r7, r1
 8002ab6:	f7fd fd0b 	bl	80004d0 <__aeabi_dmul>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	4620      	mov	r0, r4
 8002ac0:	4629      	mov	r1, r5
 8002ac2:	f7fd ff77 	bl	80009b4 <__aeabi_dcmplt>
 8002ac6:	b988      	cbnz	r0, 8002aec <compare+0x54>
	else if(oldval < newval * .8) return 2;
 8002ac8:	a309      	add	r3, pc, #36	; (adr r3, 8002af0 <compare+0x58>)
 8002aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ace:	4620      	mov	r0, r4
 8002ad0:	4629      	mov	r1, r5
 8002ad2:	f7fd fcfd 	bl	80004d0 <__aeabi_dmul>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4630      	mov	r0, r6
 8002adc:	4639      	mov	r1, r7
 8002ade:	f7fd ff69 	bl	80009b4 <__aeabi_dcmplt>
 8002ae2:	2800      	cmp	r0, #0
	else return 1;
 8002ae4:	bf14      	ite	ne
 8002ae6:	2002      	movne	r0, #2
 8002ae8:	2001      	moveq	r0, #1
 8002aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(newval < oldval * .8) return 0;
 8002aec:	2000      	movs	r0, #0
}
 8002aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002af0:	9999999a 	.word	0x9999999a
 8002af4:	3fe99999 	.word	0x3fe99999

08002af8 <decodeHash>:

#define FNV_PRIME_32 16777619
#define FNV_BASIS_32 2166136261

int32_t decodeHash(decode_results *results)
{
 8002af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int32_t hash = FNV_BASIS_32;

	// Require at least 6 samples to prevent triggering on noise
	if(results->rawlen < 6) return false;
 8002afc:	f9b0 7010 	ldrsh.w	r7, [r0, #16]
{
 8002b00:	4606      	mov	r6, r0
	if(results->rawlen < 6) return false;
 8002b02:	2f05      	cmp	r7, #5
 8002b04:	dd1f      	ble.n	8002b46 <decodeHash+0x4e>
 8002b06:	2401      	movs	r4, #1
 8002b08:	4d10      	ldr	r5, [pc, #64]	; (8002b4c <decodeHash+0x54>)

	for(int16_t i = 1; (i + 2) < results->rawlen; i++)
	{
		int16_t value = compare(results->rawbuf[i], results->rawbuf[i+2]);
		hash = (hash * FNV_PRIME_32) ^ value; // Add value into the hash
 8002b0a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8002b50 <decodeHash+0x58>
	for(int16_t i = 1; (i + 2) < results->rawlen; i++)
 8002b0e:	1ca3      	adds	r3, r4, #2
 8002b10:	42bb      	cmp	r3, r7
 8002b12:	db07      	blt.n	8002b24 <decodeHash+0x2c>
	}

	results->value = hash;
	results->bits = 32;
 8002b14:	2320      	movs	r3, #32
 8002b16:	8133      	strh	r3, [r6, #8]
	results->decode_type = UNKNOWN;
 8002b18:	2300      	movs	r3, #0
	results->value = hash;
 8002b1a:	6075      	str	r5, [r6, #4]
	results->decode_type = UNKNOWN;
 8002b1c:	7033      	strb	r3, [r6, #0]
	return true;
 8002b1e:	2001      	movs	r0, #1
 8002b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int16_t value = compare(results->rawbuf[i], results->rawbuf[i+2]);
 8002b24:	68f2      	ldr	r2, [r6, #12]
 8002b26:	0063      	lsls	r3, r4, #1
 8002b28:	3304      	adds	r3, #4
 8002b2a:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 8002b2e:	5ad1      	ldrh	r1, [r2, r3]
 8002b30:	b280      	uxth	r0, r0
 8002b32:	b289      	uxth	r1, r1
 8002b34:	f7ff ffb0 	bl	8002a98 <compare>
		hash = (hash * FNV_PRIME_32) ^ value; // Add value into the hash
 8002b38:	fb08 f505 	mul.w	r5, r8, r5
 8002b3c:	b200      	sxth	r0, r0
 8002b3e:	3401      	adds	r4, #1
 8002b40:	4045      	eors	r5, r0
 8002b42:	b224      	sxth	r4, r4
 8002b44:	e7e3      	b.n	8002b0e <decodeHash+0x16>
	if(results->rawlen < 6) return false;
 8002b46:	2000      	movs	r0, #0
}
 8002b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b4c:	811c9dc5 	.word	0x811c9dc5
 8002b50:	01000193 	.word	0x01000193

08002b54 <my_decode>:
{
 8002b54:	b510      	push	{r4, lr}
	results->rawbuf = irparams.rawbuf;
 8002b56:	4b2c      	ldr	r3, [pc, #176]	; (8002c08 <my_decode+0xb4>)
{
 8002b58:	4604      	mov	r4, r0
	results->rawlen = irparams.rawlen;
 8002b5a:	f813 1c03 	ldrb.w	r1, [r3, #-3]
	results->rawbuf = irparams.rawbuf;
 8002b5e:	60c3      	str	r3, [r0, #12]
	results->rawlen = irparams.rawlen;
 8002b60:	8201      	strh	r1, [r0, #16]
	results->overflow = irparams.overflow;
 8002b62:	f893 2200 	ldrb.w	r2, [r3, #512]	; 0x200
	if(irparams.rcvstate != STATE_STOP) return false;
 8002b66:	f813 3c04 	ldrb.w	r3, [r3, #-4]
	results->overflow = irparams.overflow;
 8002b6a:	8242      	strh	r2, [r0, #18]
	if(irparams.rcvstate != STATE_STOP) return false;
 8002b6c:	2b05      	cmp	r3, #5
 8002b6e:	d148      	bne.n	8002c02 <my_decode+0xae>
		if(decodeNEC(results)) return true;
 8002b70:	f000 fa1c 	bl	8002fac <decodeNEC>
 8002b74:	b108      	cbz	r0, 8002b7a <my_decode+0x26>
 8002b76:	2001      	movs	r0, #1
 8002b78:	bd10      	pop	{r4, pc}
		if(decodeSony(results)) return true;
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	f000 fca2 	bl	80034c4 <decodeSony>
 8002b80:	2800      	cmp	r0, #0
 8002b82:	d1f8      	bne.n	8002b76 <my_decode+0x22>
		if(decodeSanyo(results)) return true;
 8002b84:	4620      	mov	r0, r4
 8002b86:	f000 fc33 	bl	80033f0 <decodeSanyo>
 8002b8a:	2800      	cmp	r0, #0
 8002b8c:	d1f3      	bne.n	8002b76 <my_decode+0x22>
		if(decodeMitsubishi(results)) return true;
 8002b8e:	4620      	mov	r0, r4
 8002b90:	f000 f9b6 	bl	8002f00 <decodeMitsubishi>
 8002b94:	2800      	cmp	r0, #0
 8002b96:	d1ee      	bne.n	8002b76 <my_decode+0x22>
		if(decodeRC5(results)) return true;
 8002b98:	4620      	mov	r0, r4
 8002b9a:	f000 faf7 	bl	800318c <decodeRC5>
 8002b9e:	2800      	cmp	r0, #0
 8002ba0:	d1e9      	bne.n	8002b76 <my_decode+0x22>
		if(decodeRC6(results)) return true;
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	f000 fb48 	bl	8003238 <decodeRC6>
 8002ba8:	2800      	cmp	r0, #0
 8002baa:	d1e4      	bne.n	8002b76 <my_decode+0x22>
		if(decodePanasonic(results)) return true;
 8002bac:	4620      	mov	r0, r4
 8002bae:	f000 fa5d 	bl	800306c <decodePanasonic>
 8002bb2:	2800      	cmp	r0, #0
 8002bb4:	d1df      	bne.n	8002b76 <my_decode+0x22>
		if(decodeLG(results)) return true;
 8002bb6:	4620      	mov	r0, r4
 8002bb8:	f000 f94e 	bl	8002e58 <decodeLG>
 8002bbc:	2800      	cmp	r0, #0
 8002bbe:	d1da      	bne.n	8002b76 <my_decode+0x22>
		if(decodeJVC(results)) return true;
 8002bc0:	4620      	mov	r0, r4
 8002bc2:	f000 f8d7 	bl	8002d74 <decodeJVC>
 8002bc6:	2800      	cmp	r0, #0
 8002bc8:	d1d5      	bne.n	8002b76 <my_decode+0x22>
		if(decodeSAMSUNG(results)) return true;
 8002bca:	4620      	mov	r0, r4
 8002bcc:	f000 fbb0 	bl	8003330 <decodeSAMSUNG>
 8002bd0:	2800      	cmp	r0, #0
 8002bd2:	d1d0      	bne.n	8002b76 <my_decode+0x22>
		if(decodeWhynter(results)) return true;
 8002bd4:	4620      	mov	r0, r4
 8002bd6:	f000 fcd7 	bl	8003588 <decodeWhynter>
 8002bda:	2800      	cmp	r0, #0
 8002bdc:	d1cb      	bne.n	8002b76 <my_decode+0x22>
		if(decodeAiwaRCT501(results)) return true;
 8002bde:	4620      	mov	r0, r4
 8002be0:	f000 f824 	bl	8002c2c <decodeAiwaRCT501>
 8002be4:	2800      	cmp	r0, #0
 8002be6:	d1c6      	bne.n	8002b76 <my_decode+0x22>
		if(decodeDenon(results)) return true;
 8002be8:	4620      	mov	r0, r4
 8002bea:	f000 f87b 	bl	8002ce4 <decodeDenon>
 8002bee:	2800      	cmp	r0, #0
 8002bf0:	d1c1      	bne.n	8002b76 <my_decode+0x22>
	if(decodeHash(results)) return true;
 8002bf2:	4620      	mov	r0, r4
 8002bf4:	f7ff ff80 	bl	8002af8 <decodeHash>
 8002bf8:	2800      	cmp	r0, #0
 8002bfa:	d1bc      	bne.n	8002b76 <my_decode+0x22>
	my_resume();
 8002bfc:	f7ff ff44 	bl	8002a88 <my_resume>
	return false;
 8002c00:	bd10      	pop	{r4, pc}
	if(irparams.rcvstate != STATE_STOP) return false;
 8002c02:	2000      	movs	r0, #0
}
 8002c04:	bd10      	pop	{r4, pc}
 8002c06:	bf00      	nop
 8002c08:	200000a0 	.word	0x200000a0

08002c0c <DWT_Init>:
#define SCB_DEMCR *(volatile unsigned long *)0xE000EDFC


void DWT_Init()
{
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8002c0c:	4a05      	ldr	r2, [pc, #20]	; (8002c24 <DWT_Init+0x18>)
 8002c0e:	6813      	ldr	r3, [r2, #0]
 8002c10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c14:	6013      	str	r3, [r2, #0]
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8002c16:	4a04      	ldr	r2, [pc, #16]	; (8002c28 <DWT_Init+0x1c>)
 8002c18:	6813      	ldr	r3, [r2, #0]
 8002c1a:	f043 0301 	orr.w	r3, r3, #1
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	e000edfc 	.word	0xe000edfc
 8002c28:	e0001000 	.word	0xe0001000

08002c2c <decodeAiwaRCT501>:
#endif

//+=============================================================================
#if DECODE_AIWA_RC_T501
uint8_t decodeAiwaRCT501(decode_results *results)
{
 8002c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int  data   = 0;
	int  offset = 1;

	// Check SIZE
	if (irparams.rawlen < 2 * (AIWA_RC_T501_SUM_BITS) + 4)  return false ;
 8002c30:	4b2b      	ldr	r3, [pc, #172]	; (8002ce0 <decodeAiwaRCT501+0xb4>)
{
 8002c32:	4604      	mov	r4, r0
	if (irparams.rawlen < 2 * (AIWA_RC_T501_SUM_BITS) + 4)  return false ;
 8002c34:	785a      	ldrb	r2, [r3, #1]
 8002c36:	4698      	mov	r8, r3
 8002c38:	2a57      	cmp	r2, #87	; 0x57
 8002c3a:	d802      	bhi.n	8002c42 <decodeAiwaRCT501+0x16>
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	// Check HDR Mark/Space
	if (!MATCH_MARK (results->rawbuf[offset++], AIWA_RC_T501_HDR_MARK ))  return false ;
 8002c42:	68c3      	ldr	r3, [r0, #12]
 8002c44:	f242 2160 	movw	r1, #8800	; 0x2260
 8002c48:	8858      	ldrh	r0, [r3, #2]
 8002c4a:	b280      	uxth	r0, r0
 8002c4c:	f7ff fe7c 	bl	8002948 <MATCH_MARK>
 8002c50:	2800      	cmp	r0, #0
 8002c52:	d0f3      	beq.n	8002c3c <decodeAiwaRCT501+0x10>
	if (!MATCH_SPACE(results->rawbuf[offset++], AIWA_RC_T501_HDR_SPACE))  return false ;
 8002c54:	68e3      	ldr	r3, [r4, #12]
 8002c56:	f241 1194 	movw	r1, #4500	; 0x1194
 8002c5a:	8898      	ldrh	r0, [r3, #4]
 8002c5c:	b280      	uxth	r0, r0
 8002c5e:	f7ff fea7 	bl	80029b0 <MATCH_SPACE>
 8002c62:	2800      	cmp	r0, #0
 8002c64:	d0ea      	beq.n	8002c3c <decodeAiwaRCT501+0x10>
 8002c66:	271d      	movs	r7, #29
 8002c68:	2500      	movs	r5, #0

	offset += 26;  // skip pre-data - optional
	while(offset < irparams.rawlen - 4) {
 8002c6a:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002c6e:	3b04      	subs	r3, #4
 8002c70:	429f      	cmp	r7, r3
 8002c72:	db0c      	blt.n	8002c8e <decodeAiwaRCT501+0x62>
 8002c74:	463e      	mov	r6, r7
		else if (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ZERO_SPACE))  data = (data << 1) | 0 ;
		else                                                                     break ;  // End of one & zero detected
		offset++;
	}

	results->bits = (offset - 1) / 2;
 8002c76:	3e01      	subs	r6, #1
 8002c78:	f346 064f 	sbfx	r6, r6, #1, #16
	if (results->bits < 42)  return false ;
 8002c7c:	2e29      	cmp	r6, #41	; 0x29
	results->bits = (offset - 1) / 2;
 8002c7e:	8126      	strh	r6, [r4, #8]
	if (results->bits < 42)  return false ;
 8002c80:	dddc      	ble.n	8002c3c <decodeAiwaRCT501+0x10>

	results->value       = data;
	results->decode_type = AIWA_RC_T501;
 8002c82:	2309      	movs	r3, #9
	results->value       = data;
 8002c84:	6065      	str	r5, [r4, #4]
	results->decode_type = AIWA_RC_T501;
 8002c86:	7023      	strb	r3, [r4, #0]
	return true;
 8002c88:	2001      	movs	r0, #1
}
 8002c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (MATCH_MARK(results->rawbuf[offset], AIWA_RC_T501_BIT_MARK))  offset++ ;
 8002c8e:	68e3      	ldr	r3, [r4, #12]
 8002c90:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002c94:	f833 0017 	ldrh.w	r0, [r3, r7, lsl #1]
 8002c98:	ea4f 0947 	mov.w	r9, r7, lsl #1
 8002c9c:	b280      	uxth	r0, r0
 8002c9e:	f7ff fe53 	bl	8002948 <MATCH_MARK>
 8002ca2:	2800      	cmp	r0, #0
 8002ca4:	d0ca      	beq.n	8002c3c <decodeAiwaRCT501+0x10>
		if      (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ONE_SPACE))   data = (data << 1) | 1 ;
 8002ca6:	68e3      	ldr	r3, [r4, #12]
 8002ca8:	f109 0902 	add.w	r9, r9, #2
 8002cac:	f833 0009 	ldrh.w	r0, [r3, r9]
 8002cb0:	f44f 7116 	mov.w	r1, #600	; 0x258
 8002cb4:	b280      	uxth	r0, r0
 8002cb6:	1c7e      	adds	r6, r7, #1
 8002cb8:	f7ff fe7a 	bl	80029b0 <MATCH_SPACE>
 8002cbc:	b120      	cbz	r0, 8002cc8 <decodeAiwaRCT501+0x9c>
 8002cbe:	006d      	lsls	r5, r5, #1
 8002cc0:	f045 0501 	orr.w	r5, r5, #1
		offset++;
 8002cc4:	3702      	adds	r7, #2
 8002cc6:	e7d0      	b.n	8002c6a <decodeAiwaRCT501+0x3e>
		else if (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ZERO_SPACE))  data = (data << 1) | 0 ;
 8002cc8:	68e3      	ldr	r3, [r4, #12]
 8002cca:	f240 61a4 	movw	r1, #1700	; 0x6a4
 8002cce:	f833 0009 	ldrh.w	r0, [r3, r9]
 8002cd2:	b280      	uxth	r0, r0
 8002cd4:	f7ff fe6c 	bl	80029b0 <MATCH_SPACE>
 8002cd8:	2800      	cmp	r0, #0
 8002cda:	d0cc      	beq.n	8002c76 <decodeAiwaRCT501+0x4a>
 8002cdc:	006d      	lsls	r5, r5, #1
 8002cde:	e7f1      	b.n	8002cc4 <decodeAiwaRCT501+0x98>
 8002ce0:	2000009c 	.word	0x2000009c

08002ce4 <decodeDenon>:

//+=============================================================================
//
#if DECODE_DENON
uint8_t decodeDenon (decode_results *results)
{
 8002ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned long data   = 0;  // Somewhere to build our code
	int offset = 1;  // Skip the Gap reading

	// Check we have the right amount of data
	if(irparams.rawlen != 1 + 2 + (2 * BITS) + 1) return false;
 8002ce6:	4b22      	ldr	r3, [pc, #136]	; (8002d70 <decodeDenon+0x8c>)
{
 8002ce8:	4604      	mov	r4, r0
	if(irparams.rawlen != 1 + 2 + (2 * BITS) + 1) return false;
 8002cea:	785b      	ldrb	r3, [r3, #1]
 8002cec:	2b20      	cmp	r3, #32
 8002cee:	d001      	beq.n	8002cf4 <decodeDenon+0x10>
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	// Check initial Mark+Space match
	if(!MATCH_MARK (results->rawbuf[offset++], HDR_MARK )) return false;
 8002cf4:	68c3      	ldr	r3, [r0, #12]
 8002cf6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002cfa:	8858      	ldrh	r0, [r3, #2]
 8002cfc:	b280      	uxth	r0, r0
 8002cfe:	f7ff fe23 	bl	8002948 <MATCH_MARK>
 8002d02:	2800      	cmp	r0, #0
 8002d04:	d0f4      	beq.n	8002cf0 <decodeDenon+0xc>
	if(!MATCH_SPACE(results->rawbuf[offset++], HDR_SPACE)) return false;
 8002d06:	68e3      	ldr	r3, [r4, #12]
 8002d08:	f240 21ee 	movw	r1, #750	; 0x2ee
 8002d0c:	8898      	ldrh	r0, [r3, #4]
 8002d0e:	b280      	uxth	r0, r0
 8002d10:	f7ff fe4e 	bl	80029b0 <MATCH_SPACE>
 8002d14:	2800      	cmp	r0, #0
 8002d16:	d0eb      	beq.n	8002cf0 <decodeDenon+0xc>
 8002d18:	2706      	movs	r7, #6
 8002d1a:	2500      	movs	r5, #0
	// Read the bits in
	for(int i = 0; i < BITS; i++) 
	{
		// Each bit looks like: MARK + SPACE_1 -> 1
		//                 or : MARK + SPACE_0 -> 0
		if (!MATCH_MARK(results->rawbuf[offset++], BIT_MARK)) return false;
 8002d1c:	68e3      	ldr	r3, [r4, #12]
 8002d1e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002d22:	5bd8      	ldrh	r0, [r3, r7]
 8002d24:	b280      	uxth	r0, r0
 8002d26:	f7ff fe0f 	bl	8002948 <MATCH_MARK>
 8002d2a:	2800      	cmp	r0, #0
 8002d2c:	d0e0      	beq.n	8002cf0 <decodeDenon+0xc>

		// IR data is big-endian, so we shuffle it in from the right:
		if(MATCH_SPACE(results->rawbuf[offset], ONE_SPACE))   data = (data << 1) | 1;
 8002d2e:	68e3      	ldr	r3, [r4, #12]
 8002d30:	1cbe      	adds	r6, r7, #2
 8002d32:	5b98      	ldrh	r0, [r3, r6]
 8002d34:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8002d38:	b280      	uxth	r0, r0
 8002d3a:	f7ff fe39 	bl	80029b0 <MATCH_SPACE>
 8002d3e:	b160      	cbz	r0, 8002d5a <decodeDenon+0x76>
 8002d40:	006d      	lsls	r5, r5, #1
 8002d42:	f045 0501 	orr.w	r5, r5, #1
 8002d46:	3704      	adds	r7, #4
	for(int i = 0; i < BITS; i++) 
 8002d48:	2f3e      	cmp	r7, #62	; 0x3e
 8002d4a:	d1e7      	bne.n	8002d1c <decodeDenon+0x38>
		else return false;
		offset++;
	}

	// Success
	results->bits = BITS;
 8002d4c:	230e      	movs	r3, #14
 8002d4e:	8123      	strh	r3, [r4, #8]
	results->value = data;
	results->decode_type = DENON;
 8002d50:	230f      	movs	r3, #15
	results->value = data;
 8002d52:	6065      	str	r5, [r4, #4]
	results->decode_type = DENON;
 8002d54:	7023      	strb	r3, [r4, #0]
	return true;
 8002d56:	2001      	movs	r0, #1
}
 8002d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		else if (MATCH_SPACE(results->rawbuf[offset], ZERO_SPACE))  data = (data << 1) | 0;
 8002d5a:	68e3      	ldr	r3, [r4, #12]
 8002d5c:	f240 21ee 	movw	r1, #750	; 0x2ee
 8002d60:	5b98      	ldrh	r0, [r3, r6]
 8002d62:	b280      	uxth	r0, r0
 8002d64:	f7ff fe24 	bl	80029b0 <MATCH_SPACE>
 8002d68:	2800      	cmp	r0, #0
 8002d6a:	d0c1      	beq.n	8002cf0 <decodeDenon+0xc>
 8002d6c:	006d      	lsls	r5, r5, #1
 8002d6e:	e7ea      	b.n	8002d46 <decodeDenon+0x62>
 8002d70:	2000009c 	.word	0x2000009c

08002d74 <decodeJVC>:
#endif

//+=============================================================================
#if DECODE_JVC
uint8_t decodeJVC(decode_results *results)
{
 8002d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	long data   = 0;
	int offset = 1; // Skip first space

	// Check for repeat
	if((irparams.rawlen - 1 == 33) && MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK) && MATCH_MARK(results->rawbuf[irparams.rawlen-1], JVC_BIT_MARK)) 
 8002d76:	4d37      	ldr	r5, [pc, #220]	; (8002e54 <decodeJVC+0xe0>)
{
 8002d78:	4604      	mov	r4, r0
	if((irparams.rawlen - 1 == 33) && MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK) && MATCH_MARK(results->rawbuf[irparams.rawlen-1], JVC_BIT_MARK)) 
 8002d7a:	786b      	ldrb	r3, [r5, #1]
 8002d7c:	462e      	mov	r6, r5
 8002d7e:	2b22      	cmp	r3, #34	; 0x22
 8002d80:	d11d      	bne.n	8002dbe <decodeJVC+0x4a>
 8002d82:	68c3      	ldr	r3, [r0, #12]
 8002d84:	f44f 7116 	mov.w	r1, #600	; 0x258
 8002d88:	8858      	ldrh	r0, [r3, #2]
 8002d8a:	b280      	uxth	r0, r0
 8002d8c:	f7ff fddc 	bl	8002948 <MATCH_MARK>
 8002d90:	b1a8      	cbz	r0, 8002dbe <decodeJVC+0x4a>
 8002d92:	786b      	ldrb	r3, [r5, #1]
 8002d94:	68e2      	ldr	r2, [r4, #12]
 8002d96:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8002da0:	f44f 7116 	mov.w	r1, #600	; 0x258
 8002da4:	b280      	uxth	r0, r0
 8002da6:	f7ff fdcf 	bl	8002948 <MATCH_MARK>
 8002daa:	b140      	cbz	r0, 8002dbe <decodeJVC+0x4a>
	{
		results->bits = 0;
 8002dac:	2300      	movs	r3, #0
 8002dae:	8123      	strh	r3, [r4, #8]
		results->value = REPEAT;
 8002db0:	f04f 33ff 	mov.w	r3, #4294967295
 8002db4:	6063      	str	r3, [r4, #4]
	if(!MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK)) return false;

	// Success
	results->bits        = JVC_BITS;
	results->value       = data;
	results->decode_type = JVC;
 8002db6:	2306      	movs	r3, #6

	return true;
 8002db8:	2001      	movs	r0, #1
	results->decode_type = JVC;
 8002dba:	7023      	strb	r3, [r4, #0]
}
 8002dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(!MATCH_MARK(results->rawbuf[offset++], JVC_HDR_MARK)) return false;
 8002dbe:	68e3      	ldr	r3, [r4, #12]
 8002dc0:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8002dc4:	8858      	ldrh	r0, [r3, #2]
 8002dc6:	b280      	uxth	r0, r0
 8002dc8:	f7ff fdbe 	bl	8002948 <MATCH_MARK>
 8002dcc:	b908      	cbnz	r0, 8002dd2 <decodeJVC+0x5e>
 8002dce:	2000      	movs	r0, #0
 8002dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(irparams.rawlen < (2 * JVC_BITS) + 1) return false;
 8002dd2:	7873      	ldrb	r3, [r6, #1]
 8002dd4:	2b20      	cmp	r3, #32
 8002dd6:	d9fa      	bls.n	8002dce <decodeJVC+0x5a>
	if(!MATCH_SPACE(results->rawbuf[offset++], JVC_HDR_SPACE))  return false;
 8002dd8:	68e3      	ldr	r3, [r4, #12]
 8002dda:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8002dde:	8898      	ldrh	r0, [r3, #4]
 8002de0:	b280      	uxth	r0, r0
 8002de2:	f7ff fde5 	bl	80029b0 <MATCH_SPACE>
 8002de6:	2800      	cmp	r0, #0
 8002de8:	d0f1      	beq.n	8002dce <decodeJVC+0x5a>
 8002dea:	2603      	movs	r6, #3
 8002dec:	2500      	movs	r5, #0
		if(!MATCH_MARK(results->rawbuf[offset++], JVC_BIT_MARK)) return false;
 8002dee:	68e3      	ldr	r3, [r4, #12]
 8002df0:	f44f 7116 	mov.w	r1, #600	; 0x258
 8002df4:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 8002df8:	0077      	lsls	r7, r6, #1
 8002dfa:	b280      	uxth	r0, r0
 8002dfc:	f7ff fda4 	bl	8002948 <MATCH_MARK>
 8002e00:	2800      	cmp	r0, #0
 8002e02:	d0e4      	beq.n	8002dce <decodeJVC+0x5a>
		if(MATCH_SPACE(results->rawbuf[offset], JVC_ONE_SPACE))   data = (data << 1) | 1;
 8002e04:	68e3      	ldr	r3, [r4, #12]
 8002e06:	3702      	adds	r7, #2
 8002e08:	5bd8      	ldrh	r0, [r3, r7]
 8002e0a:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8002e0e:	b280      	uxth	r0, r0
 8002e10:	f7ff fdce 	bl	80029b0 <MATCH_SPACE>
 8002e14:	b198      	cbz	r0, 8002e3e <decodeJVC+0xca>
 8002e16:	006d      	lsls	r5, r5, #1
 8002e18:	f045 0501 	orr.w	r5, r5, #1
		offset++;
 8002e1c:	3602      	adds	r6, #2
	for (int i = 0;  i < JVC_BITS;  i++) 
 8002e1e:	2e23      	cmp	r6, #35	; 0x23
 8002e20:	d1e5      	bne.n	8002dee <decodeJVC+0x7a>
	if(!MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK)) return false;
 8002e22:	68e3      	ldr	r3, [r4, #12]
 8002e24:	f44f 7116 	mov.w	r1, #600	; 0x258
 8002e28:	f8b3 0046 	ldrh.w	r0, [r3, #70]	; 0x46
 8002e2c:	b280      	uxth	r0, r0
 8002e2e:	f7ff fd8b 	bl	8002948 <MATCH_MARK>
 8002e32:	2800      	cmp	r0, #0
 8002e34:	d0cb      	beq.n	8002dce <decodeJVC+0x5a>
	results->bits        = JVC_BITS;
 8002e36:	2310      	movs	r3, #16
	results->value       = data;
 8002e38:	6065      	str	r5, [r4, #4]
	results->bits        = JVC_BITS;
 8002e3a:	8123      	strh	r3, [r4, #8]
 8002e3c:	e7bb      	b.n	8002db6 <decodeJVC+0x42>
		else if (MATCH_SPACE(results->rawbuf[offset], JVC_ZERO_SPACE))  data = (data << 1) | 0;
 8002e3e:	68e3      	ldr	r3, [r4, #12]
 8002e40:	f240 2126 	movw	r1, #550	; 0x226
 8002e44:	5bd8      	ldrh	r0, [r3, r7]
 8002e46:	b280      	uxth	r0, r0
 8002e48:	f7ff fdb2 	bl	80029b0 <MATCH_SPACE>
 8002e4c:	2800      	cmp	r0, #0
 8002e4e:	d0be      	beq.n	8002dce <decodeJVC+0x5a>
 8002e50:	006d      	lsls	r5, r5, #1
 8002e52:	e7e3      	b.n	8002e1c <decodeJVC+0xa8>
 8002e54:	2000009c 	.word	0x2000009c

08002e58 <decodeLG>:
#define LG_RPT_LENGTH 60000

//+=============================================================================
#if DECODE_LG
uint8_t decodeLG(decode_results *results)
{
 8002e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    long  data   = 0;
    int   offset = 1; // Skip first space

	// Check we have the right amount of data
    if (irparams.rawlen < (2 * LG_BITS) + 1 )  return false ;
 8002e5a:	4b28      	ldr	r3, [pc, #160]	; (8002efc <decodeLG+0xa4>)
{
 8002e5c:	4604      	mov	r4, r0
    if (irparams.rawlen < (2 * LG_BITS) + 1 )  return false ;
 8002e5e:	785b      	ldrb	r3, [r3, #1]
 8002e60:	2b38      	cmp	r3, #56	; 0x38
 8002e62:	d801      	bhi.n	8002e68 <decodeLG+0x10>
 8002e64:	2000      	movs	r0, #0
 8002e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    // Initial mark/space
    if (!MATCH_MARK(results->rawbuf[offset++], LG_HDR_MARK))  return false ;
 8002e68:	68c3      	ldr	r3, [r0, #12]
 8002e6a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8002e6e:	8858      	ldrh	r0, [r3, #2]
 8002e70:	b280      	uxth	r0, r0
 8002e72:	f7ff fd69 	bl	8002948 <MATCH_MARK>
 8002e76:	2800      	cmp	r0, #0
 8002e78:	d0f4      	beq.n	8002e64 <decodeLG+0xc>
    if (!MATCH_SPACE(results->rawbuf[offset++], LG_HDR_SPACE))  return false ;
 8002e7a:	68e3      	ldr	r3, [r4, #12]
 8002e7c:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8002e80:	8898      	ldrh	r0, [r3, #4]
 8002e82:	b280      	uxth	r0, r0
 8002e84:	f7ff fd94 	bl	80029b0 <MATCH_SPACE>
 8002e88:	2800      	cmp	r0, #0
 8002e8a:	d0eb      	beq.n	8002e64 <decodeLG+0xc>
 8002e8c:	2603      	movs	r6, #3
 8002e8e:	2500      	movs	r5, #0

    for (int i = 0;  i < LG_BITS;  i++) {
        if (!MATCH_MARK(results->rawbuf[offset++], LG_BIT_MARK))  return false ;
 8002e90:	68e3      	ldr	r3, [r4, #12]
 8002e92:	f44f 7116 	mov.w	r1, #600	; 0x258
 8002e96:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 8002e9a:	0077      	lsls	r7, r6, #1
 8002e9c:	b280      	uxth	r0, r0
 8002e9e:	f7ff fd53 	bl	8002948 <MATCH_MARK>
 8002ea2:	2800      	cmp	r0, #0
 8002ea4:	d0de      	beq.n	8002e64 <decodeLG+0xc>

        if      (MATCH_SPACE(results->rawbuf[offset], LG_ONE_SPACE))   data = (data << 1) | 1 ;
 8002ea6:	68e3      	ldr	r3, [r4, #12]
 8002ea8:	3702      	adds	r7, #2
 8002eaa:	5bd8      	ldrh	r0, [r3, r7]
 8002eac:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8002eb0:	b280      	uxth	r0, r0
 8002eb2:	f7ff fd7d 	bl	80029b0 <MATCH_SPACE>
 8002eb6:	b1b0      	cbz	r0, 8002ee6 <decodeLG+0x8e>
 8002eb8:	006d      	lsls	r5, r5, #1
 8002eba:	f045 0501 	orr.w	r5, r5, #1
        else if (MATCH_SPACE(results->rawbuf[offset], LG_ZERO_SPACE))  data = (data << 1) | 0 ;
        else                                                           return false ;
        offset++;
 8002ebe:	3602      	adds	r6, #2
    for (int i = 0;  i < LG_BITS;  i++) {
 8002ec0:	2e3b      	cmp	r6, #59	; 0x3b
 8002ec2:	d1e5      	bne.n	8002e90 <decodeLG+0x38>
    }

    // Stop bit
    if (!MATCH_MARK(results->rawbuf[offset], LG_BIT_MARK))   return false ;
 8002ec4:	68e3      	ldr	r3, [r4, #12]
 8002ec6:	f44f 7116 	mov.w	r1, #600	; 0x258
 8002eca:	f8b3 0076 	ldrh.w	r0, [r3, #118]	; 0x76
 8002ece:	b280      	uxth	r0, r0
 8002ed0:	f7ff fd3a 	bl	8002948 <MATCH_MARK>
 8002ed4:	2800      	cmp	r0, #0
 8002ed6:	d0c5      	beq.n	8002e64 <decodeLG+0xc>

    // Success
    results->bits        = LG_BITS;
 8002ed8:	231c      	movs	r3, #28
 8002eda:	8123      	strh	r3, [r4, #8]
    results->value       = data;
    results->decode_type = LG;
 8002edc:	230a      	movs	r3, #10
    results->value       = data;
 8002ede:	6065      	str	r5, [r4, #4]
    results->decode_type = LG;
 8002ee0:	7023      	strb	r3, [r4, #0]
    return true;
 8002ee2:	2001      	movs	r0, #1
}
 8002ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        else if (MATCH_SPACE(results->rawbuf[offset], LG_ZERO_SPACE))  data = (data << 1) | 0 ;
 8002ee6:	68e3      	ldr	r3, [r4, #12]
 8002ee8:	f240 2126 	movw	r1, #550	; 0x226
 8002eec:	5bd8      	ldrh	r0, [r3, r7]
 8002eee:	b280      	uxth	r0, r0
 8002ef0:	f7ff fd5e 	bl	80029b0 <MATCH_SPACE>
 8002ef4:	2800      	cmp	r0, #0
 8002ef6:	d0b5      	beq.n	8002e64 <decodeLG+0xc>
 8002ef8:	006d      	lsls	r5, r5, #1
 8002efa:	e7e0      	b.n	8002ebe <decodeLG+0x66>
 8002efc:	2000009c 	.word	0x2000009c

08002f00 <decodeMitsubishi>:
// #define MITSUBISHI_RPT_LENGTH 45000

//+=============================================================================
#if DECODE_MITSUBISHI
uint8_t decodeMitsubishi (decode_results *results)
{
 8002f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  // Serial.print("?!? decoding Mitsubishi:");Serial.print(irparams.rawlen); Serial.print(" want "); Serial.println( 2 * MITSUBISHI_BITS + 2);
  long data = 0;
  if (irparams.rawlen < 2 * MITSUBISHI_BITS + 2)  return false ;
 8002f04:	4b28      	ldr	r3, [pc, #160]	; (8002fa8 <decodeMitsubishi+0xa8>)
{
 8002f06:	4604      	mov	r4, r0
  if (irparams.rawlen < 2 * MITSUBISHI_BITS + 2)  return false ;
 8002f08:	785a      	ldrb	r2, [r3, #1]
 8002f0a:	4699      	mov	r9, r3
 8002f0c:	2a21      	cmp	r2, #33	; 0x21
 8002f0e:	d802      	bhi.n	8002f16 <decodeMitsubishi+0x16>
 8002f10:	2000      	movs	r0, #0
 8002f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

  // Typical
  // 14200 7 41 7 42 7 42 7 17 7 17 7 18 7 41 7 18 7 17 7 17 7 18 7 41 8 17 7 17 7 18 7 17 7

  // Initial Space
  if (!MATCH_MARK(results->rawbuf[offset], MITSUBISHI_HDR_SPACE))  return false ;
 8002f16:	68c3      	ldr	r3, [r0, #12]
 8002f18:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002f1c:	8858      	ldrh	r0, [r3, #2]
 8002f1e:	b280      	uxth	r0, r0
 8002f20:	f7ff fd12 	bl	8002948 <MATCH_MARK>
 8002f24:	2800      	cmp	r0, #0
 8002f26:	d0f3      	beq.n	8002f10 <decodeMitsubishi+0x10>
 8002f28:	2702      	movs	r7, #2
 8002f2a:	2600      	movs	r6, #0
  offset++;

  while (offset + 1 < irparams.rawlen) {
 8002f2c:	f899 3001 	ldrb.w	r3, [r9, #1]
 8002f30:	1c7d      	adds	r5, r7, #1
 8002f32:	42ab      	cmp	r3, r5
 8002f34:	dc0f      	bgt.n	8002f56 <decodeMitsubishi+0x56>
 8002f36:	463d      	mov	r5, r7
    if (!MATCH_SPACE(results->rawbuf[offset], MITSUBISHI_HDR_SPACE))  break ;
    offset++;
  }

  // Success
  results->bits = (offset - 1) / 2;
 8002f38:	3d01      	subs	r5, #1
 8002f3a:	f345 054f 	sbfx	r5, r5, #1, #16
  if (results->bits < MITSUBISHI_BITS) {
 8002f3e:	2d0f      	cmp	r5, #15
    results->bits = 0;
 8002f40:	bfd4      	ite	le
 8002f42:	2000      	movle	r0, #0
    return false;
  }

  results->value       = data;
  results->decode_type = MITSUBISHI;
 8002f44:	230c      	movgt	r3, #12
  results->bits = (offset - 1) / 2;
 8002f46:	8125      	strh	r5, [r4, #8]
  results->value       = data;
 8002f48:	bfc9      	itett	gt
 8002f4a:	6066      	strgt	r6, [r4, #4]
    results->bits = 0;
 8002f4c:	8120      	strhle	r0, [r4, #8]
  results->decode_type = MITSUBISHI;
 8002f4e:	7023      	strbgt	r3, [r4, #0]
  return true;
 8002f50:	2001      	movgt	r0, #1
}
 8002f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if      (MATCH_MARK(results->rawbuf[offset], MITSUBISHI_ONE_MARK))   data = (data << 1) | 1 ;
 8002f56:	68e3      	ldr	r3, [r4, #12]
 8002f58:	f240 719e 	movw	r1, #1950	; 0x79e
 8002f5c:	f833 0017 	ldrh.w	r0, [r3, r7, lsl #1]
 8002f60:	ea4f 0847 	mov.w	r8, r7, lsl #1
 8002f64:	b280      	uxth	r0, r0
 8002f66:	f7ff fcef 	bl	8002948 <MATCH_MARK>
 8002f6a:	b180      	cbz	r0, 8002f8e <decodeMitsubishi+0x8e>
 8002f6c:	0076      	lsls	r6, r6, #1
 8002f6e:	f046 0601 	orr.w	r6, r6, #1
    if (!MATCH_SPACE(results->rawbuf[offset], MITSUBISHI_HDR_SPACE))  break ;
 8002f72:	68e3      	ldr	r3, [r4, #12]
 8002f74:	f108 0802 	add.w	r8, r8, #2
 8002f78:	f833 0008 	ldrh.w	r0, [r3, r8]
 8002f7c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002f80:	b280      	uxth	r0, r0
 8002f82:	f7ff fd15 	bl	80029b0 <MATCH_SPACE>
 8002f86:	2800      	cmp	r0, #0
 8002f88:	d0d6      	beq.n	8002f38 <decodeMitsubishi+0x38>
    offset++;
 8002f8a:	3702      	adds	r7, #2
 8002f8c:	e7ce      	b.n	8002f2c <decodeMitsubishi+0x2c>
    else if (MATCH_MARK(results->rawbuf[offset], MITSUBISHI_ZERO_MARK))  data <<= 1 ;
 8002f8e:	68e3      	ldr	r3, [r4, #12]
 8002f90:	f240 21ee 	movw	r1, #750	; 0x2ee
 8002f94:	f833 0017 	ldrh.w	r0, [r3, r7, lsl #1]
 8002f98:	b280      	uxth	r0, r0
 8002f9a:	f7ff fcd5 	bl	8002948 <MATCH_MARK>
 8002f9e:	2800      	cmp	r0, #0
 8002fa0:	d0b6      	beq.n	8002f10 <decodeMitsubishi+0x10>
 8002fa2:	0076      	lsls	r6, r6, #1
 8002fa4:	e7e5      	b.n	8002f72 <decodeMitsubishi+0x72>
 8002fa6:	bf00      	nop
 8002fa8:	2000009c 	.word	0x2000009c

08002fac <decodeNEC>:
//+=============================================================================
// NECs have a repeat only 4 items long
//
#if DECODE_NEC
uint8_t decodeNEC (decode_results *results)
{
 8002fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	long  data   = 0;  // We decode in to here; Start with nothing
	int   offset = 1;  // Index in to results; Skip first entry!?

	// Check header "mark"
	if (!MATCH_MARK(results->rawbuf[offset], NEC_HDR_MARK))  return false ;
 8002fae:	68c3      	ldr	r3, [r0, #12]
{
 8002fb0:	4604      	mov	r4, r0
	if (!MATCH_MARK(results->rawbuf[offset], NEC_HDR_MARK))  return false ;
 8002fb2:	8858      	ldrh	r0, [r3, #2]
 8002fb4:	f242 3128 	movw	r1, #9000	; 0x2328
 8002fb8:	b280      	uxth	r0, r0
 8002fba:	f7ff fcc5 	bl	8002948 <MATCH_MARK>
 8002fbe:	b908      	cbnz	r0, 8002fc4 <decodeNEC+0x18>
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	offset++;

	// Check for repeat
	if ( (irparams.rawlen == 4)
 8002fc4:	4d28      	ldr	r5, [pc, #160]	; (8003068 <decodeNEC+0xbc>)
 8002fc6:	786a      	ldrb	r2, [r5, #1]
 8002fc8:	2a04      	cmp	r2, #4
 8002fca:	d118      	bne.n	8002ffe <decodeNEC+0x52>
	    && MATCH_SPACE(results->rawbuf[offset  ], NEC_RPT_SPACE)
 8002fcc:	68e3      	ldr	r3, [r4, #12]
 8002fce:	f640 01ca 	movw	r1, #2250	; 0x8ca
 8002fd2:	8898      	ldrh	r0, [r3, #4]
 8002fd4:	b280      	uxth	r0, r0
 8002fd6:	f7ff fceb 	bl	80029b0 <MATCH_SPACE>
 8002fda:	b180      	cbz	r0, 8002ffe <decodeNEC+0x52>
	    && MATCH_MARK (results->rawbuf[offset+1], NEC_BIT_MARK )
 8002fdc:	68e3      	ldr	r3, [r4, #12]
 8002fde:	f44f 710c 	mov.w	r1, #560	; 0x230
 8002fe2:	88d8      	ldrh	r0, [r3, #6]
 8002fe4:	b280      	uxth	r0, r0
 8002fe6:	f7ff fcaf 	bl	8002948 <MATCH_MARK>
 8002fea:	b140      	cbz	r0, 8002ffe <decodeNEC+0x52>
	   ) {
		results->bits        = 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	8123      	strh	r3, [r4, #8]
		results->value       = REPEAT;
 8002ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff4:	6063      	str	r3, [r4, #4]
	}

	// Success
	results->bits        = NEC_BITS;
	results->value       = data;
	results->decode_type = NEC;
 8002ff6:	2303      	movs	r3, #3

	return true;
 8002ff8:	2001      	movs	r0, #1
	results->decode_type = NEC;
 8002ffa:	7023      	strb	r3, [r4, #0]
}
 8002ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (irparams.rawlen < (2 * NEC_BITS) + 4)  return false ;
 8002ffe:	786b      	ldrb	r3, [r5, #1]
 8003000:	2b43      	cmp	r3, #67	; 0x43
 8003002:	d9dd      	bls.n	8002fc0 <decodeNEC+0x14>
	if (!MATCH_SPACE(results->rawbuf[offset], NEC_HDR_SPACE))  return false ;
 8003004:	68e3      	ldr	r3, [r4, #12]
 8003006:	f241 1194 	movw	r1, #4500	; 0x1194
 800300a:	8898      	ldrh	r0, [r3, #4]
 800300c:	b280      	uxth	r0, r0
 800300e:	f7ff fccf 	bl	80029b0 <MATCH_SPACE>
 8003012:	2800      	cmp	r0, #0
 8003014:	d0d4      	beq.n	8002fc0 <decodeNEC+0x14>
 8003016:	2706      	movs	r7, #6
 8003018:	2500      	movs	r5, #0
		if (!MATCH_MARK(results->rawbuf[offset], NEC_BIT_MARK))  return false ;
 800301a:	68e3      	ldr	r3, [r4, #12]
 800301c:	f44f 710c 	mov.w	r1, #560	; 0x230
 8003020:	5bd8      	ldrh	r0, [r3, r7]
 8003022:	b280      	uxth	r0, r0
 8003024:	f7ff fc90 	bl	8002948 <MATCH_MARK>
 8003028:	2800      	cmp	r0, #0
 800302a:	d0c9      	beq.n	8002fc0 <decodeNEC+0x14>
		if      (MATCH_SPACE(results->rawbuf[offset], NEC_ONE_SPACE ))  data = (data << 1) | 1 ;
 800302c:	68e3      	ldr	r3, [r4, #12]
 800302e:	1cbe      	adds	r6, r7, #2
 8003030:	5b98      	ldrh	r0, [r3, r6]
 8003032:	f240 619a 	movw	r1, #1690	; 0x69a
 8003036:	b280      	uxth	r0, r0
 8003038:	f7ff fcba 	bl	80029b0 <MATCH_SPACE>
 800303c:	b148      	cbz	r0, 8003052 <decodeNEC+0xa6>
 800303e:	006d      	lsls	r5, r5, #1
 8003040:	f045 0501 	orr.w	r5, r5, #1
 8003044:	3704      	adds	r7, #4
	for (int i = 0;  i < NEC_BITS;  i++) {
 8003046:	2f86      	cmp	r7, #134	; 0x86
 8003048:	d1e7      	bne.n	800301a <decodeNEC+0x6e>
	results->bits        = NEC_BITS;
 800304a:	2320      	movs	r3, #32
	results->value       = data;
 800304c:	6065      	str	r5, [r4, #4]
	results->bits        = NEC_BITS;
 800304e:	8123      	strh	r3, [r4, #8]
 8003050:	e7d1      	b.n	8002ff6 <decodeNEC+0x4a>
		else if (MATCH_SPACE(results->rawbuf[offset], NEC_ZERO_SPACE))  data = (data << 1) | 0 ;
 8003052:	68e3      	ldr	r3, [r4, #12]
 8003054:	f44f 710c 	mov.w	r1, #560	; 0x230
 8003058:	5b98      	ldrh	r0, [r3, r6]
 800305a:	b280      	uxth	r0, r0
 800305c:	f7ff fca8 	bl	80029b0 <MATCH_SPACE>
 8003060:	2800      	cmp	r0, #0
 8003062:	d0ad      	beq.n	8002fc0 <decodeNEC+0x14>
 8003064:	006d      	lsls	r5, r5, #1
 8003066:	e7ed      	b.n	8003044 <decodeNEC+0x98>
 8003068:	2000009c 	.word	0x2000009c

0800306c <decodePanasonic>:
uint8_t decodePanasonic (decode_results *results)
{
    unsigned long long  data   = 0;
    int                 offset = 1;

    if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_HDR_MARK ))  return false ;
 800306c:	68c3      	ldr	r3, [r0, #12]
{
 800306e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003072:	4606      	mov	r6, r0
    if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_HDR_MARK ))  return false ;
 8003074:	8858      	ldrh	r0, [r3, #2]
 8003076:	f640 51ae 	movw	r1, #3502	; 0xdae
 800307a:	b280      	uxth	r0, r0
 800307c:	f7ff fc64 	bl	8002948 <MATCH_MARK>
 8003080:	b910      	cbnz	r0, 8003088 <decodePanasonic+0x1c>
 8003082:	2000      	movs	r0, #0
 8003084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_HDR_SPACE))  return false ;
 8003088:	68f3      	ldr	r3, [r6, #12]
 800308a:	f240 61d6 	movw	r1, #1750	; 0x6d6
 800308e:	8898      	ldrh	r0, [r3, #4]
 8003090:	b280      	uxth	r0, r0
 8003092:	f7ff fc59 	bl	8002948 <MATCH_MARK>
 8003096:	2800      	cmp	r0, #0
 8003098:	d0f3      	beq.n	8003082 <decodePanasonic+0x16>
 800309a:	2706      	movs	r7, #6
 800309c:	2400      	movs	r4, #0
 800309e:	2500      	movs	r5, #0

    // decode address
    for (int i = 0;  i < PANASONIC_BITS;  i++) {
        if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_BIT_MARK))  return false ;
 80030a0:	68f3      	ldr	r3, [r6, #12]
 80030a2:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80030a6:	5bd8      	ldrh	r0, [r3, r7]
 80030a8:	b280      	uxth	r0, r0
 80030aa:	f7ff fc4d 	bl	8002948 <MATCH_MARK>
 80030ae:	2800      	cmp	r0, #0
 80030b0:	d0e7      	beq.n	8003082 <decodePanasonic+0x16>

        if      (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ONE_SPACE ))  data = (data << 1) | 1 ;
 80030b2:	68f3      	ldr	r3, [r6, #12]
 80030b4:	f107 0802 	add.w	r8, r7, #2
 80030b8:	f833 0008 	ldrh.w	r0, [r3, r8]
 80030bc:	f240 41dc 	movw	r1, #1244	; 0x4dc
 80030c0:	b280      	uxth	r0, r0
 80030c2:	f7ff fc75 	bl	80029b0 <MATCH_SPACE>
 80030c6:	b178      	cbz	r0, 80030e8 <decodePanasonic+0x7c>
 80030c8:	1924      	adds	r4, r4, r4
 80030ca:	416d      	adcs	r5, r5
 80030cc:	f044 0401 	orr.w	r4, r4, #1
 80030d0:	3704      	adds	r7, #4
    for (int i = 0;  i < PANASONIC_BITS;  i++) {
 80030d2:	2fc6      	cmp	r7, #198	; 0xc6
 80030d4:	d1e4      	bne.n	80030a0 <decodePanasonic+0x34>
        offset++;
    }

    results->value       = (unsigned long)data;
    results->address     = (unsigned int)(data >> 32);
    results->decode_type = PANASONIC;
 80030d6:	2305      	movs	r3, #5
 80030d8:	7033      	strb	r3, [r6, #0]
    results->bits        = PANASONIC_BITS;
 80030da:	2330      	movs	r3, #48	; 0x30
    results->value       = (unsigned long)data;
 80030dc:	6074      	str	r4, [r6, #4]
    results->address     = (unsigned int)(data >> 32);
 80030de:	8075      	strh	r5, [r6, #2]
    results->bits        = PANASONIC_BITS;
 80030e0:	8133      	strh	r3, [r6, #8]

    return true;
 80030e2:	2001      	movs	r0, #1
}
 80030e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        else if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ZERO_SPACE))  data = (data << 1) | 0 ;
 80030e8:	68f3      	ldr	r3, [r6, #12]
 80030ea:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80030ee:	f833 0008 	ldrh.w	r0, [r3, r8]
 80030f2:	b280      	uxth	r0, r0
 80030f4:	f7ff fc5c 	bl	80029b0 <MATCH_SPACE>
 80030f8:	2800      	cmp	r0, #0
 80030fa:	d0c2      	beq.n	8003082 <decodePanasonic+0x16>
 80030fc:	1924      	adds	r4, r4, r4
 80030fe:	416d      	adcs	r5, r5
 8003100:	e7e6      	b.n	80030d0 <decodePanasonic+0x64>

08003102 <getRClevel>:
// t1 is the time interval for a single bit in microseconds.
// Returns -1 for error (measured time interval is not a multiple of t1).
//
#if (DECODE_RC5 || DECODE_RC6)
int getRClevel (decode_results *results,  int *offset,  int *used,  int t1)
{
 8003102:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003106:	4690      	mov	r8, r2
 8003108:	4699      	mov	r9, r3
	int  width;
	int  val;
	int  correction;
	int  avail;

	if (*offset >= results->rawlen)  return SPACE ;  // After end of recorded buffer, assume SPACE.
 800310a:	680a      	ldr	r2, [r1, #0]
 800310c:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
{
 8003110:	460f      	mov	r7, r1
	if (*offset >= results->rawlen)  return SPACE ;  // After end of recorded buffer, assume SPACE.
 8003112:	429a      	cmp	r2, r3
 8003114:	da34      	bge.n	8003180 <getRClevel+0x7e>
	width      = results->rawbuf[*offset];
	val        = ((*offset) % 2) ? MARK : SPACE;
	correction = (val == MARK) ? MARK_EXCESS : - MARK_EXCESS;
 8003116:	f012 0f01 	tst.w	r2, #1
 800311a:	bf0c      	ite	eq
 800311c:	f06f 0463 	mvneq.w	r4, #99	; 0x63
 8003120:	2464      	movne	r4, #100	; 0x64
	val        = ((*offset) % 2) ? MARK : SPACE;
 8003122:	43d5      	mvns	r5, r2
	width      = results->rawbuf[*offset];
 8003124:	68c3      	ldr	r3, [r0, #12]

	if      (MATCH(width, (  t1) + correction))  avail = 1 ;
 8003126:	444c      	add	r4, r9
	width      = results->rawbuf[*offset];
 8003128:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
	if      (MATCH(width, (  t1) + correction))  avail = 1 ;
 800312c:	4621      	mov	r1, r4
	width      = results->rawbuf[*offset];
 800312e:	b2b6      	uxth	r6, r6
	if      (MATCH(width, (  t1) + correction))  avail = 1 ;
 8003130:	4630      	mov	r0, r6
	val        = ((*offset) % 2) ? MARK : SPACE;
 8003132:	f005 0501 	and.w	r5, r5, #1
	if      (MATCH(width, (  t1) + correction))  avail = 1 ;
 8003136:	f7ff fbd5 	bl	80028e4 <MATCH>
 800313a:	b9e8      	cbnz	r0, 8003178 <getRClevel+0x76>
	else if (MATCH(width, (2*t1) + correction))  avail = 2 ;
 800313c:	444c      	add	r4, r9
 800313e:	4621      	mov	r1, r4
 8003140:	4630      	mov	r0, r6
 8003142:	f7ff fbcf 	bl	80028e4 <MATCH>
 8003146:	b9c8      	cbnz	r0, 800317c <getRClevel+0x7a>
	else if (MATCH(width, (3*t1) + correction))  avail = 3 ;
 8003148:	eb09 0104 	add.w	r1, r9, r4
 800314c:	4630      	mov	r0, r6
 800314e:	f7ff fbc9 	bl	80028e4 <MATCH>
 8003152:	b1b8      	cbz	r0, 8003184 <getRClevel+0x82>
 8003154:	2203      	movs	r2, #3
	else                                         return -1 ;

	(*used)++;
 8003156:	f8d8 3000 	ldr.w	r3, [r8]
 800315a:	3301      	adds	r3, #1
	if (*used >= avail) {
 800315c:	429a      	cmp	r2, r3
		*used = 0;
 800315e:	bfdd      	ittte	le
 8003160:	2300      	movle	r3, #0
 8003162:	f8c8 3000 	strle.w	r3, [r8]
		(*offset)++;
 8003166:	683b      	ldrle	r3, [r7, #0]
	(*used)++;
 8003168:	f8c8 3000 	strgt.w	r3, [r8]
		(*offset)++;
 800316c:	bfdc      	itt	le
 800316e:	3301      	addle	r3, #1
 8003170:	603b      	strle	r3, [r7, #0]
	}

	//DBG_PRINTLN( (val == MARK) ? "MARK" : "SPACE" );

	return val;
}
 8003172:	4628      	mov	r0, r5
 8003174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if      (MATCH(width, (  t1) + correction))  avail = 1 ;
 8003178:	2201      	movs	r2, #1
 800317a:	e7ec      	b.n	8003156 <getRClevel+0x54>
	else if (MATCH(width, (2*t1) + correction))  avail = 2 ;
 800317c:	2202      	movs	r2, #2
 800317e:	e7ea      	b.n	8003156 <getRClevel+0x54>
	if (*offset >= results->rawlen)  return SPACE ;  // After end of recorded buffer, assume SPACE.
 8003180:	2501      	movs	r5, #1
 8003182:	e7f6      	b.n	8003172 <getRClevel+0x70>
	else                                         return -1 ;
 8003184:	f04f 35ff 	mov.w	r5, #4294967295
 8003188:	e7f3      	b.n	8003172 <getRClevel+0x70>
	...

0800318c <decodeRC5>:
uint8_t decodeRC5 (decode_results *results)
{
	int   nbits;
	long  data   = 0;
	int   used   = 0;
	int   offset = 1;  // Skip gap space
 800318c:	2200      	movs	r2, #0
 800318e:	2301      	movs	r3, #1
{
 8003190:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	int   offset = 1;  // Skip gap space
 8003194:	e88d 000c 	stmia.w	sp, {r2, r3}

	if (irparams.rawlen < MIN_RC5_SAMPLES + 2)  return false ;
 8003198:	4b26      	ldr	r3, [pc, #152]	; (8003234 <decodeRC5+0xa8>)
{
 800319a:	4604      	mov	r4, r0
	if (irparams.rawlen < MIN_RC5_SAMPLES + 2)  return false ;
 800319c:	785a      	ldrb	r2, [r3, #1]
 800319e:	4698      	mov	r8, r3
 80031a0:	2a0c      	cmp	r2, #12
 80031a2:	d803      	bhi.n	80031ac <decodeRC5+0x20>
 80031a4:	2000      	movs	r0, #0
	// Success
	results->bits        = nbits;
	results->value       = data;
	results->decode_type = RC5;
	return true;
}
 80031a6:	b002      	add	sp, #8
 80031a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (getRClevel(results, &offset, &used, RC5_T1) != MARK)   return false ;
 80031ac:	f240 3379 	movw	r3, #889	; 0x379
 80031b0:	466a      	mov	r2, sp
 80031b2:	a901      	add	r1, sp, #4
 80031b4:	f7ff ffa5 	bl	8003102 <getRClevel>
 80031b8:	2800      	cmp	r0, #0
 80031ba:	d1f3      	bne.n	80031a4 <decodeRC5+0x18>
	if (getRClevel(results, &offset, &used, RC5_T1) != SPACE)  return false ;
 80031bc:	f240 3379 	movw	r3, #889	; 0x379
 80031c0:	466a      	mov	r2, sp
 80031c2:	a901      	add	r1, sp, #4
 80031c4:	4620      	mov	r0, r4
 80031c6:	f7ff ff9c 	bl	8003102 <getRClevel>
 80031ca:	2801      	cmp	r0, #1
 80031cc:	d1ea      	bne.n	80031a4 <decodeRC5+0x18>
	if (getRClevel(results, &offset, &used, RC5_T1) != MARK)   return false ;
 80031ce:	f240 3379 	movw	r3, #889	; 0x379
 80031d2:	466a      	mov	r2, sp
 80031d4:	a901      	add	r1, sp, #4
 80031d6:	4620      	mov	r0, r4
 80031d8:	f7ff ff93 	bl	8003102 <getRClevel>
 80031dc:	4606      	mov	r6, r0
 80031de:	2800      	cmp	r0, #0
 80031e0:	d1e0      	bne.n	80031a4 <decodeRC5+0x18>
 80031e2:	4605      	mov	r5, r0
	for (nbits = 0;  offset < irparams.rawlen;  nbits++) {
 80031e4:	f898 2001 	ldrb.w	r2, [r8, #1]
 80031e8:	9b01      	ldr	r3, [sp, #4]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	dc04      	bgt.n	80031f8 <decodeRC5+0x6c>
	results->decode_type = RC5;
 80031ee:	2001      	movs	r0, #1
	results->bits        = nbits;
 80031f0:	8126      	strh	r6, [r4, #8]
	results->value       = data;
 80031f2:	6065      	str	r5, [r4, #4]
	results->decode_type = RC5;
 80031f4:	7020      	strb	r0, [r4, #0]
	return true;
 80031f6:	e7d6      	b.n	80031a6 <decodeRC5+0x1a>
		int  levelA = getRClevel(results, &offset, &used, RC5_T1);
 80031f8:	f240 3379 	movw	r3, #889	; 0x379
 80031fc:	466a      	mov	r2, sp
 80031fe:	a901      	add	r1, sp, #4
 8003200:	4620      	mov	r0, r4
 8003202:	f7ff ff7e 	bl	8003102 <getRClevel>
 8003206:	4607      	mov	r7, r0
		int  levelB = getRClevel(results, &offset, &used, RC5_T1);
 8003208:	f240 3379 	movw	r3, #889	; 0x379
 800320c:	466a      	mov	r2, sp
 800320e:	a901      	add	r1, sp, #4
 8003210:	4620      	mov	r0, r4
 8003212:	f7ff ff76 	bl	8003102 <getRClevel>
		if      ((levelA == SPACE) && (levelB == MARK ))  data = (data << 1) | 1 ;
 8003216:	2f01      	cmp	r7, #1
 8003218:	d106      	bne.n	8003228 <decodeRC5+0x9c>
 800321a:	2800      	cmp	r0, #0
 800321c:	d1c2      	bne.n	80031a4 <decodeRC5+0x18>
 800321e:	006d      	lsls	r5, r5, #1
 8003220:	f045 0501 	orr.w	r5, r5, #1
	for (nbits = 0;  offset < irparams.rawlen;  nbits++) {
 8003224:	3601      	adds	r6, #1
 8003226:	e7dd      	b.n	80031e4 <decodeRC5+0x58>
		else if ((levelA == MARK ) && (levelB == SPACE))  data = (data << 1) | 0 ;
 8003228:	2f00      	cmp	r7, #0
 800322a:	d1bb      	bne.n	80031a4 <decodeRC5+0x18>
 800322c:	2801      	cmp	r0, #1
 800322e:	d1b9      	bne.n	80031a4 <decodeRC5+0x18>
 8003230:	006d      	lsls	r5, r5, #1
 8003232:	e7f7      	b.n	8003224 <decodeRC5+0x98>
 8003234:	2000009c 	.word	0x2000009c

08003238 <decodeRC6>:
#if DECODE_RC6
uint8_t decodeRC6 (decode_results *results)
{
	int   nbits;
	long  data   = 0;
	int   used   = 0;
 8003238:	2300      	movs	r3, #0
{
 800323a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	int   used   = 0;
 800323e:	9300      	str	r3, [sp, #0]
	int   offset = 1;  // Skip first space

	if (results->rawlen < MIN_RC6_SAMPLES)  return false ;
 8003240:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
{
 8003244:	4604      	mov	r4, r0
	if (results->rawlen < MIN_RC6_SAMPLES)  return false ;
 8003246:	2b00      	cmp	r3, #0
 8003248:	dc03      	bgt.n	8003252 <decodeRC6+0x1a>
 800324a:	2000      	movs	r0, #0
	// Success
	results->bits        = nbits;
	results->value       = data;
	results->decode_type = RC6;
	return true;
}
 800324c:	b002      	add	sp, #8
 800324e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!MATCH_MARK(results->rawbuf[offset++],  RC6_HDR_MARK))   return false ;
 8003252:	2202      	movs	r2, #2
 8003254:	68c3      	ldr	r3, [r0, #12]
 8003256:	f640 216a 	movw	r1, #2666	; 0xa6a
 800325a:	8858      	ldrh	r0, [r3, #2]
 800325c:	9201      	str	r2, [sp, #4]
 800325e:	b280      	uxth	r0, r0
 8003260:	f7ff fb72 	bl	8002948 <MATCH_MARK>
 8003264:	2800      	cmp	r0, #0
 8003266:	d0f0      	beq.n	800324a <decodeRC6+0x12>
	if (!MATCH_SPACE(results->rawbuf[offset++], RC6_HDR_SPACE))  return false ;
 8003268:	9b01      	ldr	r3, [sp, #4]
 800326a:	68e2      	ldr	r2, [r4, #12]
 800326c:	1c59      	adds	r1, r3, #1
 800326e:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8003272:	9101      	str	r1, [sp, #4]
 8003274:	b280      	uxth	r0, r0
 8003276:	f240 3179 	movw	r1, #889	; 0x379
 800327a:	f7ff fb99 	bl	80029b0 <MATCH_SPACE>
 800327e:	2800      	cmp	r0, #0
 8003280:	d0e3      	beq.n	800324a <decodeRC6+0x12>
	if (getRClevel(results, &offset, &used, RC6_T1) != MARK)   return false ;
 8003282:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8003286:	466a      	mov	r2, sp
 8003288:	a901      	add	r1, sp, #4
 800328a:	4620      	mov	r0, r4
 800328c:	f7ff ff39 	bl	8003102 <getRClevel>
 8003290:	4606      	mov	r6, r0
 8003292:	2800      	cmp	r0, #0
 8003294:	d1d9      	bne.n	800324a <decodeRC6+0x12>
	if (getRClevel(results, &offset, &used, RC6_T1) != SPACE)  return false ;
 8003296:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 800329a:	466a      	mov	r2, sp
 800329c:	a901      	add	r1, sp, #4
 800329e:	4620      	mov	r0, r4
 80032a0:	f7ff ff2f 	bl	8003102 <getRClevel>
 80032a4:	2801      	cmp	r0, #1
 80032a6:	d1d0      	bne.n	800324a <decodeRC6+0x12>
 80032a8:	4635      	mov	r5, r6
	for (nbits = 0;  offset < results->rawlen;  nbits++) {
 80032aa:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 80032ae:	9b01      	ldr	r3, [sp, #4]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	dc05      	bgt.n	80032c0 <decodeRC6+0x88>
	results->decode_type = RC6;
 80032b4:	2302      	movs	r3, #2
	results->bits        = nbits;
 80032b6:	8126      	strh	r6, [r4, #8]
	results->value       = data;
 80032b8:	6065      	str	r5, [r4, #4]
	results->decode_type = RC6;
 80032ba:	7023      	strb	r3, [r4, #0]
	return true;
 80032bc:	2001      	movs	r0, #1
 80032be:	e7c5      	b.n	800324c <decodeRC6+0x14>
		levelA = getRClevel(results, &offset, &used, RC6_T1);
 80032c0:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 80032c4:	466a      	mov	r2, sp
 80032c6:	a901      	add	r1, sp, #4
 80032c8:	4620      	mov	r0, r4
 80032ca:	f7ff ff1a 	bl	8003102 <getRClevel>
		if (nbits == 3) {
 80032ce:	2e03      	cmp	r6, #3
		levelA = getRClevel(results, &offset, &used, RC6_T1);
 80032d0:	4680      	mov	r8, r0
		if (nbits == 3) {
 80032d2:	d01c      	beq.n	800330e <decodeRC6+0xd6>
		levelB = getRClevel(results, &offset, &used, RC6_T1);
 80032d4:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 80032d8:	466a      	mov	r2, sp
 80032da:	a901      	add	r1, sp, #4
 80032dc:	4620      	mov	r0, r4
 80032de:	f7ff ff10 	bl	8003102 <getRClevel>
		if (nbits == 3) {
 80032e2:	2e03      	cmp	r6, #3
		levelB = getRClevel(results, &offset, &used, RC6_T1);
 80032e4:	4607      	mov	r7, r0
		if (nbits == 3) {
 80032e6:	d108      	bne.n	80032fa <decodeRC6+0xc2>
			if (levelB != getRClevel(results, &offset, &used, RC6_T1)) return false;
 80032e8:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 80032ec:	466a      	mov	r2, sp
 80032ee:	a901      	add	r1, sp, #4
 80032f0:	4620      	mov	r0, r4
 80032f2:	f7ff ff06 	bl	8003102 <getRClevel>
 80032f6:	4287      	cmp	r7, r0
 80032f8:	d1a7      	bne.n	800324a <decodeRC6+0x12>
		if      ((levelA == MARK ) && (levelB == SPACE))  data = (data << 1) | 1 ;  // inverted compared to RC5
 80032fa:	f1b8 0f00 	cmp.w	r8, #0
 80032fe:	d010      	beq.n	8003322 <decodeRC6+0xea>
		else if ((levelA == SPACE) && (levelB == MARK ))  data = (data << 1) | 0 ;  // ...
 8003300:	f1b8 0f01 	cmp.w	r8, #1
 8003304:	d1a1      	bne.n	800324a <decodeRC6+0x12>
 8003306:	2f00      	cmp	r7, #0
 8003308:	d19f      	bne.n	800324a <decodeRC6+0x12>
 800330a:	006d      	lsls	r5, r5, #1
 800330c:	e00e      	b.n	800332c <decodeRC6+0xf4>
			if (levelA != getRClevel(results, &offset, &used, RC6_T1)) return false;
 800330e:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8003312:	466a      	mov	r2, sp
 8003314:	a901      	add	r1, sp, #4
 8003316:	4620      	mov	r0, r4
 8003318:	f7ff fef3 	bl	8003102 <getRClevel>
 800331c:	4580      	cmp	r8, r0
 800331e:	d0d9      	beq.n	80032d4 <decodeRC6+0x9c>
 8003320:	e793      	b.n	800324a <decodeRC6+0x12>
		if      ((levelA == MARK ) && (levelB == SPACE))  data = (data << 1) | 1 ;  // inverted compared to RC5
 8003322:	2f01      	cmp	r7, #1
 8003324:	d191      	bne.n	800324a <decodeRC6+0x12>
 8003326:	006d      	lsls	r5, r5, #1
 8003328:	f045 0501 	orr.w	r5, r5, #1
	for (nbits = 0;  offset < results->rawlen;  nbits++) {
 800332c:	3601      	adds	r6, #1
 800332e:	e7bc      	b.n	80032aa <decodeRC6+0x72>

08003330 <decodeSAMSUNG>:
//+=============================================================================
// SAMSUNGs have a repeat only 4 items long
//
#if DECODE_SAMSUNG
uint8_t decodeSAMSUNG (decode_results *results)
{
 8003330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	long  data   = 0;
	int   offset = 1;  // Skip first space

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset], SAMSUNG_HDR_MARK))   return false ;
 8003332:	68c3      	ldr	r3, [r0, #12]
{
 8003334:	4604      	mov	r4, r0
	if (!MATCH_MARK(results->rawbuf[offset], SAMSUNG_HDR_MARK))   return false ;
 8003336:	8858      	ldrh	r0, [r3, #2]
 8003338:	f241 1194 	movw	r1, #4500	; 0x1194
 800333c:	b280      	uxth	r0, r0
 800333e:	f7ff fb03 	bl	8002948 <MATCH_MARK>
 8003342:	b908      	cbnz	r0, 8003348 <decodeSAMSUNG+0x18>
 8003344:	2000      	movs	r0, #0
 8003346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	offset++;

	// Check for repeat
	if (    (irparams.rawlen == 4)
 8003348:	4d28      	ldr	r5, [pc, #160]	; (80033ec <decodeSAMSUNG+0xbc>)
 800334a:	786a      	ldrb	r2, [r5, #1]
 800334c:	2a04      	cmp	r2, #4
 800334e:	d118      	bne.n	8003382 <decodeSAMSUNG+0x52>
	     && MATCH_SPACE(results->rawbuf[offset], SAMSUNG_RPT_SPACE)
 8003350:	68e3      	ldr	r3, [r4, #12]
 8003352:	f640 01ca 	movw	r1, #2250	; 0x8ca
 8003356:	8898      	ldrh	r0, [r3, #4]
 8003358:	b280      	uxth	r0, r0
 800335a:	f7ff fb29 	bl	80029b0 <MATCH_SPACE>
 800335e:	b180      	cbz	r0, 8003382 <decodeSAMSUNG+0x52>
	     && MATCH_MARK(results->rawbuf[offset+1], SAMSUNG_BIT_MARK)
 8003360:	68e3      	ldr	r3, [r4, #12]
 8003362:	f44f 710c 	mov.w	r1, #560	; 0x230
 8003366:	88d8      	ldrh	r0, [r3, #6]
 8003368:	b280      	uxth	r0, r0
 800336a:	f7ff faed 	bl	8002948 <MATCH_MARK>
 800336e:	b140      	cbz	r0, 8003382 <decodeSAMSUNG+0x52>
	   ) {
		results->bits        = 0;
 8003370:	2300      	movs	r3, #0
 8003372:	8123      	strh	r3, [r4, #8]
		results->value       = REPEAT;
 8003374:	f04f 33ff 	mov.w	r3, #4294967295
 8003378:	6063      	str	r3, [r4, #4]
	}

	// Success
	results->bits        = SAMSUNG_BITS;
	results->value       = data;
	results->decode_type = SAMSUNG;
 800337a:	2307      	movs	r3, #7
	return true;
 800337c:	2001      	movs	r0, #1
	results->decode_type = SAMSUNG;
 800337e:	7023      	strb	r3, [r4, #0]
}
 8003380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (irparams.rawlen < (2 * SAMSUNG_BITS) + 4)  return false ;
 8003382:	786b      	ldrb	r3, [r5, #1]
 8003384:	2b43      	cmp	r3, #67	; 0x43
 8003386:	d9dd      	bls.n	8003344 <decodeSAMSUNG+0x14>
	if (!MATCH_SPACE(results->rawbuf[offset++], SAMSUNG_HDR_SPACE))  return false ;
 8003388:	68e3      	ldr	r3, [r4, #12]
 800338a:	f241 1194 	movw	r1, #4500	; 0x1194
 800338e:	8898      	ldrh	r0, [r3, #4]
 8003390:	b280      	uxth	r0, r0
 8003392:	f7ff fb0d 	bl	80029b0 <MATCH_SPACE>
 8003396:	2800      	cmp	r0, #0
 8003398:	d0d4      	beq.n	8003344 <decodeSAMSUNG+0x14>
 800339a:	2706      	movs	r7, #6
 800339c:	2500      	movs	r5, #0
		if (!MATCH_MARK(results->rawbuf[offset++], SAMSUNG_BIT_MARK))  return false ;
 800339e:	68e3      	ldr	r3, [r4, #12]
 80033a0:	f44f 710c 	mov.w	r1, #560	; 0x230
 80033a4:	5bd8      	ldrh	r0, [r3, r7]
 80033a6:	b280      	uxth	r0, r0
 80033a8:	f7ff face 	bl	8002948 <MATCH_MARK>
 80033ac:	2800      	cmp	r0, #0
 80033ae:	d0c9      	beq.n	8003344 <decodeSAMSUNG+0x14>
		if      (MATCH_SPACE(results->rawbuf[offset], SAMSUNG_ONE_SPACE))   data = (data << 1) | 1 ;
 80033b0:	68e3      	ldr	r3, [r4, #12]
 80033b2:	1cbe      	adds	r6, r7, #2
 80033b4:	5b98      	ldrh	r0, [r3, r6]
 80033b6:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80033ba:	b280      	uxth	r0, r0
 80033bc:	f7ff faf8 	bl	80029b0 <MATCH_SPACE>
 80033c0:	b148      	cbz	r0, 80033d6 <decodeSAMSUNG+0xa6>
 80033c2:	006d      	lsls	r5, r5, #1
 80033c4:	f045 0501 	orr.w	r5, r5, #1
 80033c8:	3704      	adds	r7, #4
	for (int i = 0;  i < SAMSUNG_BITS;   i++) {
 80033ca:	2f86      	cmp	r7, #134	; 0x86
 80033cc:	d1e7      	bne.n	800339e <decodeSAMSUNG+0x6e>
	results->bits        = SAMSUNG_BITS;
 80033ce:	2320      	movs	r3, #32
	results->value       = data;
 80033d0:	6065      	str	r5, [r4, #4]
	results->bits        = SAMSUNG_BITS;
 80033d2:	8123      	strh	r3, [r4, #8]
 80033d4:	e7d1      	b.n	800337a <decodeSAMSUNG+0x4a>
		else if (MATCH_SPACE(results->rawbuf[offset], SAMSUNG_ZERO_SPACE))  data = (data << 1) | 0 ;
 80033d6:	68e3      	ldr	r3, [r4, #12]
 80033d8:	f44f 710c 	mov.w	r1, #560	; 0x230
 80033dc:	5b98      	ldrh	r0, [r3, r6]
 80033de:	b280      	uxth	r0, r0
 80033e0:	f7ff fae6 	bl	80029b0 <MATCH_SPACE>
 80033e4:	2800      	cmp	r0, #0
 80033e6:	d0ad      	beq.n	8003344 <decodeSAMSUNG+0x14>
 80033e8:	006d      	lsls	r5, r5, #1
 80033ea:	e7ed      	b.n	80033c8 <decodeSAMSUNG+0x98>
 80033ec:	2000009c 	.word	0x2000009c

080033f0 <decodeSanyo>:
#define SANYO_RPT_LENGTH          45000

//+=============================================================================
#if DECODE_SANYO
uint8_t decodeSanyo (decode_results *results)
{
 80033f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	long  data   = 0;
	int   offset = 0;  // Skip first space  <-- CHECK THIS!

	if (irparams.rawlen < (2 * SANYO_BITS) + 2)  return false ;
 80033f4:	4b32      	ldr	r3, [pc, #200]	; (80034c0 <decodeSanyo+0xd0>)
{
 80033f6:	4604      	mov	r4, r0
	if (irparams.rawlen < (2 * SANYO_BITS) + 2)  return false ;
 80033f8:	785a      	ldrb	r2, [r3, #1]
 80033fa:	4698      	mov	r8, r3
 80033fc:	2a19      	cmp	r2, #25
 80033fe:	d802      	bhi.n	8003406 <decodeSanyo+0x16>
 8003400:	2000      	movs	r0, #0
 8003402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	Serial.println( "test against:");
	Serial.println(results->rawbuf[offset]);
#endif

	// Initial space
	if (results->rawbuf[offset] < SANYO_DOUBLE_SPACE_USECS) {
 8003406:	68c2      	ldr	r2, [r0, #12]
 8003408:	8813      	ldrh	r3, [r2, #0]
 800340a:	b29b      	uxth	r3, r3
 800340c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003410:	d209      	bcs.n	8003426 <decodeSanyo+0x36>
		//Serial.print("IR Gap found: ");
		results->bits        = 0;
 8003412:	2300      	movs	r3, #0
 8003414:	8103      	strh	r3, [r0, #8]
		results->value       = REPEAT;
 8003416:	f04f 33ff 	mov.w	r3, #4294967295
 800341a:	6043      	str	r3, [r0, #4]
		results->bits = 0;
		return false;
	}

	results->value       = data;
	results->decode_type = SANYO;
 800341c:	230b      	movs	r3, #11
	return true;
 800341e:	2001      	movs	r0, #1
	results->decode_type = SANYO;
 8003420:	7023      	strb	r3, [r4, #0]
}
 8003422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!MATCH_MARK(results->rawbuf[offset++], SANYO_HDR_MARK))  return false ;
 8003426:	8850      	ldrh	r0, [r2, #2]
 8003428:	f640 51ac 	movw	r1, #3500	; 0xdac
 800342c:	b280      	uxth	r0, r0
 800342e:	f7ff fa8b 	bl	8002948 <MATCH_MARK>
 8003432:	2800      	cmp	r0, #0
 8003434:	d0e4      	beq.n	8003400 <decodeSanyo+0x10>
	if (!MATCH_MARK(results->rawbuf[offset++], SANYO_HDR_MARK))  return false ;
 8003436:	68e3      	ldr	r3, [r4, #12]
 8003438:	f640 51ac 	movw	r1, #3500	; 0xdac
 800343c:	8898      	ldrh	r0, [r3, #4]
 800343e:	b280      	uxth	r0, r0
 8003440:	f7ff fa82 	bl	8002948 <MATCH_MARK>
 8003444:	2800      	cmp	r0, #0
 8003446:	d0db      	beq.n	8003400 <decodeSanyo+0x10>
 8003448:	2703      	movs	r7, #3
 800344a:	2600      	movs	r6, #0
	while (offset + 1 < irparams.rawlen) {
 800344c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003450:	1c7d      	adds	r5, r7, #1
 8003452:	42ab      	cmp	r3, r5
 8003454:	dc0a      	bgt.n	800346c <decodeSanyo+0x7c>
 8003456:	463d      	mov	r5, r7
	results->bits = (offset - 1) / 2;
 8003458:	3d01      	subs	r5, #1
 800345a:	f345 054f 	sbfx	r5, r5, #1, #16
	if (results->bits < 12) {
 800345e:	2d0b      	cmp	r5, #11
	results->bits = (offset - 1) / 2;
 8003460:	8125      	strh	r5, [r4, #8]
	if (results->bits < 12) {
 8003462:	dc2b      	bgt.n	80034bc <decodeSanyo+0xcc>
		results->bits = 0;
 8003464:	2000      	movs	r0, #0
 8003466:	8120      	strh	r0, [r4, #8]
		return false;
 8003468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!MATCH_SPACE(results->rawbuf[offset++], SANYO_HDR_SPACE))  break ;
 800346c:	68e3      	ldr	r3, [r4, #12]
 800346e:	f240 31b6 	movw	r1, #950	; 0x3b6
 8003472:	f833 0017 	ldrh.w	r0, [r3, r7, lsl #1]
 8003476:	ea4f 0947 	mov.w	r9, r7, lsl #1
 800347a:	b280      	uxth	r0, r0
 800347c:	f7ff fa98 	bl	80029b0 <MATCH_SPACE>
 8003480:	2800      	cmp	r0, #0
 8003482:	d0e9      	beq.n	8003458 <decodeSanyo+0x68>
		if      (MATCH_MARK(results->rawbuf[offset], SANYO_ONE_MARK))   data = (data << 1) | 1 ;
 8003484:	68e3      	ldr	r3, [r4, #12]
 8003486:	f109 0902 	add.w	r9, r9, #2
 800348a:	f833 0009 	ldrh.w	r0, [r3, r9]
 800348e:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8003492:	b280      	uxth	r0, r0
 8003494:	f7ff fa58 	bl	8002948 <MATCH_MARK>
 8003498:	b120      	cbz	r0, 80034a4 <decodeSanyo+0xb4>
 800349a:	0076      	lsls	r6, r6, #1
 800349c:	f046 0601 	orr.w	r6, r6, #1
		offset++;
 80034a0:	3702      	adds	r7, #2
 80034a2:	e7d3      	b.n	800344c <decodeSanyo+0x5c>
		else if (MATCH_MARK(results->rawbuf[offset], SANYO_ZERO_MARK))  data = (data << 1) | 0 ;
 80034a4:	68e3      	ldr	r3, [r4, #12]
 80034a6:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80034aa:	f833 0009 	ldrh.w	r0, [r3, r9]
 80034ae:	b280      	uxth	r0, r0
 80034b0:	f7ff fa4a 	bl	8002948 <MATCH_MARK>
 80034b4:	2800      	cmp	r0, #0
 80034b6:	d0a3      	beq.n	8003400 <decodeSanyo+0x10>
 80034b8:	0076      	lsls	r6, r6, #1
 80034ba:	e7f1      	b.n	80034a0 <decodeSanyo+0xb0>
	results->value       = data;
 80034bc:	6066      	str	r6, [r4, #4]
 80034be:	e7ad      	b.n	800341c <decodeSanyo+0x2c>
 80034c0:	2000009c 	.word	0x2000009c

080034c4 <decodeSony>:
#endif

//+=============================================================================
#if DECODE_SONY
uint8_t decodeSony (decode_results *results)
{
 80034c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	long  data   = 0;
	int   offset = 0;  // Dont skip first space, check its size

	if (irparams.rawlen < (2 * SONY_BITS) + 2)  return false ;
 80034c8:	4b2e      	ldr	r3, [pc, #184]	; (8003584 <decodeSony+0xc0>)
{
 80034ca:	4604      	mov	r4, r0
	if (irparams.rawlen < (2 * SONY_BITS) + 2)  return false ;
 80034cc:	785a      	ldrb	r2, [r3, #1]
 80034ce:	4698      	mov	r8, r3
 80034d0:	2a19      	cmp	r2, #25
 80034d2:	d802      	bhi.n	80034da <decodeSony+0x16>
 80034d4:	2000      	movs	r0, #0
 80034d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	// Some Sony's deliver repeats fast after first
	// unfortunately can't spot difference from of repeat from two fast clicks
	if (results->rawbuf[offset] < SONY_DOUBLE_SPACE_USECS) {
 80034da:	68c2      	ldr	r2, [r0, #12]
 80034dc:	8813      	ldrh	r3, [r2, #0]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80034e4:	d209      	bcs.n	80034fa <decodeSony+0x36>
		// Serial.print("IR Gap found: ");
		results->bits = 0;
 80034e6:	2300      	movs	r3, #0
 80034e8:	8103      	strh	r3, [r0, #8]
		results->value = REPEAT;
 80034ea:	f04f 33ff 	mov.w	r3, #4294967295
 80034ee:	6043      	str	r3, [r0, #4]

#	ifdef DECODE_SANYO
		results->decode_type = SANYO;
 80034f0:	230b      	movs	r3, #11
	if (results->bits < 12) {
		results->bits = 0;
		return false;
	}
	results->value       = data;
	results->decode_type = SONY;
 80034f2:	7023      	strb	r3, [r4, #0]
	return true;
 80034f4:	2001      	movs	r0, #1
}
 80034f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!MATCH_MARK(results->rawbuf[offset++], SONY_HDR_MARK))  return false ;
 80034fa:	8850      	ldrh	r0, [r2, #2]
 80034fc:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8003500:	b280      	uxth	r0, r0
 8003502:	f7ff fa21 	bl	8002948 <MATCH_MARK>
 8003506:	2800      	cmp	r0, #0
 8003508:	d0e4      	beq.n	80034d4 <decodeSony+0x10>
 800350a:	2702      	movs	r7, #2
 800350c:	2600      	movs	r6, #0
	while (offset + 1 < irparams.rawlen) {
 800350e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003512:	1c7d      	adds	r5, r7, #1
 8003514:	42ab      	cmp	r3, r5
 8003516:	dc0a      	bgt.n	800352e <decodeSony+0x6a>
 8003518:	463d      	mov	r5, r7
	results->bits = (offset - 1) / 2;
 800351a:	3d01      	subs	r5, #1
 800351c:	f345 054f 	sbfx	r5, r5, #1, #16
	if (results->bits < 12) {
 8003520:	2d0b      	cmp	r5, #11
	results->bits = (offset - 1) / 2;
 8003522:	8125      	strh	r5, [r4, #8]
	if (results->bits < 12) {
 8003524:	dc2b      	bgt.n	800357e <decodeSony+0xba>
		results->bits = 0;
 8003526:	2000      	movs	r0, #0
 8003528:	8120      	strh	r0, [r4, #8]
		return false;
 800352a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!MATCH_SPACE(results->rawbuf[offset++], SONY_HDR_SPACE))  break ;
 800352e:	68e3      	ldr	r3, [r4, #12]
 8003530:	f44f 7116 	mov.w	r1, #600	; 0x258
 8003534:	f833 0017 	ldrh.w	r0, [r3, r7, lsl #1]
 8003538:	ea4f 0947 	mov.w	r9, r7, lsl #1
 800353c:	b280      	uxth	r0, r0
 800353e:	f7ff fa37 	bl	80029b0 <MATCH_SPACE>
 8003542:	2800      	cmp	r0, #0
 8003544:	d0e9      	beq.n	800351a <decodeSony+0x56>
		if      (MATCH_MARK(results->rawbuf[offset], SONY_ONE_MARK))   data = (data << 1) | 1 ;
 8003546:	68e3      	ldr	r3, [r4, #12]
 8003548:	f109 0902 	add.w	r9, r9, #2
 800354c:	f833 0009 	ldrh.w	r0, [r3, r9]
 8003550:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8003554:	b280      	uxth	r0, r0
 8003556:	f7ff f9f7 	bl	8002948 <MATCH_MARK>
 800355a:	b120      	cbz	r0, 8003566 <decodeSony+0xa2>
 800355c:	0076      	lsls	r6, r6, #1
 800355e:	f046 0601 	orr.w	r6, r6, #1
		offset++;
 8003562:	3702      	adds	r7, #2
 8003564:	e7d3      	b.n	800350e <decodeSony+0x4a>
		else if (MATCH_MARK(results->rawbuf[offset], SONY_ZERO_MARK))  data = (data << 1) | 0 ;
 8003566:	68e3      	ldr	r3, [r4, #12]
 8003568:	f44f 7116 	mov.w	r1, #600	; 0x258
 800356c:	f833 0009 	ldrh.w	r0, [r3, r9]
 8003570:	b280      	uxth	r0, r0
 8003572:	f7ff f9e9 	bl	8002948 <MATCH_MARK>
 8003576:	2800      	cmp	r0, #0
 8003578:	d0ac      	beq.n	80034d4 <decodeSony+0x10>
 800357a:	0076      	lsls	r6, r6, #1
 800357c:	e7f1      	b.n	8003562 <decodeSony+0x9e>
	results->value       = data;
 800357e:	6066      	str	r6, [r4, #4]
	results->decode_type = SONY;
 8003580:	2304      	movs	r3, #4
 8003582:	e7b6      	b.n	80034f2 <decodeSony+0x2e>
 8003584:	2000009c 	.word	0x2000009c

08003588 <decodeWhynter>:
#endif

//+=============================================================================
#if DECODE_WHYNTER
uint8_t decodeWhynter (decode_results *results)
{
 8003588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	long  data   = 0;
	int   offset = 1;  // skip initial space

	// Check we have the right amount of data
	if (irparams.rawlen < (2 * WHYNTER_BITS) + 6)  return false ;
 800358a:	4b31      	ldr	r3, [pc, #196]	; (8003650 <decodeWhynter+0xc8>)
{
 800358c:	4604      	mov	r4, r0
	if (irparams.rawlen < (2 * WHYNTER_BITS) + 6)  return false ;
 800358e:	785b      	ldrb	r3, [r3, #1]
 8003590:	2b45      	cmp	r3, #69	; 0x45
 8003592:	d801      	bhi.n	8003598 <decodeWhynter+0x10>
 8003594:	2000      	movs	r0, #0
 8003596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	// Sequence begins with a bit mark and a zero space
	if (!MATCH_MARK (results->rawbuf[offset++], WHYNTER_BIT_MARK  ))  return false ;
 8003598:	68c3      	ldr	r3, [r0, #12]
 800359a:	f240 21ee 	movw	r1, #750	; 0x2ee
 800359e:	8858      	ldrh	r0, [r3, #2]
 80035a0:	b280      	uxth	r0, r0
 80035a2:	f7ff f9d1 	bl	8002948 <MATCH_MARK>
 80035a6:	2800      	cmp	r0, #0
 80035a8:	d0f4      	beq.n	8003594 <decodeWhynter+0xc>
	if (!MATCH_SPACE(results->rawbuf[offset++], WHYNTER_ZERO_SPACE))  return false ;
 80035aa:	68e3      	ldr	r3, [r4, #12]
 80035ac:	f240 21ee 	movw	r1, #750	; 0x2ee
 80035b0:	8898      	ldrh	r0, [r3, #4]
 80035b2:	b280      	uxth	r0, r0
 80035b4:	f7ff f9fc 	bl	80029b0 <MATCH_SPACE>
 80035b8:	2800      	cmp	r0, #0
 80035ba:	d0eb      	beq.n	8003594 <decodeWhynter+0xc>

	// header mark and space
	if (!MATCH_MARK (results->rawbuf[offset++], WHYNTER_HDR_MARK ))  return false ;
 80035bc:	68e3      	ldr	r3, [r4, #12]
 80035be:	f640 3122 	movw	r1, #2850	; 0xb22
 80035c2:	88d8      	ldrh	r0, [r3, #6]
 80035c4:	b280      	uxth	r0, r0
 80035c6:	f7ff f9bf 	bl	8002948 <MATCH_MARK>
 80035ca:	2800      	cmp	r0, #0
 80035cc:	d0e2      	beq.n	8003594 <decodeWhynter+0xc>
	if (!MATCH_SPACE(results->rawbuf[offset++], WHYNTER_HDR_SPACE))  return false ;
 80035ce:	68e3      	ldr	r3, [r4, #12]
 80035d0:	f640 3122 	movw	r1, #2850	; 0xb22
 80035d4:	8918      	ldrh	r0, [r3, #8]
 80035d6:	b280      	uxth	r0, r0
 80035d8:	f7ff f9ea 	bl	80029b0 <MATCH_SPACE>
 80035dc:	2800      	cmp	r0, #0
 80035de:	d0d9      	beq.n	8003594 <decodeWhynter+0xc>
 80035e0:	2605      	movs	r6, #5
 80035e2:	2500      	movs	r5, #0

	// data bits
	for (int i = 0;  i < WHYNTER_BITS;  i++) {
		if (!MATCH_MARK(results->rawbuf[offset++], WHYNTER_BIT_MARK))  return false ;
 80035e4:	68e3      	ldr	r3, [r4, #12]
 80035e6:	f240 21ee 	movw	r1, #750	; 0x2ee
 80035ea:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 80035ee:	0077      	lsls	r7, r6, #1
 80035f0:	b280      	uxth	r0, r0
 80035f2:	f7ff f9a9 	bl	8002948 <MATCH_MARK>
 80035f6:	2800      	cmp	r0, #0
 80035f8:	d0cc      	beq.n	8003594 <decodeWhynter+0xc>

		if      (MATCH_SPACE(results->rawbuf[offset], WHYNTER_ONE_SPACE ))  data = (data << 1) | 1 ;
 80035fa:	68e3      	ldr	r3, [r4, #12]
 80035fc:	3702      	adds	r7, #2
 80035fe:	5bd8      	ldrh	r0, [r3, r7]
 8003600:	f640 0166 	movw	r1, #2150	; 0x866
 8003604:	b280      	uxth	r0, r0
 8003606:	f7ff f9d3 	bl	80029b0 <MATCH_SPACE>
 800360a:	b1b0      	cbz	r0, 800363a <decodeWhynter+0xb2>
 800360c:	006d      	lsls	r5, r5, #1
 800360e:	f045 0501 	orr.w	r5, r5, #1
		else if (MATCH_SPACE(results->rawbuf[offset], WHYNTER_ZERO_SPACE))  data = (data << 1) | 0 ;
		else                                                                return false ;
		offset++;
 8003612:	3602      	adds	r6, #2
	for (int i = 0;  i < WHYNTER_BITS;  i++) {
 8003614:	2e45      	cmp	r6, #69	; 0x45
 8003616:	d1e5      	bne.n	80035e4 <decodeWhynter+0x5c>
	}

	// trailing mark
	if (!MATCH_MARK(results->rawbuf[offset], WHYNTER_BIT_MARK))  return false ;
 8003618:	68e3      	ldr	r3, [r4, #12]
 800361a:	f240 21ee 	movw	r1, #750	; 0x2ee
 800361e:	f8b3 008a 	ldrh.w	r0, [r3, #138]	; 0x8a
 8003622:	b280      	uxth	r0, r0
 8003624:	f7ff f990 	bl	8002948 <MATCH_MARK>
 8003628:	2800      	cmp	r0, #0
 800362a:	d0b3      	beq.n	8003594 <decodeWhynter+0xc>

	// Success
	results->bits = WHYNTER_BITS;
 800362c:	2320      	movs	r3, #32
 800362e:	8123      	strh	r3, [r4, #8]
	results->value = data;
	results->decode_type = WHYNTER;
 8003630:	2308      	movs	r3, #8
	results->value = data;
 8003632:	6065      	str	r5, [r4, #4]
	results->decode_type = WHYNTER;
 8003634:	7023      	strb	r3, [r4, #0]
	return true;
 8003636:	2001      	movs	r0, #1
}
 8003638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		else if (MATCH_SPACE(results->rawbuf[offset], WHYNTER_ZERO_SPACE))  data = (data << 1) | 0 ;
 800363a:	68e3      	ldr	r3, [r4, #12]
 800363c:	f240 21ee 	movw	r1, #750	; 0x2ee
 8003640:	5bd8      	ldrh	r0, [r3, r7]
 8003642:	b280      	uxth	r0, r0
 8003644:	f7ff f9b4 	bl	80029b0 <MATCH_SPACE>
 8003648:	2800      	cmp	r0, #0
 800364a:	d0a3      	beq.n	8003594 <decodeWhynter+0xc>
 800364c:	006d      	lsls	r5, r5, #1
 800364e:	e7e0      	b.n	8003612 <decodeWhynter+0x8a>
 8003650:	2000009c 	.word	0x2000009c

08003654 <I2C_WriteBuffer>:
/* USER CODE END WHILE */

  /* USER CODE END TIM3_IRQn 1 */
}

void I2C_WriteBuffer(uint8_t I2C_ADDRESS, uint8_t *aTxBuffer, uint8_t TXBUFFERSIZE) {
 8003654:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003658:	460d      	mov	r5, r1
    while(HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)I2C_ADDRESS<<1, (uint8_t*)aTxBuffer, (uint16_t)TXBUFFERSIZE, (uint32_t)1000)!= HAL_OK){
 800365a:	4616      	mov	r6, r2
 800365c:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 8003660:	f8df 802c 	ldr.w	r8, [pc, #44]	; 8003690 <I2C_WriteBuffer+0x3c>
 8003664:	0044      	lsls	r4, r0, #1
 8003666:	9700      	str	r7, [sp, #0]
 8003668:	4633      	mov	r3, r6
 800366a:	462a      	mov	r2, r5
 800366c:	4621      	mov	r1, r4
 800366e:	4808      	ldr	r0, [pc, #32]	; (8003690 <I2C_WriteBuffer+0x3c>)
 8003670:	f7fd ff80 	bl	8001574 <HAL_I2C_Master_Transmit>
 8003674:	b940      	cbnz	r0, 8003688 <I2C_WriteBuffer+0x34>
         //   _Error_Handler(__FILE__, aTxBuffer[0]);
        }

    }

      while (HAL_I2C_GetState(&hi2c2) != HAL_I2C_STATE_READY){}
 8003676:	4c06      	ldr	r4, [pc, #24]	; (8003690 <I2C_WriteBuffer+0x3c>)
 8003678:	4620      	mov	r0, r4
 800367a:	f7fe f9d3 	bl	8001a24 <HAL_I2C_GetState>
 800367e:	2820      	cmp	r0, #32
 8003680:	d1fa      	bne.n	8003678 <I2C_WriteBuffer+0x24>
}
 8003682:	b002      	add	sp, #8
 8003684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (HAL_I2C_GetError(&hi2c2) != HAL_I2C_ERROR_AF){
 8003688:	4640      	mov	r0, r8
 800368a:	f7fe f9ce 	bl	8001a2a <HAL_I2C_GetError>
 800368e:	e7ea      	b.n	8003666 <I2C_WriteBuffer+0x12>
 8003690:	20000310 	.word	0x20000310

08003694 <I2C_ReadBuffer>:

void I2C_ReadBuffer(uint8_t I2C_ADDRESS, uint8_t RegAddr, uint8_t *aRxBuffer, uint8_t RXBUFFERSIZE){
 8003694:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003698:	461d      	mov	r5, r3
 800369a:	ab04      	add	r3, sp, #16
 800369c:	f803 1d01 	strb.w	r1, [r3, #-1]!
 80036a0:	4604      	mov	r4, r0
 80036a2:	4616      	mov	r6, r2

    I2C_WriteBuffer(I2C_ADDRESS, &RegAddr, 1);
 80036a4:	4619      	mov	r1, r3
 80036a6:	2201      	movs	r2, #1
 80036a8:	f7ff ffd4 	bl	8003654 <I2C_WriteBuffer>

    while(HAL_I2C_Master_Receive(&hi2c2, (uint16_t)I2C_ADDRESS<<1, aRxBuffer, (uint16_t)RXBUFFERSIZE, (uint32_t)1000) != HAL_OK){
 80036ac:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 80036b0:	f8df 8030 	ldr.w	r8, [pc, #48]	; 80036e4 <I2C_ReadBuffer+0x50>
 80036b4:	0064      	lsls	r4, r4, #1
 80036b6:	b2ad      	uxth	r5, r5
 80036b8:	9700      	str	r7, [sp, #0]
 80036ba:	462b      	mov	r3, r5
 80036bc:	4632      	mov	r2, r6
 80036be:	4621      	mov	r1, r4
 80036c0:	4808      	ldr	r0, [pc, #32]	; (80036e4 <I2C_ReadBuffer+0x50>)
 80036c2:	f7fe f82d 	bl	8001720 <HAL_I2C_Master_Receive>
 80036c6:	b940      	cbnz	r0, 80036da <I2C_ReadBuffer+0x46>
        if (HAL_I2C_GetError(&hi2c2) != HAL_I2C_ERROR_AF){
          //  _Error_Handler(__FILE__, __LINE__);
        }
    }

    while (HAL_I2C_GetState(&hi2c2) != HAL_I2C_STATE_READY){}
 80036c8:	4c06      	ldr	r4, [pc, #24]	; (80036e4 <I2C_ReadBuffer+0x50>)
 80036ca:	4620      	mov	r0, r4
 80036cc:	f7fe f9aa 	bl	8001a24 <HAL_I2C_GetState>
 80036d0:	2820      	cmp	r0, #32
 80036d2:	d1fa      	bne.n	80036ca <I2C_ReadBuffer+0x36>
}
 80036d4:	b004      	add	sp, #16
 80036d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (HAL_I2C_GetError(&hi2c2) != HAL_I2C_ERROR_AF){
 80036da:	4640      	mov	r0, r8
 80036dc:	f7fe f9a5 	bl	8001a2a <HAL_I2C_GetError>
 80036e0:	e7ea      	b.n	80036b8 <I2C_ReadBuffer+0x24>
 80036e2:	bf00      	nop
 80036e4:	20000310 	.word	0x20000310

080036e8 <MPU6050_Init>:
void MPU6050_Init(void){

    uint8_t buffer[7];

    // включение/побудка модуля
    buffer[0] = MPU6050_RA_PWR_MGMT_1;
 80036e8:	236b      	movs	r3, #107	; 0x6b
void MPU6050_Init(void){
 80036ea:	b507      	push	{r0, r1, r2, lr}
    buffer[0] = MPU6050_RA_PWR_MGMT_1;
 80036ec:	f88d 3000 	strb.w	r3, [sp]
    buffer[1] = 0x00;
 80036f0:	2300      	movs	r3, #0
    I2C_WriteBuffer(MPU6050_ADDRESS_AD0_LOW,buffer,2);
 80036f2:	4669      	mov	r1, sp
 80036f4:	2202      	movs	r2, #2
 80036f6:	2068      	movs	r0, #104	; 0x68
    buffer[1] = 0x00;
 80036f8:	f88d 3001 	strb.w	r3, [sp, #1]
    I2C_WriteBuffer(MPU6050_ADDRESS_AD0_LOW,buffer,2);
 80036fc:	f7ff ffaa 	bl	8003654 <I2C_WriteBuffer>

    // конфиг гироскопа на ±500°/с
    buffer[0] = MPU6050_RA_GYRO_CONFIG;
 8003700:	231b      	movs	r3, #27
 8003702:	f88d 3000 	strb.w	r3, [sp]
    buffer[1] = 0x8;
 8003706:	2308      	movs	r3, #8
    I2C_WriteBuffer(MPU6050_ADDRESS_AD0_LOW,buffer,2);
 8003708:	4669      	mov	r1, sp
 800370a:	2202      	movs	r2, #2
 800370c:	2068      	movs	r0, #104	; 0x68
    buffer[1] = 0x8;
 800370e:	f88d 3001 	strb.w	r3, [sp, #1]
    I2C_WriteBuffer(MPU6050_ADDRESS_AD0_LOW,buffer,2);
 8003712:	f7ff ff9f 	bl	8003654 <I2C_WriteBuffer>

    // конфиг акселерометра на ±8g
    buffer[0] = MPU6050_RA_ACCEL_CONFIG;
 8003716:	231c      	movs	r3, #28
 8003718:	f88d 3000 	strb.w	r3, [sp]
    buffer[1] = 0x10;
 800371c:	2310      	movs	r3, #16
    I2C_WriteBuffer(MPU6050_ADDRESS_AD0_LOW,buffer,2);
 800371e:	2202      	movs	r2, #2
 8003720:	4669      	mov	r1, sp
 8003722:	2068      	movs	r0, #104	; 0x68
    buffer[1] = 0x10;
 8003724:	f88d 3001 	strb.w	r3, [sp, #1]
    I2C_WriteBuffer(MPU6050_ADDRESS_AD0_LOW,buffer,2);
 8003728:	f7ff ff94 	bl	8003654 <I2C_WriteBuffer>
}
 800372c:	b003      	add	sp, #12
 800372e:	f85d fb04 	ldr.w	pc, [sp], #4

08003732 <MPU6050_GetAllData>:
  fAY_Cal /= iNumCM;
  fAZ_Cal /= iNumCM;

}

void MPU6050_GetAllData(int16_t *Data){
 8003732:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  uint8_t accelbuffer[14];

  // с 0x3B 14 следующих регистров содержат данные измерения модуля
  I2C_ReadBuffer(MPU6050_ADDRESS_AD0_LOW,MPU6050_RA_ACCEL_XOUT_H,accelbuffer,14);
 8003734:	230e      	movs	r3, #14
 8003736:	213b      	movs	r1, #59	; 0x3b
void MPU6050_GetAllData(int16_t *Data){
 8003738:	4604      	mov	r4, r0
  I2C_ReadBuffer(MPU6050_ADDRESS_AD0_LOW,MPU6050_RA_ACCEL_XOUT_H,accelbuffer,14);
 800373a:	466a      	mov	r2, sp
 800373c:	2068      	movs	r0, #104	; 0x68
 800373e:	f7ff ffa9 	bl	8003694 <I2C_ReadBuffer>
 8003742:	2300      	movs	r3, #0

  /* Registers 59 to 64 – Accelerometer Measurements */
  for (int i = 0; i< 3; i++)
      Data[i] = (((int16_t) ((uint16_t) accelbuffer[2 * i] << 8) + accelbuffer[2 * i + 1]))/10;
 8003744:	210a      	movs	r1, #10
 8003746:	eb0d 0203 	add.w	r2, sp, r3
 800374a:	f91d 0003 	ldrsb.w	r0, [sp, r3]
 800374e:	7852      	ldrb	r2, [r2, #1]
 8003750:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 8003754:	fb92 f2f1 	sdiv	r2, r2, r1
 8003758:	52e2      	strh	r2, [r4, r3]
 800375a:	3302      	adds	r3, #2
  for (int i = 0; i< 3; i++)
 800375c:	2b06      	cmp	r3, #6
 800375e:	d1f2      	bne.n	8003746 <MPU6050_GetAllData+0x14>
  /* Registers 65 and 66 – Temperature Measurement */
  //пока пропускаем Temperature in degrees C = (TEMP_OUT Register Value as a signed quantity)/340 + 36.53

  /* Registers 67 to 72 – Gyroscope Measurements */
  for (int i = 4; i < 7; i++)
      Data[i - 1] = ((int16_t) ((uint16_t) accelbuffer[2 * i] << 8) + accelbuffer[2 * i + 1]);
 8003760:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8003764:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8003768:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800376c:	80e3      	strh	r3, [r4, #6]
 800376e:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8003772:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003776:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800377a:	8123      	strh	r3, [r4, #8]
 800377c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8003780:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8003784:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003788:	8163      	strh	r3, [r4, #10]

}
 800378a:	b004      	add	sp, #16
 800378c:	bd10      	pop	{r4, pc}
	...

08003790 <TIM1_UP_IRQHandler>:
   MPU6050_GetAllData(mpu6050data);
 8003790:	4801      	ldr	r0, [pc, #4]	; (8003798 <TIM1_UP_IRQHandler+0x8>)
 8003792:	f7ff bfce 	b.w	8003732 <MPU6050_GetAllData>
 8003796:	bf00      	nop
 8003798:	200002c4 	.word	0x200002c4

0800379c <MPU6050_Calibrate>:
void MPU6050_Calibrate(void){
 800379c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800379e:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    fAX_Cal += mpu6050data[0];
 80037a2:	4e1a      	ldr	r6, [pc, #104]	; (800380c <MPU6050_Calibrate+0x70>)
    fAY_Cal += mpu6050data[1];
 80037a4:	4d1a      	ldr	r5, [pc, #104]	; (8003810 <MPU6050_Calibrate+0x74>)
    fAZ_Cal += mpu6050data[2];
 80037a6:	4c1b      	ldr	r4, [pc, #108]	; (8003814 <MPU6050_Calibrate+0x78>)
void MPU6050_Calibrate(void){
 80037a8:	b085      	sub	sp, #20
    MPU6050_GetAllData(mpu6050data);
 80037aa:	a801      	add	r0, sp, #4
 80037ac:	f7ff ffc1 	bl	8003732 <MPU6050_GetAllData>
    fAX_Cal += mpu6050data[0];
 80037b0:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 80037b4:	f7fd fa08 	bl	8000bc8 <__aeabi_i2f>
 80037b8:	6831      	ldr	r1, [r6, #0]
 80037ba:	f7fd f951 	bl	8000a60 <__addsf3>
 80037be:	6030      	str	r0, [r6, #0]
    fAY_Cal += mpu6050data[1];
 80037c0:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 80037c4:	f7fd fa00 	bl	8000bc8 <__aeabi_i2f>
 80037c8:	6829      	ldr	r1, [r5, #0]
 80037ca:	f7fd f949 	bl	8000a60 <__addsf3>
 80037ce:	6028      	str	r0, [r5, #0]
    fAZ_Cal += mpu6050data[2];
 80037d0:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 80037d4:	f7fd f9f8 	bl	8000bc8 <__aeabi_i2f>
 80037d8:	6821      	ldr	r1, [r4, #0]
 80037da:	f7fd f941 	bl	8000a60 <__addsf3>
 80037de:	6020      	str	r0, [r4, #0]
    HAL_Delay(3); // 3 сек на калибровку
 80037e0:	2003      	movs	r0, #3
 80037e2:	f7fd fbdd 	bl	8000fa0 <HAL_Delay>
  for (int i = 0; i < iNumCM ; i ++){
 80037e6:	3f01      	subs	r7, #1
 80037e8:	d1df      	bne.n	80037aa <MPU6050_Calibrate+0xe>
  fAX_Cal /= iNumCM;
 80037ea:	6830      	ldr	r0, [r6, #0]
 80037ec:	490a      	ldr	r1, [pc, #40]	; (8003818 <MPU6050_Calibrate+0x7c>)
 80037ee:	f7fd faf3 	bl	8000dd8 <__aeabi_fdiv>
  fAY_Cal /= iNumCM;
 80037f2:	4909      	ldr	r1, [pc, #36]	; (8003818 <MPU6050_Calibrate+0x7c>)
  fAX_Cal /= iNumCM;
 80037f4:	6030      	str	r0, [r6, #0]
  fAY_Cal /= iNumCM;
 80037f6:	6828      	ldr	r0, [r5, #0]
 80037f8:	f7fd faee 	bl	8000dd8 <__aeabi_fdiv>
  fAZ_Cal /= iNumCM;
 80037fc:	4906      	ldr	r1, [pc, #24]	; (8003818 <MPU6050_Calibrate+0x7c>)
  fAY_Cal /= iNumCM;
 80037fe:	6028      	str	r0, [r5, #0]
  fAZ_Cal /= iNumCM;
 8003800:	6820      	ldr	r0, [r4, #0]
 8003802:	f7fd fae9 	bl	8000dd8 <__aeabi_fdiv>
 8003806:	6020      	str	r0, [r4, #0]
}
 8003808:	b005      	add	sp, #20
 800380a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800380c:	20000684 	.word	0x20000684
 8003810:	200005c4 	.word	0x200005c4
 8003814:	200005e0 	.word	0x200005e0
 8003818:	447a0000 	.word	0x447a0000

0800381c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800381c:	b510      	push	{r4, lr}
 800381e:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003820:	2228      	movs	r2, #40	; 0x28
 8003822:	2100      	movs	r1, #0
 8003824:	a806      	add	r0, sp, #24
 8003826:	f000 fb2f 	bl	8003e88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800382a:	2100      	movs	r1, #0
 800382c:	2214      	movs	r2, #20
 800382e:	a801      	add	r0, sp, #4
 8003830:	f000 fb2a 	bl	8003e88 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003834:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003838:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800383a:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800383c:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800383e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003840:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003844:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003846:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003848:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800384a:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800384c:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800384e:	f7fe f8ef 	bl	8001a30 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003852:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003854:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003858:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800385a:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800385c:	4621      	mov	r1, r4
 800385e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003860:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003862:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003864:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003866:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003868:	f7fe faaa 	bl	8001dc0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800386c:	b010      	add	sp, #64	; 0x40
 800386e:	bd10      	pop	{r4, pc}

08003870 <main>:
{
 8003870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003874:	b0ab      	sub	sp, #172	; 0xac
  HAL_Init();
 8003876:	f7fd fb6f 	bl	8000f58 <HAL_Init>
  SystemClock_Config();
 800387a:	f7ff ffcf 	bl	800381c <SystemClock_Config>
  * @retval None
  */
static void MX_GPIO_Init(void)
{

	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 800387e:	2210      	movs	r2, #16
 8003880:	2100      	movs	r1, #0
 8003882:	a812      	add	r0, sp, #72	; 0x48
 8003884:	f000 fb00 	bl	8003e88 <memset>

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003888:	4b93      	ldr	r3, [pc, #588]	; (8003ad8 <main+0x268>)
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800388a:	2400      	movs	r4, #0
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 800388c:	699a      	ldr	r2, [r3, #24]

	  /*Configure GPIO pin : recive_IR_Pin */
	  GPIO_InitStruct.Pin = recive_IR_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  HAL_GPIO_Init(recive_IR_GPIO_Port, &GPIO_InitStruct);
 800388e:	a912      	add	r1, sp, #72	; 0x48
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003890:	f042 0220 	orr.w	r2, r2, #32
 8003894:	619a      	str	r2, [r3, #24]
 8003896:	699a      	ldr	r2, [r3, #24]
	  HAL_GPIO_Init(recive_IR_GPIO_Port, &GPIO_InitStruct);
 8003898:	4890      	ldr	r0, [pc, #576]	; (8003adc <main+0x26c>)
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 800389a:	f002 0220 	and.w	r2, r2, #32
 800389e:	9203      	str	r2, [sp, #12]
 80038a0:	9a03      	ldr	r2, [sp, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038a2:	699a      	ldr	r2, [r3, #24]
  huart1.Instance = USART1;
 80038a4:	4e8e      	ldr	r6, [pc, #568]	; (8003ae0 <main+0x270>)
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038a6:	f042 0204 	orr.w	r2, r2, #4
 80038aa:	619a      	str	r2, [r3, #24]
 80038ac:	699a      	ldr	r2, [r3, #24]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038ae:	f44f 5880 	mov.w	r8, #4096	; 0x1000
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038b2:	f002 0204 	and.w	r2, r2, #4
 80038b6:	9204      	str	r2, [sp, #16]
 80038b8:	9a04      	ldr	r2, [sp, #16]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ba:	699a      	ldr	r2, [r3, #24]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038bc:	2760      	movs	r7, #96	; 0x60
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038be:	f042 0208 	orr.w	r2, r2, #8
 80038c2:	619a      	str	r2, [r3, #24]
 80038c4:	699b      	ldr	r3, [r3, #24]
  htim4.Instance = TIM4;
 80038c6:	4d87      	ldr	r5, [pc, #540]	; (8003ae4 <main+0x274>)
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038c8:	f003 0308 	and.w	r3, r3, #8
 80038cc:	9305      	str	r3, [sp, #20]
 80038ce:	9b05      	ldr	r3, [sp, #20]
	  GPIO_InitStruct.Pin = recive_IR_Pin;
 80038d0:	2320      	movs	r3, #32
 80038d2:	9312      	str	r3, [sp, #72]	; 0x48
	  HAL_GPIO_Init(recive_IR_GPIO_Port, &GPIO_InitStruct);
 80038d4:	f7fd fbec 	bl	80010b0 <HAL_GPIO_Init>
  hi2c2.Instance = I2C2;
 80038d8:	4883      	ldr	r0, [pc, #524]	; (8003ae8 <main+0x278>)
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80038da:	4a84      	ldr	r2, [pc, #528]	; (8003aec <main+0x27c>)
 80038dc:	4b84      	ldr	r3, [pc, #528]	; (8003af0 <main+0x280>)
  hi2c2.Init.OwnAddress1 = 0;
 80038de:	60c4      	str	r4, [r0, #12]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80038e0:	e880 001c 	stmia.w	r0, {r2, r3, r4}
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80038e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80038e8:	6144      	str	r4, [r0, #20]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80038ea:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80038ec:	6184      	str	r4, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80038ee:	61c4      	str	r4, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80038f0:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80038f2:	f7fd fdbf 	bl	8001474 <HAL_I2C_Init>
  huart1.Init.BaudRate = 115200;
 80038f6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80038fa:	497e      	ldr	r1, [pc, #504]	; (8003af4 <main+0x284>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80038fc:	4630      	mov	r0, r6
  huart1.Init.BaudRate = 115200;
 80038fe:	e886 000a 	stmia.w	r6, {r1, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003902:	230c      	movs	r3, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003904:	60b4      	str	r4, [r6, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003906:	6173      	str	r3, [r6, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003908:	60f4      	str	r4, [r6, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800390a:	6134      	str	r4, [r6, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800390c:	61b4      	str	r4, [r6, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800390e:	61f4      	str	r4, [r6, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003910:	f7fe ff08 	bl	8002724 <HAL_UART_Init>
  MPU6050_Init();
 8003914:	f7ff fee8 	bl	80036e8 <MPU6050_Init>
  MPU6050_Calibrate();
 8003918:	f7ff ff40 	bl	800379c <MPU6050_Calibrate>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800391c:	2210      	movs	r2, #16
 800391e:	4621      	mov	r1, r4
 8003920:	a808      	add	r0, sp, #32
 8003922:	f000 fab1 	bl	8003e88 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003926:	221c      	movs	r2, #28
 8003928:	4621      	mov	r1, r4
 800392a:	a812      	add	r0, sp, #72	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800392c:	9406      	str	r4, [sp, #24]
 800392e:	9407      	str	r4, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003930:	f000 faaa 	bl	8003e88 <memset>
  htim4.Instance = TIM4;
 8003934:	4b70      	ldr	r3, [pc, #448]	; (8003af8 <main+0x288>)
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003936:	4628      	mov	r0, r5
  htim4.Init.Prescaler = 0;
 8003938:	e885 0018 	stmia.w	r5, {r3, r4}
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800393c:	60ac      	str	r4, [r5, #8]
  htim4.Init.Period = 0;
 800393e:	60ec      	str	r4, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003940:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003942:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003944:	f7fe fd42 	bl	80023cc <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003948:	a908      	add	r1, sp, #32
 800394a:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800394c:	f8cd 8020 	str.w	r8, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003950:	f7fe fba5 	bl	800209e <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003954:	4628      	mov	r0, r5
 8003956:	f7fe fd53 	bl	8002400 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800395a:	a906      	add	r1, sp, #24
 800395c:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800395e:	9406      	str	r4, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003960:	9407      	str	r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003962:	f7fe fdf5 	bl	8002550 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003966:	4622      	mov	r2, r4
 8003968:	a912      	add	r1, sp, #72	; 0x48
 800396a:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800396c:	9712      	str	r7, [sp, #72]	; 0x48
  sConfigOC.Pulse = 0;
 800396e:	9413      	str	r4, [sp, #76]	; 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003970:	9414      	str	r4, [sp, #80]	; 0x50
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003972:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003974:	f7fe fd8a 	bl	800248c <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim4);
 8003978:	4628      	mov	r0, r5
 800397a:	f000 f95f 	bl	8003c3c <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800397e:	2210      	movs	r2, #16
 8003980:	4621      	mov	r1, r4
 8003982:	a812      	add	r0, sp, #72	; 0x48
 8003984:	f000 fa80 	bl	8003e88 <memset>
  htim1.Init.Prescaler = 719;
 8003988:	f240 23cf 	movw	r3, #719	; 0x2cf
  htim1.Instance = TIM1;
 800398c:	4d5b      	ldr	r5, [pc, #364]	; (8003afc <main+0x28c>)
  htim1.Init.Prescaler = 719;
 800398e:	485c      	ldr	r0, [pc, #368]	; (8003b00 <main+0x290>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003990:	9408      	str	r4, [sp, #32]
  htim1.Init.Prescaler = 719;
 8003992:	e885 0009 	stmia.w	r5, {r0, r3}
  htim1.Init.Period = 300;
 8003996:	f44f 7396 	mov.w	r3, #300	; 0x12c
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800399a:	4628      	mov	r0, r5
  htim1.Init.Period = 300;
 800399c:	60eb      	str	r3, [r5, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800399e:	9409      	str	r4, [sp, #36]	; 0x24
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039a0:	60ac      	str	r4, [r5, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039a2:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 80039a4:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039a6:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80039a8:	f7fe fd10 	bl	80023cc <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80039ac:	a912      	add	r1, sp, #72	; 0x48
 80039ae:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039b0:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80039b4:	f7fe fb73 	bl	800209e <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80039b8:	a908      	add	r1, sp, #32
 80039ba:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039bc:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039be:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80039c0:	f7fe fdc6 	bl	8002550 <HAL_TIMEx_MasterConfigSynchronization>
  	  MPU6050_GetAllData(mpu6050data);
 80039c4:	484f      	ldr	r0, [pc, #316]	; (8003b04 <main+0x294>)
 80039c6:	f7ff feb4 	bl	8003732 <MPU6050_GetAllData>
  	char trans_str[96] = {0,};
 80039ca:	463a      	mov	r2, r7
 80039cc:	4621      	mov	r1, r4
 80039ce:	a812      	add	r0, sp, #72	; 0x48
 80039d0:	f000 fa5a 	bl	8003e88 <memset>
    snprintf(trans_str, 64, "IR-rec-trans https://istarik.ru/blog/stm32/125.html\n");
 80039d4:	494c      	ldr	r1, [pc, #304]	; (8003b08 <main+0x298>)
 80039d6:	a812      	add	r0, sp, #72	; 0x48
 80039d8:	f000 fab6 	bl	8003f48 <strcpy>
    HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 100);
 80039dc:	a812      	add	r0, sp, #72	; 0x48
 80039de:	f7fc fbb7 	bl	8000150 <strlen>
 80039e2:	2364      	movs	r3, #100	; 0x64
 80039e4:	b282      	uxth	r2, r0
 80039e6:	a912      	add	r1, sp, #72	; 0x48
 80039e8:	4630      	mov	r0, r6
 80039ea:	f7fe fec9 	bl	8002780 <HAL_UART_Transmit>
    my_enableIRIn(); // РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ
 80039ee:	f7ff f813 	bl	8002a18 <my_enableIRIn>
	  uint16_t len = sprintf(msg, "axel: x:%i y:%i z:%i\r\n", (int16_t)(floor(mpu6050data[0]-fAX_Cal)), (int16_t)(floor(mpu6050data[1]-fAY_Cal)), (int16_t)(floor(mpu6050data[2]-fAZ_Cal)));
 80039f2:	f8df a110 	ldr.w	sl, [pc, #272]	; 8003b04 <main+0x294>
 80039f6:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8003b24 <main+0x2b4>
 80039fa:	f9ba 0000 	ldrsh.w	r0, [sl]
 80039fe:	f7fd f8e3 	bl	8000bc8 <__aeabi_i2f>
 8003a02:	4b42      	ldr	r3, [pc, #264]	; (8003b0c <main+0x29c>)
 8003a04:	6819      	ldr	r1, [r3, #0]
 8003a06:	f7fd f829 	bl	8000a5c <__aeabi_fsub>
 8003a0a:	f7fc fd0d 	bl	8000428 <__aeabi_f2d>
 8003a0e:	f000 feab 	bl	8004768 <floor>
 8003a12:	4606      	mov	r6, r0
 8003a14:	f9ba 0002 	ldrsh.w	r0, [sl, #2]
 8003a18:	460f      	mov	r7, r1
 8003a1a:	f7fd f8d5 	bl	8000bc8 <__aeabi_i2f>
 8003a1e:	f8db 1000 	ldr.w	r1, [fp]
 8003a22:	f7fd f81b 	bl	8000a5c <__aeabi_fsub>
 8003a26:	f7fc fcff 	bl	8000428 <__aeabi_f2d>
 8003a2a:	f000 fe9d 	bl	8004768 <floor>
 8003a2e:	4680      	mov	r8, r0
 8003a30:	f9ba 0004 	ldrsh.w	r0, [sl, #4]
 8003a34:	4689      	mov	r9, r1
 8003a36:	f7fd f8c7 	bl	8000bc8 <__aeabi_i2f>
 8003a3a:	4b35      	ldr	r3, [pc, #212]	; (8003b10 <main+0x2a0>)
 8003a3c:	6819      	ldr	r1, [r3, #0]
 8003a3e:	f7fd f80d 	bl	8000a5c <__aeabi_fsub>
 8003a42:	f7fc fcf1 	bl	8000428 <__aeabi_f2d>
 8003a46:	f000 fe8f 	bl	8004768 <floor>
 8003a4a:	4604      	mov	r4, r0
 8003a4c:	460d      	mov	r5, r1
 8003a4e:	4640      	mov	r0, r8
 8003a50:	4649      	mov	r1, r9
 8003a52:	f7fc ffd7 	bl	8000a04 <__aeabi_d2iz>
 8003a56:	4639      	mov	r1, r7
 8003a58:	fa0f f880 	sxth.w	r8, r0
 8003a5c:	4630      	mov	r0, r6
 8003a5e:	f7fc ffd1 	bl	8000a04 <__aeabi_d2iz>
 8003a62:	4629      	mov	r1, r5
 8003a64:	b206      	sxth	r6, r0
 8003a66:	4620      	mov	r0, r4
 8003a68:	f7fc ffcc 	bl	8000a04 <__aeabi_d2iz>
 8003a6c:	b200      	sxth	r0, r0
 8003a6e:	9000      	str	r0, [sp, #0]
 8003a70:	4643      	mov	r3, r8
 8003a72:	4632      	mov	r2, r6
 8003a74:	4927      	ldr	r1, [pc, #156]	; (8003b14 <main+0x2a4>)
 8003a76:	a808      	add	r0, sp, #32
 8003a78:	f000 fa42 	bl	8003f00 <siprintf>
	  if(my_decode(&results))
 8003a7c:	4c26      	ldr	r4, [pc, #152]	; (8003b18 <main+0x2a8>)
	  HAL_UART_Transmit(&huart1, (uint8_t*) msg, len, HAL_MAX_DELAY);
 8003a7e:	b282      	uxth	r2, r0
 8003a80:	f04f 33ff 	mov.w	r3, #4294967295
 8003a84:	a908      	add	r1, sp, #32
 8003a86:	4816      	ldr	r0, [pc, #88]	; (8003ae0 <main+0x270>)
 8003a88:	f7fe fe7a 	bl	8002780 <HAL_UART_Transmit>
	  if(my_decode(&results))
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	f7ff f861 	bl	8002b54 <my_decode>
 8003a92:	2800      	cmp	r0, #0
 8003a94:	d0b1      	beq.n	80039fa <main+0x18a>
	  		snprintf(trans_str, 96, "Cod: %p | Type: %s | Bits: %d\n", (void*)results.value, decode_str[results.decode_type + 1], results.bits);
 8003a96:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8003a9a:	4a20      	ldr	r2, [pc, #128]	; (8003b1c <main+0x2ac>)
 8003a9c:	9301      	str	r3, [sp, #4]
 8003a9e:	f994 3000 	ldrsb.w	r3, [r4]
 8003aa2:	2160      	movs	r1, #96	; 0x60
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aaa:	a812      	add	r0, sp, #72	; 0x48
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	6863      	ldr	r3, [r4, #4]
 8003ab0:	4a1b      	ldr	r2, [pc, #108]	; (8003b20 <main+0x2b0>)
 8003ab2:	f000 f9f1 	bl	8003e98 <sniprintf>
	  		HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 100);
 8003ab6:	a812      	add	r0, sp, #72	; 0x48
 8003ab8:	f7fc fb4a 	bl	8000150 <strlen>
 8003abc:	2364      	movs	r3, #100	; 0x64
 8003abe:	b282      	uxth	r2, r0
 8003ac0:	a912      	add	r1, sp, #72	; 0x48
 8003ac2:	4807      	ldr	r0, [pc, #28]	; (8003ae0 <main+0x270>)
 8003ac4:	f7fe fe5c 	bl	8002780 <HAL_UART_Transmit>
	  		HAL_Delay(300); // РЅРµР±РѕР»СЊС€Р°СЏ РїР°СѓР·Р° (С‚РёРїР° РѕС‚ "РґСЂРµР±РµР·РіР°"), Р° С‚Рѕ Р±СѓРґРµС‚ Р»РѕРІРёС‚СЊ СЃР»РµРґСѓСЋС‰РёР№ СЃРёРіРЅР°Р»
 8003ac8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003acc:	f7fd fa68 	bl	8000fa0 <HAL_Delay>
	  		my_resume();
 8003ad0:	f7fe ffda 	bl	8002a88 <my_resume>
  {
 8003ad4:	e791      	b.n	80039fa <main+0x18a>
 8003ad6:	bf00      	nop
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	40010c00 	.word	0x40010c00
 8003ae0:	200005f4 	.word	0x200005f4
 8003ae4:	200002d0 	.word	0x200002d0
 8003ae8:	20000310 	.word	0x20000310
 8003aec:	40005800 	.word	0x40005800
 8003af0:	000186a0 	.word	0x000186a0
 8003af4:	40013800 	.word	0x40013800
 8003af8:	40000800 	.word	0x40000800
 8003afc:	20000638 	.word	0x20000638
 8003b00:	40012c00 	.word	0x40012c00
 8003b04:	200002c4 	.word	0x200002c4
 8003b08:	080048e0 	.word	0x080048e0
 8003b0c:	20000684 	.word	0x20000684
 8003b10:	200005e0 	.word	0x200005e0
 8003b14:	08004915 	.word	0x08004915
 8003b18:	200002a4 	.word	0x200002a4
 8003b1c:	08004898 	.word	0x08004898
 8003b20:	0800492c 	.word	0x0800492c
 8003b24:	200005c4 	.word	0x200005c4

08003b28 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003b28:	4b0e      	ldr	r3, [pc, #56]	; (8003b64 <HAL_MspInit+0x3c>)
{
 8003b2a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003b2c:	699a      	ldr	r2, [r3, #24]
 8003b2e:	f042 0201 	orr.w	r2, r2, #1
 8003b32:	619a      	str	r2, [r3, #24]
 8003b34:	699a      	ldr	r2, [r3, #24]
 8003b36:	f002 0201 	and.w	r2, r2, #1
 8003b3a:	9200      	str	r2, [sp, #0]
 8003b3c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b3e:	69da      	ldr	r2, [r3, #28]
 8003b40:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003b44:	61da      	str	r2, [r3, #28]
 8003b46:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003b48:	4a07      	ldr	r2, [pc, #28]	; (8003b68 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4e:	9301      	str	r3, [sp, #4]
 8003b50:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003b52:	6853      	ldr	r3, [r2, #4]
 8003b54:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003b58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b5e:	b002      	add	sp, #8
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40021000 	.word	0x40021000
 8003b68:	40010000 	.word	0x40010000

08003b6c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM4)
 8003b6c:	6802      	ldr	r2, [r0, #0]
 8003b6e:	4b18      	ldr	r3, [pc, #96]	; (8003bd0 <HAL_TIM_Base_MspInit+0x64>)
{
 8003b70:	b513      	push	{r0, r1, r4, lr}
  if(htim_base->Instance==TIM4)
 8003b72:	429a      	cmp	r2, r3
{
 8003b74:	4604      	mov	r4, r0
  if(htim_base->Instance==TIM4)
 8003b76:	d112      	bne.n	8003b9e <HAL_TIM_Base_MspInit+0x32>
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */

    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b78:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003b7c:	69da      	ldr	r2, [r3, #28]
    /* TIM4 interrupt Init */

    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003b7e:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b80:	f042 0204 	orr.w	r2, r2, #4
 8003b84:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003b86:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b88:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003b8a:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003b94:	f7fd fa28 	bl	8000fe8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003b98:	201e      	movs	r0, #30
 8003b9a:	f7fd fa59 	bl	8001050 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

  if(htim_base->Instance==TIM1)
 8003b9e:	6822      	ldr	r2, [r4, #0]
 8003ba0:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <HAL_TIM_Base_MspInit+0x68>)
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d112      	bne.n	8003bcc <HAL_TIM_Base_MspInit+0x60>
   {
   /* USER CODE BEGIN TIM1_MspInit 0 */

   /* USER CODE END TIM1_MspInit 0 */
     /* Peripheral clock enable */
     __HAL_RCC_TIM1_CLK_ENABLE();
 8003ba6:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8003baa:	699a      	ldr	r2, [r3, #24]
     /* TIM1 interrupt Init */
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8003bac:	2019      	movs	r0, #25
     __HAL_RCC_TIM1_CLK_ENABLE();
 8003bae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bb2:	619a      	str	r2, [r3, #24]
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8003bb4:	2200      	movs	r2, #0
     __HAL_RCC_TIM1_CLK_ENABLE();
 8003bb6:	699b      	ldr	r3, [r3, #24]
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8003bb8:	4611      	mov	r1, r2
     __HAL_RCC_TIM1_CLK_ENABLE();
 8003bba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bbe:	9301      	str	r3, [sp, #4]
 8003bc0:	9b01      	ldr	r3, [sp, #4]
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8003bc2:	f7fd fa11 	bl	8000fe8 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003bc6:	2019      	movs	r0, #25
 8003bc8:	f7fd fa42 	bl	8001050 <HAL_NVIC_EnableIRQ>
   /* USER CODE BEGIN TIM1_MspInit 1 */

   /* USER CODE END TIM1_MspInit 1 */
   }

}
 8003bcc:	b002      	add	sp, #8
 8003bce:	bd10      	pop	{r4, pc}
 8003bd0:	40000800 	.word	0x40000800
 8003bd4:	40012c00 	.word	0x40012c00

08003bd8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003bd8:	b510      	push	{r4, lr}
 8003bda:	4604      	mov	r4, r0
 8003bdc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bde:	2210      	movs	r2, #16
 8003be0:	2100      	movs	r1, #0
 8003be2:	a802      	add	r0, sp, #8
 8003be4:	f000 f950 	bl	8003e88 <memset>
  if(hi2c->Instance==I2C2)
 8003be8:	6822      	ldr	r2, [r4, #0]
 8003bea:	4b11      	ldr	r3, [pc, #68]	; (8003c30 <HAL_I2C_MspInit+0x58>)
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d11d      	bne.n	8003c2c <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bf0:	4c10      	ldr	r4, [pc, #64]	; (8003c34 <HAL_I2C_MspInit+0x5c>)
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bf2:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bf4:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bf6:	4810      	ldr	r0, [pc, #64]	; (8003c38 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bf8:	f043 0308 	orr.w	r3, r3, #8
 8003bfc:	61a3      	str	r3, [r4, #24]
 8003bfe:	69a3      	ldr	r3, [r4, #24]
 8003c00:	f003 0308 	and.w	r3, r3, #8
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003c08:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003c0c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c0e:	2312      	movs	r3, #18
 8003c10:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c12:	2303      	movs	r3, #3
 8003c14:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c16:	f7fd fa4b 	bl	80010b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003c1a:	69e3      	ldr	r3, [r4, #28]
 8003c1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c20:	61e3      	str	r3, [r4, #28]
 8003c22:	69e3      	ldr	r3, [r4, #28]
 8003c24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c28:	9301      	str	r3, [sp, #4]
 8003c2a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003c2c:	b006      	add	sp, #24
 8003c2e:	bd10      	pop	{r4, pc}
 8003c30:	40005800 	.word	0x40005800
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40010c00 	.word	0x40010c00

08003c3c <HAL_TIM_MspPostInit>:

}


void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003c3c:	b510      	push	{r4, lr}
 8003c3e:	4604      	mov	r4, r0
 8003c40:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c42:	2210      	movs	r2, #16
 8003c44:	2100      	movs	r1, #0
 8003c46:	a802      	add	r0, sp, #8
 8003c48:	f000 f91e 	bl	8003e88 <memset>
  if(htim->Instance==TIM4)
 8003c4c:	6822      	ldr	r2, [r4, #0]
 8003c4e:	4b0c      	ldr	r3, [pc, #48]	; (8003c80 <HAL_TIM_MspPostInit+0x44>)
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d113      	bne.n	8003c7c <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c54:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003c58:	699a      	ldr	r2, [r3, #24]
    PB6     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c5a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c5c:	f042 0208 	orr.w	r2, r2, #8
 8003c60:	619a      	str	r2, [r3, #24]
 8003c62:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c64:	4807      	ldr	r0, [pc, #28]	; (8003c84 <HAL_TIM_MspPostInit+0x48>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	9301      	str	r3, [sp, #4]
 8003c6c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003c6e:	2340      	movs	r3, #64	; 0x40
 8003c70:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c72:	2302      	movs	r3, #2
 8003c74:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c76:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c78:	f7fd fa1a 	bl	80010b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003c7c:	b006      	add	sp, #24
 8003c7e:	bd10      	pop	{r4, pc}
 8003c80:	40000800 	.word	0x40000800
 8003c84:	40010c00 	.word	0x40010c00

08003c88 <HAL_TIM_Base_MspDeInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM4)
 8003c88:	6802      	ldr	r2, [r0, #0]
 8003c8a:	4b0e      	ldr	r3, [pc, #56]	; (8003cc4 <HAL_TIM_Base_MspDeInit+0x3c>)
{
 8003c8c:	b510      	push	{r4, lr}
  if(htim_base->Instance==TIM4)
 8003c8e:	429a      	cmp	r2, r3
{
 8003c90:	4604      	mov	r4, r0
  if(htim_base->Instance==TIM4)
 8003c92:	d107      	bne.n	8003ca4 <HAL_TIM_Base_MspDeInit+0x1c>
  /* USER CODE BEGIN TIM4_MspDeInit 0 */

  /* USER CODE END TIM4_MspDeInit 0 */
    /* Peripheral clock disable */

    __HAL_RCC_TIM4_CLK_DISABLE();
 8003c94:	4a0c      	ldr	r2, [pc, #48]	; (8003cc8 <HAL_TIM_Base_MspDeInit+0x40>)

    /* TIM4 interrupt DeInit */

    HAL_NVIC_DisableIRQ(TIM4_IRQn);
 8003c96:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_DISABLE();
 8003c98:	69d3      	ldr	r3, [r2, #28]
 8003c9a:	f023 0304 	bic.w	r3, r3, #4
 8003c9e:	61d3      	str	r3, [r2, #28]
    HAL_NVIC_DisableIRQ(TIM4_IRQn);
 8003ca0:	f7fd f9e2 	bl	8001068 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM4_MspDeInit 1 */

  /* USER CODE END TIM4_MspDeInit 1 */
  }

  if(htim_base->Instance==TIM1)
 8003ca4:	6822      	ldr	r2, [r4, #0]
 8003ca6:	4b09      	ldr	r3, [pc, #36]	; (8003ccc <HAL_TIM_Base_MspDeInit+0x44>)
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d109      	bne.n	8003cc0 <HAL_TIM_Base_MspDeInit+0x38>
    /* USER CODE BEGIN TIM1_MspDeInit 1 */

    /* USER CODE END TIM1_MspDeInit 1 */
    }

}
 8003cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_RCC_TIM1_CLK_DISABLE();
 8003cb0:	4a05      	ldr	r2, [pc, #20]	; (8003cc8 <HAL_TIM_Base_MspDeInit+0x40>)
      HAL_NVIC_DisableIRQ(TIM1_UP_IRQn);
 8003cb2:	2019      	movs	r0, #25
      __HAL_RCC_TIM1_CLK_DISABLE();
 8003cb4:	6993      	ldr	r3, [r2, #24]
 8003cb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cba:	6193      	str	r3, [r2, #24]
      HAL_NVIC_DisableIRQ(TIM1_UP_IRQn);
 8003cbc:	f7fd b9d4 	b.w	8001068 <HAL_NVIC_DisableIRQ>
 8003cc0:	bd10      	pop	{r4, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40000800 	.word	0x40000800
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	40012c00 	.word	0x40012c00

08003cd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003cd0:	b510      	push	{r4, lr}
 8003cd2:	4604      	mov	r4, r0
 8003cd4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd6:	2210      	movs	r2, #16
 8003cd8:	2100      	movs	r1, #0
 8003cda:	a802      	add	r0, sp, #8
 8003cdc:	f000 f8d4 	bl	8003e88 <memset>
  if(huart->Instance==USART1)
 8003ce0:	6822      	ldr	r2, [r4, #0]
 8003ce2:	4b17      	ldr	r3, [pc, #92]	; (8003d40 <HAL_UART_MspInit+0x70>)
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d128      	bne.n	8003d3a <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ce8:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8003cec:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cee:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8003cf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cf4:	619a      	str	r2, [r3, #24]
 8003cf6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cf8:	4812      	ldr	r0, [pc, #72]	; (8003d44 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003cfa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003cfe:	9200      	str	r2, [sp, #0]
 8003d00:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d02:	699a      	ldr	r2, [r3, #24]
 8003d04:	f042 0204 	orr.w	r2, r2, #4
 8003d08:	619a      	str	r2, [r3, #24]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	9301      	str	r3, [sp, #4]
 8003d12:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003d14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d18:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d22:	f7fd f9c5 	bl	80010b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d2a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d2c:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d2e:	a902      	add	r1, sp, #8
 8003d30:	4804      	ldr	r0, [pc, #16]	; (8003d44 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d32:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d34:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d36:	f7fd f9bb 	bl	80010b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003d3a:	b006      	add	sp, #24
 8003d3c:	bd10      	pop	{r4, pc}
 8003d3e:	bf00      	nop
 8003d40:	40013800 	.word	0x40013800
 8003d44:	40010800 	.word	0x40010800

08003d48 <NMI_Handler>:
 8003d48:	4770      	bx	lr

08003d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d4a:	e7fe      	b.n	8003d4a <HardFault_Handler>

08003d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d4c:	e7fe      	b.n	8003d4c <MemManage_Handler>

08003d4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d4e:	e7fe      	b.n	8003d4e <BusFault_Handler>

08003d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d50:	e7fe      	b.n	8003d50 <UsageFault_Handler>

08003d52 <SVC_Handler>:
 8003d52:	4770      	bx	lr

08003d54 <DebugMon_Handler>:
 8003d54:	4770      	bx	lr

08003d56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d56:	4770      	bx	lr

08003d58 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d58:	f7fd b910 	b.w	8000f7c <HAL_IncTick>

08003d5c <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003d5c:	4801      	ldr	r0, [pc, #4]	; (8003d64 <TIM4_IRQHandler+0x8>)
 8003d5e:	f7fe ba5b 	b.w	8002218 <HAL_TIM_IRQHandler>
 8003d62:	bf00      	nop
 8003d64:	200002d0 	.word	0x200002d0

08003d68 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003d68:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003d6a:	4b0a      	ldr	r3, [pc, #40]	; (8003d94 <_sbrk+0x2c>)
{
 8003d6c:	4602      	mov	r2, r0
	if (heap_end == 0)
 8003d6e:	6819      	ldr	r1, [r3, #0]
 8003d70:	b909      	cbnz	r1, 8003d76 <_sbrk+0xe>
		heap_end = &end;
 8003d72:	4909      	ldr	r1, [pc, #36]	; (8003d98 <_sbrk+0x30>)
 8003d74:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8003d76:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8003d78:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8003d7a:	4402      	add	r2, r0
 8003d7c:	428a      	cmp	r2, r1
 8003d7e:	d906      	bls.n	8003d8e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003d80:	f000 f858 	bl	8003e34 <__errno>
 8003d84:	230c      	movs	r3, #12
 8003d86:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003d88:	f04f 30ff 	mov.w	r0, #4294967295
 8003d8c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8003d8e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8003d90:	bd08      	pop	{r3, pc}
 8003d92:	bf00      	nop
 8003d94:	2000008c 	.word	0x2000008c
 8003d98:	20000d94 	.word	0x20000d94

08003d9c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003d9c:	4b0f      	ldr	r3, [pc, #60]	; (8003ddc <SystemInit+0x40>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	f042 0201 	orr.w	r2, r2, #1
 8003da4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003da6:	6859      	ldr	r1, [r3, #4]
 8003da8:	4a0d      	ldr	r2, [pc, #52]	; (8003de0 <SystemInit+0x44>)
 8003daa:	400a      	ands	r2, r1
 8003dac:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003db4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003db8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003dc0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003dc8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003dca:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003dce:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003dd0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003dd4:	4b03      	ldr	r3, [pc, #12]	; (8003de4 <SystemInit+0x48>)
 8003dd6:	609a      	str	r2, [r3, #8]
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	f8ff0000 	.word	0xf8ff0000
 8003de4:	e000ed00 	.word	0xe000ed00

08003de8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003de8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003dea:	e003      	b.n	8003df4 <LoopCopyDataInit>

08003dec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003dec:	4b0b      	ldr	r3, [pc, #44]	; (8003e1c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003dee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003df0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003df2:	3104      	adds	r1, #4

08003df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003df4:	480a      	ldr	r0, [pc, #40]	; (8003e20 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003df6:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003df8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003dfa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003dfc:	d3f6      	bcc.n	8003dec <CopyDataInit>
  ldr r2, =_sbss
 8003dfe:	4a0a      	ldr	r2, [pc, #40]	; (8003e28 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003e00:	e002      	b.n	8003e08 <LoopFillZerobss>

08003e02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003e02:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003e04:	f842 3b04 	str.w	r3, [r2], #4

08003e08 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003e08:	4b08      	ldr	r3, [pc, #32]	; (8003e2c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003e0a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003e0c:	d3f9      	bcc.n	8003e02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003e0e:	f7ff ffc5 	bl	8003d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e12:	f000 f815 	bl	8003e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003e16:	f7ff fd2b 	bl	8003870 <main>
  bx lr
 8003e1a:	4770      	bx	lr
  ldr r3, =_sidata
 8003e1c:	08004a18 	.word	0x08004a18
  ldr r0, =_sdata
 8003e20:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003e24:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8003e28:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8003e2c:	20000d94 	.word	0x20000d94

08003e30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e30:	e7fe      	b.n	8003e30 <ADC1_2_IRQHandler>
	...

08003e34 <__errno>:
 8003e34:	4b01      	ldr	r3, [pc, #4]	; (8003e3c <__errno+0x8>)
 8003e36:	6818      	ldr	r0, [r3, #0]
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	2000000c 	.word	0x2000000c

08003e40 <__libc_init_array>:
 8003e40:	b570      	push	{r4, r5, r6, lr}
 8003e42:	2500      	movs	r5, #0
 8003e44:	4e0c      	ldr	r6, [pc, #48]	; (8003e78 <__libc_init_array+0x38>)
 8003e46:	4c0d      	ldr	r4, [pc, #52]	; (8003e7c <__libc_init_array+0x3c>)
 8003e48:	1ba4      	subs	r4, r4, r6
 8003e4a:	10a4      	asrs	r4, r4, #2
 8003e4c:	42a5      	cmp	r5, r4
 8003e4e:	d109      	bne.n	8003e64 <__libc_init_array+0x24>
 8003e50:	f000 fd0e 	bl	8004870 <_init>
 8003e54:	2500      	movs	r5, #0
 8003e56:	4e0a      	ldr	r6, [pc, #40]	; (8003e80 <__libc_init_array+0x40>)
 8003e58:	4c0a      	ldr	r4, [pc, #40]	; (8003e84 <__libc_init_array+0x44>)
 8003e5a:	1ba4      	subs	r4, r4, r6
 8003e5c:	10a4      	asrs	r4, r4, #2
 8003e5e:	42a5      	cmp	r5, r4
 8003e60:	d105      	bne.n	8003e6e <__libc_init_array+0x2e>
 8003e62:	bd70      	pop	{r4, r5, r6, pc}
 8003e64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e68:	4798      	blx	r3
 8003e6a:	3501      	adds	r5, #1
 8003e6c:	e7ee      	b.n	8003e4c <__libc_init_array+0xc>
 8003e6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e72:	4798      	blx	r3
 8003e74:	3501      	adds	r5, #1
 8003e76:	e7f2      	b.n	8003e5e <__libc_init_array+0x1e>
 8003e78:	08004a10 	.word	0x08004a10
 8003e7c:	08004a10 	.word	0x08004a10
 8003e80:	08004a10 	.word	0x08004a10
 8003e84:	08004a14 	.word	0x08004a14

08003e88 <memset>:
 8003e88:	4603      	mov	r3, r0
 8003e8a:	4402      	add	r2, r0
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d100      	bne.n	8003e92 <memset+0xa>
 8003e90:	4770      	bx	lr
 8003e92:	f803 1b01 	strb.w	r1, [r3], #1
 8003e96:	e7f9      	b.n	8003e8c <memset+0x4>

08003e98 <sniprintf>:
 8003e98:	b40c      	push	{r2, r3}
 8003e9a:	b530      	push	{r4, r5, lr}
 8003e9c:	4b17      	ldr	r3, [pc, #92]	; (8003efc <sniprintf+0x64>)
 8003e9e:	1e0c      	subs	r4, r1, #0
 8003ea0:	b09d      	sub	sp, #116	; 0x74
 8003ea2:	681d      	ldr	r5, [r3, #0]
 8003ea4:	da08      	bge.n	8003eb8 <sniprintf+0x20>
 8003ea6:	238b      	movs	r3, #139	; 0x8b
 8003ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8003eac:	602b      	str	r3, [r5, #0]
 8003eae:	b01d      	add	sp, #116	; 0x74
 8003eb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003eb4:	b002      	add	sp, #8
 8003eb6:	4770      	bx	lr
 8003eb8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003ebc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003ec0:	bf0c      	ite	eq
 8003ec2:	4623      	moveq	r3, r4
 8003ec4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003ec8:	9304      	str	r3, [sp, #16]
 8003eca:	9307      	str	r3, [sp, #28]
 8003ecc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ed0:	9002      	str	r0, [sp, #8]
 8003ed2:	9006      	str	r0, [sp, #24]
 8003ed4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003ed8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003eda:	ab21      	add	r3, sp, #132	; 0x84
 8003edc:	a902      	add	r1, sp, #8
 8003ede:	4628      	mov	r0, r5
 8003ee0:	9301      	str	r3, [sp, #4]
 8003ee2:	f000 f895 	bl	8004010 <_svfiprintf_r>
 8003ee6:	1c43      	adds	r3, r0, #1
 8003ee8:	bfbc      	itt	lt
 8003eea:	238b      	movlt	r3, #139	; 0x8b
 8003eec:	602b      	strlt	r3, [r5, #0]
 8003eee:	2c00      	cmp	r4, #0
 8003ef0:	d0dd      	beq.n	8003eae <sniprintf+0x16>
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	9b02      	ldr	r3, [sp, #8]
 8003ef6:	701a      	strb	r2, [r3, #0]
 8003ef8:	e7d9      	b.n	8003eae <sniprintf+0x16>
 8003efa:	bf00      	nop
 8003efc:	2000000c 	.word	0x2000000c

08003f00 <siprintf>:
 8003f00:	b40e      	push	{r1, r2, r3}
 8003f02:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003f06:	b500      	push	{lr}
 8003f08:	b09c      	sub	sp, #112	; 0x70
 8003f0a:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003f0e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f12:	9104      	str	r1, [sp, #16]
 8003f14:	9107      	str	r1, [sp, #28]
 8003f16:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003f1a:	ab1d      	add	r3, sp, #116	; 0x74
 8003f1c:	9002      	str	r0, [sp, #8]
 8003f1e:	9006      	str	r0, [sp, #24]
 8003f20:	4808      	ldr	r0, [pc, #32]	; (8003f44 <siprintf+0x44>)
 8003f22:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f26:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003f2a:	6800      	ldr	r0, [r0, #0]
 8003f2c:	a902      	add	r1, sp, #8
 8003f2e:	9301      	str	r3, [sp, #4]
 8003f30:	f000 f86e 	bl	8004010 <_svfiprintf_r>
 8003f34:	2200      	movs	r2, #0
 8003f36:	9b02      	ldr	r3, [sp, #8]
 8003f38:	701a      	strb	r2, [r3, #0]
 8003f3a:	b01c      	add	sp, #112	; 0x70
 8003f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f40:	b003      	add	sp, #12
 8003f42:	4770      	bx	lr
 8003f44:	2000000c 	.word	0x2000000c

08003f48 <strcpy>:
 8003f48:	4603      	mov	r3, r0
 8003f4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f4e:	f803 2b01 	strb.w	r2, [r3], #1
 8003f52:	2a00      	cmp	r2, #0
 8003f54:	d1f9      	bne.n	8003f4a <strcpy+0x2>
 8003f56:	4770      	bx	lr

08003f58 <__ssputs_r>:
 8003f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f5c:	688e      	ldr	r6, [r1, #8]
 8003f5e:	4682      	mov	sl, r0
 8003f60:	429e      	cmp	r6, r3
 8003f62:	460c      	mov	r4, r1
 8003f64:	4691      	mov	r9, r2
 8003f66:	4698      	mov	r8, r3
 8003f68:	d835      	bhi.n	8003fd6 <__ssputs_r+0x7e>
 8003f6a:	898a      	ldrh	r2, [r1, #12]
 8003f6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f70:	d031      	beq.n	8003fd6 <__ssputs_r+0x7e>
 8003f72:	2302      	movs	r3, #2
 8003f74:	6825      	ldr	r5, [r4, #0]
 8003f76:	6909      	ldr	r1, [r1, #16]
 8003f78:	1a6f      	subs	r7, r5, r1
 8003f7a:	6965      	ldr	r5, [r4, #20]
 8003f7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f80:	fb95 f5f3 	sdiv	r5, r5, r3
 8003f84:	f108 0301 	add.w	r3, r8, #1
 8003f88:	443b      	add	r3, r7
 8003f8a:	429d      	cmp	r5, r3
 8003f8c:	bf38      	it	cc
 8003f8e:	461d      	movcc	r5, r3
 8003f90:	0553      	lsls	r3, r2, #21
 8003f92:	d531      	bpl.n	8003ff8 <__ssputs_r+0xa0>
 8003f94:	4629      	mov	r1, r5
 8003f96:	f000 fb47 	bl	8004628 <_malloc_r>
 8003f9a:	4606      	mov	r6, r0
 8003f9c:	b950      	cbnz	r0, 8003fb4 <__ssputs_r+0x5c>
 8003f9e:	230c      	movs	r3, #12
 8003fa0:	f8ca 3000 	str.w	r3, [sl]
 8003fa4:	89a3      	ldrh	r3, [r4, #12]
 8003fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8003faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fae:	81a3      	strh	r3, [r4, #12]
 8003fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fb4:	463a      	mov	r2, r7
 8003fb6:	6921      	ldr	r1, [r4, #16]
 8003fb8:	f000 fac4 	bl	8004544 <memcpy>
 8003fbc:	89a3      	ldrh	r3, [r4, #12]
 8003fbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fc6:	81a3      	strh	r3, [r4, #12]
 8003fc8:	6126      	str	r6, [r4, #16]
 8003fca:	443e      	add	r6, r7
 8003fcc:	6026      	str	r6, [r4, #0]
 8003fce:	4646      	mov	r6, r8
 8003fd0:	6165      	str	r5, [r4, #20]
 8003fd2:	1bed      	subs	r5, r5, r7
 8003fd4:	60a5      	str	r5, [r4, #8]
 8003fd6:	4546      	cmp	r6, r8
 8003fd8:	bf28      	it	cs
 8003fda:	4646      	movcs	r6, r8
 8003fdc:	4649      	mov	r1, r9
 8003fde:	4632      	mov	r2, r6
 8003fe0:	6820      	ldr	r0, [r4, #0]
 8003fe2:	f000 faba 	bl	800455a <memmove>
 8003fe6:	68a3      	ldr	r3, [r4, #8]
 8003fe8:	2000      	movs	r0, #0
 8003fea:	1b9b      	subs	r3, r3, r6
 8003fec:	60a3      	str	r3, [r4, #8]
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	441e      	add	r6, r3
 8003ff2:	6026      	str	r6, [r4, #0]
 8003ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ff8:	462a      	mov	r2, r5
 8003ffa:	f000 fb73 	bl	80046e4 <_realloc_r>
 8003ffe:	4606      	mov	r6, r0
 8004000:	2800      	cmp	r0, #0
 8004002:	d1e1      	bne.n	8003fc8 <__ssputs_r+0x70>
 8004004:	6921      	ldr	r1, [r4, #16]
 8004006:	4650      	mov	r0, sl
 8004008:	f000 fac2 	bl	8004590 <_free_r>
 800400c:	e7c7      	b.n	8003f9e <__ssputs_r+0x46>
	...

08004010 <_svfiprintf_r>:
 8004010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004014:	b09d      	sub	sp, #116	; 0x74
 8004016:	9303      	str	r3, [sp, #12]
 8004018:	898b      	ldrh	r3, [r1, #12]
 800401a:	4680      	mov	r8, r0
 800401c:	061c      	lsls	r4, r3, #24
 800401e:	460d      	mov	r5, r1
 8004020:	4616      	mov	r6, r2
 8004022:	d50f      	bpl.n	8004044 <_svfiprintf_r+0x34>
 8004024:	690b      	ldr	r3, [r1, #16]
 8004026:	b96b      	cbnz	r3, 8004044 <_svfiprintf_r+0x34>
 8004028:	2140      	movs	r1, #64	; 0x40
 800402a:	f000 fafd 	bl	8004628 <_malloc_r>
 800402e:	6028      	str	r0, [r5, #0]
 8004030:	6128      	str	r0, [r5, #16]
 8004032:	b928      	cbnz	r0, 8004040 <_svfiprintf_r+0x30>
 8004034:	230c      	movs	r3, #12
 8004036:	f8c8 3000 	str.w	r3, [r8]
 800403a:	f04f 30ff 	mov.w	r0, #4294967295
 800403e:	e0c4      	b.n	80041ca <_svfiprintf_r+0x1ba>
 8004040:	2340      	movs	r3, #64	; 0x40
 8004042:	616b      	str	r3, [r5, #20]
 8004044:	2300      	movs	r3, #0
 8004046:	9309      	str	r3, [sp, #36]	; 0x24
 8004048:	2320      	movs	r3, #32
 800404a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800404e:	2330      	movs	r3, #48	; 0x30
 8004050:	f04f 0b01 	mov.w	fp, #1
 8004054:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004058:	4637      	mov	r7, r6
 800405a:	463c      	mov	r4, r7
 800405c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004060:	2b00      	cmp	r3, #0
 8004062:	d13c      	bne.n	80040de <_svfiprintf_r+0xce>
 8004064:	ebb7 0a06 	subs.w	sl, r7, r6
 8004068:	d00b      	beq.n	8004082 <_svfiprintf_r+0x72>
 800406a:	4653      	mov	r3, sl
 800406c:	4632      	mov	r2, r6
 800406e:	4629      	mov	r1, r5
 8004070:	4640      	mov	r0, r8
 8004072:	f7ff ff71 	bl	8003f58 <__ssputs_r>
 8004076:	3001      	adds	r0, #1
 8004078:	f000 80a2 	beq.w	80041c0 <_svfiprintf_r+0x1b0>
 800407c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800407e:	4453      	add	r3, sl
 8004080:	9309      	str	r3, [sp, #36]	; 0x24
 8004082:	783b      	ldrb	r3, [r7, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 809b 	beq.w	80041c0 <_svfiprintf_r+0x1b0>
 800408a:	2300      	movs	r3, #0
 800408c:	f04f 32ff 	mov.w	r2, #4294967295
 8004090:	9304      	str	r3, [sp, #16]
 8004092:	9307      	str	r3, [sp, #28]
 8004094:	9205      	str	r2, [sp, #20]
 8004096:	9306      	str	r3, [sp, #24]
 8004098:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800409c:	931a      	str	r3, [sp, #104]	; 0x68
 800409e:	2205      	movs	r2, #5
 80040a0:	7821      	ldrb	r1, [r4, #0]
 80040a2:	4850      	ldr	r0, [pc, #320]	; (80041e4 <_svfiprintf_r+0x1d4>)
 80040a4:	f000 fa40 	bl	8004528 <memchr>
 80040a8:	1c67      	adds	r7, r4, #1
 80040aa:	9b04      	ldr	r3, [sp, #16]
 80040ac:	b9d8      	cbnz	r0, 80040e6 <_svfiprintf_r+0xd6>
 80040ae:	06d9      	lsls	r1, r3, #27
 80040b0:	bf44      	itt	mi
 80040b2:	2220      	movmi	r2, #32
 80040b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80040b8:	071a      	lsls	r2, r3, #28
 80040ba:	bf44      	itt	mi
 80040bc:	222b      	movmi	r2, #43	; 0x2b
 80040be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80040c2:	7822      	ldrb	r2, [r4, #0]
 80040c4:	2a2a      	cmp	r2, #42	; 0x2a
 80040c6:	d016      	beq.n	80040f6 <_svfiprintf_r+0xe6>
 80040c8:	2100      	movs	r1, #0
 80040ca:	200a      	movs	r0, #10
 80040cc:	9a07      	ldr	r2, [sp, #28]
 80040ce:	4627      	mov	r7, r4
 80040d0:	783b      	ldrb	r3, [r7, #0]
 80040d2:	3401      	adds	r4, #1
 80040d4:	3b30      	subs	r3, #48	; 0x30
 80040d6:	2b09      	cmp	r3, #9
 80040d8:	d950      	bls.n	800417c <_svfiprintf_r+0x16c>
 80040da:	b1c9      	cbz	r1, 8004110 <_svfiprintf_r+0x100>
 80040dc:	e011      	b.n	8004102 <_svfiprintf_r+0xf2>
 80040de:	2b25      	cmp	r3, #37	; 0x25
 80040e0:	d0c0      	beq.n	8004064 <_svfiprintf_r+0x54>
 80040e2:	4627      	mov	r7, r4
 80040e4:	e7b9      	b.n	800405a <_svfiprintf_r+0x4a>
 80040e6:	4a3f      	ldr	r2, [pc, #252]	; (80041e4 <_svfiprintf_r+0x1d4>)
 80040e8:	463c      	mov	r4, r7
 80040ea:	1a80      	subs	r0, r0, r2
 80040ec:	fa0b f000 	lsl.w	r0, fp, r0
 80040f0:	4318      	orrs	r0, r3
 80040f2:	9004      	str	r0, [sp, #16]
 80040f4:	e7d3      	b.n	800409e <_svfiprintf_r+0x8e>
 80040f6:	9a03      	ldr	r2, [sp, #12]
 80040f8:	1d11      	adds	r1, r2, #4
 80040fa:	6812      	ldr	r2, [r2, #0]
 80040fc:	9103      	str	r1, [sp, #12]
 80040fe:	2a00      	cmp	r2, #0
 8004100:	db01      	blt.n	8004106 <_svfiprintf_r+0xf6>
 8004102:	9207      	str	r2, [sp, #28]
 8004104:	e004      	b.n	8004110 <_svfiprintf_r+0x100>
 8004106:	4252      	negs	r2, r2
 8004108:	f043 0302 	orr.w	r3, r3, #2
 800410c:	9207      	str	r2, [sp, #28]
 800410e:	9304      	str	r3, [sp, #16]
 8004110:	783b      	ldrb	r3, [r7, #0]
 8004112:	2b2e      	cmp	r3, #46	; 0x2e
 8004114:	d10d      	bne.n	8004132 <_svfiprintf_r+0x122>
 8004116:	787b      	ldrb	r3, [r7, #1]
 8004118:	1c79      	adds	r1, r7, #1
 800411a:	2b2a      	cmp	r3, #42	; 0x2a
 800411c:	d132      	bne.n	8004184 <_svfiprintf_r+0x174>
 800411e:	9b03      	ldr	r3, [sp, #12]
 8004120:	3702      	adds	r7, #2
 8004122:	1d1a      	adds	r2, r3, #4
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	9203      	str	r2, [sp, #12]
 8004128:	2b00      	cmp	r3, #0
 800412a:	bfb8      	it	lt
 800412c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004130:	9305      	str	r3, [sp, #20]
 8004132:	4c2d      	ldr	r4, [pc, #180]	; (80041e8 <_svfiprintf_r+0x1d8>)
 8004134:	2203      	movs	r2, #3
 8004136:	7839      	ldrb	r1, [r7, #0]
 8004138:	4620      	mov	r0, r4
 800413a:	f000 f9f5 	bl	8004528 <memchr>
 800413e:	b138      	cbz	r0, 8004150 <_svfiprintf_r+0x140>
 8004140:	2340      	movs	r3, #64	; 0x40
 8004142:	1b00      	subs	r0, r0, r4
 8004144:	fa03 f000 	lsl.w	r0, r3, r0
 8004148:	9b04      	ldr	r3, [sp, #16]
 800414a:	3701      	adds	r7, #1
 800414c:	4303      	orrs	r3, r0
 800414e:	9304      	str	r3, [sp, #16]
 8004150:	7839      	ldrb	r1, [r7, #0]
 8004152:	2206      	movs	r2, #6
 8004154:	4825      	ldr	r0, [pc, #148]	; (80041ec <_svfiprintf_r+0x1dc>)
 8004156:	1c7e      	adds	r6, r7, #1
 8004158:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800415c:	f000 f9e4 	bl	8004528 <memchr>
 8004160:	2800      	cmp	r0, #0
 8004162:	d035      	beq.n	80041d0 <_svfiprintf_r+0x1c0>
 8004164:	4b22      	ldr	r3, [pc, #136]	; (80041f0 <_svfiprintf_r+0x1e0>)
 8004166:	b9fb      	cbnz	r3, 80041a8 <_svfiprintf_r+0x198>
 8004168:	9b03      	ldr	r3, [sp, #12]
 800416a:	3307      	adds	r3, #7
 800416c:	f023 0307 	bic.w	r3, r3, #7
 8004170:	3308      	adds	r3, #8
 8004172:	9303      	str	r3, [sp, #12]
 8004174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004176:	444b      	add	r3, r9
 8004178:	9309      	str	r3, [sp, #36]	; 0x24
 800417a:	e76d      	b.n	8004058 <_svfiprintf_r+0x48>
 800417c:	fb00 3202 	mla	r2, r0, r2, r3
 8004180:	2101      	movs	r1, #1
 8004182:	e7a4      	b.n	80040ce <_svfiprintf_r+0xbe>
 8004184:	2300      	movs	r3, #0
 8004186:	240a      	movs	r4, #10
 8004188:	4618      	mov	r0, r3
 800418a:	9305      	str	r3, [sp, #20]
 800418c:	460f      	mov	r7, r1
 800418e:	783a      	ldrb	r2, [r7, #0]
 8004190:	3101      	adds	r1, #1
 8004192:	3a30      	subs	r2, #48	; 0x30
 8004194:	2a09      	cmp	r2, #9
 8004196:	d903      	bls.n	80041a0 <_svfiprintf_r+0x190>
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0ca      	beq.n	8004132 <_svfiprintf_r+0x122>
 800419c:	9005      	str	r0, [sp, #20]
 800419e:	e7c8      	b.n	8004132 <_svfiprintf_r+0x122>
 80041a0:	fb04 2000 	mla	r0, r4, r0, r2
 80041a4:	2301      	movs	r3, #1
 80041a6:	e7f1      	b.n	800418c <_svfiprintf_r+0x17c>
 80041a8:	ab03      	add	r3, sp, #12
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	462a      	mov	r2, r5
 80041ae:	4b11      	ldr	r3, [pc, #68]	; (80041f4 <_svfiprintf_r+0x1e4>)
 80041b0:	a904      	add	r1, sp, #16
 80041b2:	4640      	mov	r0, r8
 80041b4:	f3af 8000 	nop.w
 80041b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80041bc:	4681      	mov	r9, r0
 80041be:	d1d9      	bne.n	8004174 <_svfiprintf_r+0x164>
 80041c0:	89ab      	ldrh	r3, [r5, #12]
 80041c2:	065b      	lsls	r3, r3, #25
 80041c4:	f53f af39 	bmi.w	800403a <_svfiprintf_r+0x2a>
 80041c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041ca:	b01d      	add	sp, #116	; 0x74
 80041cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041d0:	ab03      	add	r3, sp, #12
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	462a      	mov	r2, r5
 80041d6:	4b07      	ldr	r3, [pc, #28]	; (80041f4 <_svfiprintf_r+0x1e4>)
 80041d8:	a904      	add	r1, sp, #16
 80041da:	4640      	mov	r0, r8
 80041dc:	f000 f884 	bl	80042e8 <_printf_i>
 80041e0:	e7ea      	b.n	80041b8 <_svfiprintf_r+0x1a8>
 80041e2:	bf00      	nop
 80041e4:	080049da 	.word	0x080049da
 80041e8:	080049e0 	.word	0x080049e0
 80041ec:	080049e4 	.word	0x080049e4
 80041f0:	00000000 	.word	0x00000000
 80041f4:	08003f59 	.word	0x08003f59

080041f8 <_printf_common>:
 80041f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041fc:	4691      	mov	r9, r2
 80041fe:	461f      	mov	r7, r3
 8004200:	688a      	ldr	r2, [r1, #8]
 8004202:	690b      	ldr	r3, [r1, #16]
 8004204:	4606      	mov	r6, r0
 8004206:	4293      	cmp	r3, r2
 8004208:	bfb8      	it	lt
 800420a:	4613      	movlt	r3, r2
 800420c:	f8c9 3000 	str.w	r3, [r9]
 8004210:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004214:	460c      	mov	r4, r1
 8004216:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800421a:	b112      	cbz	r2, 8004222 <_printf_common+0x2a>
 800421c:	3301      	adds	r3, #1
 800421e:	f8c9 3000 	str.w	r3, [r9]
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	0699      	lsls	r1, r3, #26
 8004226:	bf42      	ittt	mi
 8004228:	f8d9 3000 	ldrmi.w	r3, [r9]
 800422c:	3302      	addmi	r3, #2
 800422e:	f8c9 3000 	strmi.w	r3, [r9]
 8004232:	6825      	ldr	r5, [r4, #0]
 8004234:	f015 0506 	ands.w	r5, r5, #6
 8004238:	d107      	bne.n	800424a <_printf_common+0x52>
 800423a:	f104 0a19 	add.w	sl, r4, #25
 800423e:	68e3      	ldr	r3, [r4, #12]
 8004240:	f8d9 2000 	ldr.w	r2, [r9]
 8004244:	1a9b      	subs	r3, r3, r2
 8004246:	429d      	cmp	r5, r3
 8004248:	db2a      	blt.n	80042a0 <_printf_common+0xa8>
 800424a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800424e:	6822      	ldr	r2, [r4, #0]
 8004250:	3300      	adds	r3, #0
 8004252:	bf18      	it	ne
 8004254:	2301      	movne	r3, #1
 8004256:	0692      	lsls	r2, r2, #26
 8004258:	d42f      	bmi.n	80042ba <_printf_common+0xc2>
 800425a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800425e:	4639      	mov	r1, r7
 8004260:	4630      	mov	r0, r6
 8004262:	47c0      	blx	r8
 8004264:	3001      	adds	r0, #1
 8004266:	d022      	beq.n	80042ae <_printf_common+0xb6>
 8004268:	6823      	ldr	r3, [r4, #0]
 800426a:	68e5      	ldr	r5, [r4, #12]
 800426c:	f003 0306 	and.w	r3, r3, #6
 8004270:	2b04      	cmp	r3, #4
 8004272:	bf18      	it	ne
 8004274:	2500      	movne	r5, #0
 8004276:	f8d9 2000 	ldr.w	r2, [r9]
 800427a:	f04f 0900 	mov.w	r9, #0
 800427e:	bf08      	it	eq
 8004280:	1aad      	subeq	r5, r5, r2
 8004282:	68a3      	ldr	r3, [r4, #8]
 8004284:	6922      	ldr	r2, [r4, #16]
 8004286:	bf08      	it	eq
 8004288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800428c:	4293      	cmp	r3, r2
 800428e:	bfc4      	itt	gt
 8004290:	1a9b      	subgt	r3, r3, r2
 8004292:	18ed      	addgt	r5, r5, r3
 8004294:	341a      	adds	r4, #26
 8004296:	454d      	cmp	r5, r9
 8004298:	d11b      	bne.n	80042d2 <_printf_common+0xda>
 800429a:	2000      	movs	r0, #0
 800429c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042a0:	2301      	movs	r3, #1
 80042a2:	4652      	mov	r2, sl
 80042a4:	4639      	mov	r1, r7
 80042a6:	4630      	mov	r0, r6
 80042a8:	47c0      	blx	r8
 80042aa:	3001      	adds	r0, #1
 80042ac:	d103      	bne.n	80042b6 <_printf_common+0xbe>
 80042ae:	f04f 30ff 	mov.w	r0, #4294967295
 80042b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042b6:	3501      	adds	r5, #1
 80042b8:	e7c1      	b.n	800423e <_printf_common+0x46>
 80042ba:	2030      	movs	r0, #48	; 0x30
 80042bc:	18e1      	adds	r1, r4, r3
 80042be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042c8:	4422      	add	r2, r4
 80042ca:	3302      	adds	r3, #2
 80042cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042d0:	e7c3      	b.n	800425a <_printf_common+0x62>
 80042d2:	2301      	movs	r3, #1
 80042d4:	4622      	mov	r2, r4
 80042d6:	4639      	mov	r1, r7
 80042d8:	4630      	mov	r0, r6
 80042da:	47c0      	blx	r8
 80042dc:	3001      	adds	r0, #1
 80042de:	d0e6      	beq.n	80042ae <_printf_common+0xb6>
 80042e0:	f109 0901 	add.w	r9, r9, #1
 80042e4:	e7d7      	b.n	8004296 <_printf_common+0x9e>
	...

080042e8 <_printf_i>:
 80042e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80042ec:	4617      	mov	r7, r2
 80042ee:	7e0a      	ldrb	r2, [r1, #24]
 80042f0:	b085      	sub	sp, #20
 80042f2:	2a6e      	cmp	r2, #110	; 0x6e
 80042f4:	4698      	mov	r8, r3
 80042f6:	4606      	mov	r6, r0
 80042f8:	460c      	mov	r4, r1
 80042fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80042fc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004300:	f000 80bc 	beq.w	800447c <_printf_i+0x194>
 8004304:	d81a      	bhi.n	800433c <_printf_i+0x54>
 8004306:	2a63      	cmp	r2, #99	; 0x63
 8004308:	d02e      	beq.n	8004368 <_printf_i+0x80>
 800430a:	d80a      	bhi.n	8004322 <_printf_i+0x3a>
 800430c:	2a00      	cmp	r2, #0
 800430e:	f000 80c8 	beq.w	80044a2 <_printf_i+0x1ba>
 8004312:	2a58      	cmp	r2, #88	; 0x58
 8004314:	f000 808a 	beq.w	800442c <_printf_i+0x144>
 8004318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800431c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004320:	e02a      	b.n	8004378 <_printf_i+0x90>
 8004322:	2a64      	cmp	r2, #100	; 0x64
 8004324:	d001      	beq.n	800432a <_printf_i+0x42>
 8004326:	2a69      	cmp	r2, #105	; 0x69
 8004328:	d1f6      	bne.n	8004318 <_printf_i+0x30>
 800432a:	6821      	ldr	r1, [r4, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004332:	d023      	beq.n	800437c <_printf_i+0x94>
 8004334:	1d11      	adds	r1, r2, #4
 8004336:	6019      	str	r1, [r3, #0]
 8004338:	6813      	ldr	r3, [r2, #0]
 800433a:	e027      	b.n	800438c <_printf_i+0xa4>
 800433c:	2a73      	cmp	r2, #115	; 0x73
 800433e:	f000 80b4 	beq.w	80044aa <_printf_i+0x1c2>
 8004342:	d808      	bhi.n	8004356 <_printf_i+0x6e>
 8004344:	2a6f      	cmp	r2, #111	; 0x6f
 8004346:	d02a      	beq.n	800439e <_printf_i+0xb6>
 8004348:	2a70      	cmp	r2, #112	; 0x70
 800434a:	d1e5      	bne.n	8004318 <_printf_i+0x30>
 800434c:	680a      	ldr	r2, [r1, #0]
 800434e:	f042 0220 	orr.w	r2, r2, #32
 8004352:	600a      	str	r2, [r1, #0]
 8004354:	e003      	b.n	800435e <_printf_i+0x76>
 8004356:	2a75      	cmp	r2, #117	; 0x75
 8004358:	d021      	beq.n	800439e <_printf_i+0xb6>
 800435a:	2a78      	cmp	r2, #120	; 0x78
 800435c:	d1dc      	bne.n	8004318 <_printf_i+0x30>
 800435e:	2278      	movs	r2, #120	; 0x78
 8004360:	496f      	ldr	r1, [pc, #444]	; (8004520 <_printf_i+0x238>)
 8004362:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004366:	e064      	b.n	8004432 <_printf_i+0x14a>
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800436e:	1d11      	adds	r1, r2, #4
 8004370:	6019      	str	r1, [r3, #0]
 8004372:	6813      	ldr	r3, [r2, #0]
 8004374:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004378:	2301      	movs	r3, #1
 800437a:	e0a3      	b.n	80044c4 <_printf_i+0x1dc>
 800437c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004380:	f102 0104 	add.w	r1, r2, #4
 8004384:	6019      	str	r1, [r3, #0]
 8004386:	d0d7      	beq.n	8004338 <_printf_i+0x50>
 8004388:	f9b2 3000 	ldrsh.w	r3, [r2]
 800438c:	2b00      	cmp	r3, #0
 800438e:	da03      	bge.n	8004398 <_printf_i+0xb0>
 8004390:	222d      	movs	r2, #45	; 0x2d
 8004392:	425b      	negs	r3, r3
 8004394:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004398:	4962      	ldr	r1, [pc, #392]	; (8004524 <_printf_i+0x23c>)
 800439a:	220a      	movs	r2, #10
 800439c:	e017      	b.n	80043ce <_printf_i+0xe6>
 800439e:	6820      	ldr	r0, [r4, #0]
 80043a0:	6819      	ldr	r1, [r3, #0]
 80043a2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80043a6:	d003      	beq.n	80043b0 <_printf_i+0xc8>
 80043a8:	1d08      	adds	r0, r1, #4
 80043aa:	6018      	str	r0, [r3, #0]
 80043ac:	680b      	ldr	r3, [r1, #0]
 80043ae:	e006      	b.n	80043be <_printf_i+0xd6>
 80043b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043b4:	f101 0004 	add.w	r0, r1, #4
 80043b8:	6018      	str	r0, [r3, #0]
 80043ba:	d0f7      	beq.n	80043ac <_printf_i+0xc4>
 80043bc:	880b      	ldrh	r3, [r1, #0]
 80043be:	2a6f      	cmp	r2, #111	; 0x6f
 80043c0:	bf14      	ite	ne
 80043c2:	220a      	movne	r2, #10
 80043c4:	2208      	moveq	r2, #8
 80043c6:	4957      	ldr	r1, [pc, #348]	; (8004524 <_printf_i+0x23c>)
 80043c8:	2000      	movs	r0, #0
 80043ca:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80043ce:	6865      	ldr	r5, [r4, #4]
 80043d0:	2d00      	cmp	r5, #0
 80043d2:	60a5      	str	r5, [r4, #8]
 80043d4:	f2c0 809c 	blt.w	8004510 <_printf_i+0x228>
 80043d8:	6820      	ldr	r0, [r4, #0]
 80043da:	f020 0004 	bic.w	r0, r0, #4
 80043de:	6020      	str	r0, [r4, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d13f      	bne.n	8004464 <_printf_i+0x17c>
 80043e4:	2d00      	cmp	r5, #0
 80043e6:	f040 8095 	bne.w	8004514 <_printf_i+0x22c>
 80043ea:	4675      	mov	r5, lr
 80043ec:	2a08      	cmp	r2, #8
 80043ee:	d10b      	bne.n	8004408 <_printf_i+0x120>
 80043f0:	6823      	ldr	r3, [r4, #0]
 80043f2:	07da      	lsls	r2, r3, #31
 80043f4:	d508      	bpl.n	8004408 <_printf_i+0x120>
 80043f6:	6923      	ldr	r3, [r4, #16]
 80043f8:	6862      	ldr	r2, [r4, #4]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	bfde      	ittt	le
 80043fe:	2330      	movle	r3, #48	; 0x30
 8004400:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004404:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004408:	ebae 0305 	sub.w	r3, lr, r5
 800440c:	6123      	str	r3, [r4, #16]
 800440e:	f8cd 8000 	str.w	r8, [sp]
 8004412:	463b      	mov	r3, r7
 8004414:	aa03      	add	r2, sp, #12
 8004416:	4621      	mov	r1, r4
 8004418:	4630      	mov	r0, r6
 800441a:	f7ff feed 	bl	80041f8 <_printf_common>
 800441e:	3001      	adds	r0, #1
 8004420:	d155      	bne.n	80044ce <_printf_i+0x1e6>
 8004422:	f04f 30ff 	mov.w	r0, #4294967295
 8004426:	b005      	add	sp, #20
 8004428:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800442c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004430:	493c      	ldr	r1, [pc, #240]	; (8004524 <_printf_i+0x23c>)
 8004432:	6822      	ldr	r2, [r4, #0]
 8004434:	6818      	ldr	r0, [r3, #0]
 8004436:	f012 0f80 	tst.w	r2, #128	; 0x80
 800443a:	f100 0504 	add.w	r5, r0, #4
 800443e:	601d      	str	r5, [r3, #0]
 8004440:	d001      	beq.n	8004446 <_printf_i+0x15e>
 8004442:	6803      	ldr	r3, [r0, #0]
 8004444:	e002      	b.n	800444c <_printf_i+0x164>
 8004446:	0655      	lsls	r5, r2, #25
 8004448:	d5fb      	bpl.n	8004442 <_printf_i+0x15a>
 800444a:	8803      	ldrh	r3, [r0, #0]
 800444c:	07d0      	lsls	r0, r2, #31
 800444e:	bf44      	itt	mi
 8004450:	f042 0220 	orrmi.w	r2, r2, #32
 8004454:	6022      	strmi	r2, [r4, #0]
 8004456:	b91b      	cbnz	r3, 8004460 <_printf_i+0x178>
 8004458:	6822      	ldr	r2, [r4, #0]
 800445a:	f022 0220 	bic.w	r2, r2, #32
 800445e:	6022      	str	r2, [r4, #0]
 8004460:	2210      	movs	r2, #16
 8004462:	e7b1      	b.n	80043c8 <_printf_i+0xe0>
 8004464:	4675      	mov	r5, lr
 8004466:	fbb3 f0f2 	udiv	r0, r3, r2
 800446a:	fb02 3310 	mls	r3, r2, r0, r3
 800446e:	5ccb      	ldrb	r3, [r1, r3]
 8004470:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004474:	4603      	mov	r3, r0
 8004476:	2800      	cmp	r0, #0
 8004478:	d1f5      	bne.n	8004466 <_printf_i+0x17e>
 800447a:	e7b7      	b.n	80043ec <_printf_i+0x104>
 800447c:	6808      	ldr	r0, [r1, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004484:	6949      	ldr	r1, [r1, #20]
 8004486:	d004      	beq.n	8004492 <_printf_i+0x1aa>
 8004488:	1d10      	adds	r0, r2, #4
 800448a:	6018      	str	r0, [r3, #0]
 800448c:	6813      	ldr	r3, [r2, #0]
 800448e:	6019      	str	r1, [r3, #0]
 8004490:	e007      	b.n	80044a2 <_printf_i+0x1ba>
 8004492:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004496:	f102 0004 	add.w	r0, r2, #4
 800449a:	6018      	str	r0, [r3, #0]
 800449c:	6813      	ldr	r3, [r2, #0]
 800449e:	d0f6      	beq.n	800448e <_printf_i+0x1a6>
 80044a0:	8019      	strh	r1, [r3, #0]
 80044a2:	2300      	movs	r3, #0
 80044a4:	4675      	mov	r5, lr
 80044a6:	6123      	str	r3, [r4, #16]
 80044a8:	e7b1      	b.n	800440e <_printf_i+0x126>
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	1d11      	adds	r1, r2, #4
 80044ae:	6019      	str	r1, [r3, #0]
 80044b0:	6815      	ldr	r5, [r2, #0]
 80044b2:	2100      	movs	r1, #0
 80044b4:	6862      	ldr	r2, [r4, #4]
 80044b6:	4628      	mov	r0, r5
 80044b8:	f000 f836 	bl	8004528 <memchr>
 80044bc:	b108      	cbz	r0, 80044c2 <_printf_i+0x1da>
 80044be:	1b40      	subs	r0, r0, r5
 80044c0:	6060      	str	r0, [r4, #4]
 80044c2:	6863      	ldr	r3, [r4, #4]
 80044c4:	6123      	str	r3, [r4, #16]
 80044c6:	2300      	movs	r3, #0
 80044c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044cc:	e79f      	b.n	800440e <_printf_i+0x126>
 80044ce:	6923      	ldr	r3, [r4, #16]
 80044d0:	462a      	mov	r2, r5
 80044d2:	4639      	mov	r1, r7
 80044d4:	4630      	mov	r0, r6
 80044d6:	47c0      	blx	r8
 80044d8:	3001      	adds	r0, #1
 80044da:	d0a2      	beq.n	8004422 <_printf_i+0x13a>
 80044dc:	6823      	ldr	r3, [r4, #0]
 80044de:	079b      	lsls	r3, r3, #30
 80044e0:	d507      	bpl.n	80044f2 <_printf_i+0x20a>
 80044e2:	2500      	movs	r5, #0
 80044e4:	f104 0919 	add.w	r9, r4, #25
 80044e8:	68e3      	ldr	r3, [r4, #12]
 80044ea:	9a03      	ldr	r2, [sp, #12]
 80044ec:	1a9b      	subs	r3, r3, r2
 80044ee:	429d      	cmp	r5, r3
 80044f0:	db05      	blt.n	80044fe <_printf_i+0x216>
 80044f2:	68e0      	ldr	r0, [r4, #12]
 80044f4:	9b03      	ldr	r3, [sp, #12]
 80044f6:	4298      	cmp	r0, r3
 80044f8:	bfb8      	it	lt
 80044fa:	4618      	movlt	r0, r3
 80044fc:	e793      	b.n	8004426 <_printf_i+0x13e>
 80044fe:	2301      	movs	r3, #1
 8004500:	464a      	mov	r2, r9
 8004502:	4639      	mov	r1, r7
 8004504:	4630      	mov	r0, r6
 8004506:	47c0      	blx	r8
 8004508:	3001      	adds	r0, #1
 800450a:	d08a      	beq.n	8004422 <_printf_i+0x13a>
 800450c:	3501      	adds	r5, #1
 800450e:	e7eb      	b.n	80044e8 <_printf_i+0x200>
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1a7      	bne.n	8004464 <_printf_i+0x17c>
 8004514:	780b      	ldrb	r3, [r1, #0]
 8004516:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800451a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800451e:	e765      	b.n	80043ec <_printf_i+0x104>
 8004520:	080049fc 	.word	0x080049fc
 8004524:	080049eb 	.word	0x080049eb

08004528 <memchr>:
 8004528:	b510      	push	{r4, lr}
 800452a:	b2c9      	uxtb	r1, r1
 800452c:	4402      	add	r2, r0
 800452e:	4290      	cmp	r0, r2
 8004530:	4603      	mov	r3, r0
 8004532:	d101      	bne.n	8004538 <memchr+0x10>
 8004534:	2000      	movs	r0, #0
 8004536:	bd10      	pop	{r4, pc}
 8004538:	781c      	ldrb	r4, [r3, #0]
 800453a:	3001      	adds	r0, #1
 800453c:	428c      	cmp	r4, r1
 800453e:	d1f6      	bne.n	800452e <memchr+0x6>
 8004540:	4618      	mov	r0, r3
 8004542:	bd10      	pop	{r4, pc}

08004544 <memcpy>:
 8004544:	b510      	push	{r4, lr}
 8004546:	1e43      	subs	r3, r0, #1
 8004548:	440a      	add	r2, r1
 800454a:	4291      	cmp	r1, r2
 800454c:	d100      	bne.n	8004550 <memcpy+0xc>
 800454e:	bd10      	pop	{r4, pc}
 8004550:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004554:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004558:	e7f7      	b.n	800454a <memcpy+0x6>

0800455a <memmove>:
 800455a:	4288      	cmp	r0, r1
 800455c:	b510      	push	{r4, lr}
 800455e:	eb01 0302 	add.w	r3, r1, r2
 8004562:	d803      	bhi.n	800456c <memmove+0x12>
 8004564:	1e42      	subs	r2, r0, #1
 8004566:	4299      	cmp	r1, r3
 8004568:	d10c      	bne.n	8004584 <memmove+0x2a>
 800456a:	bd10      	pop	{r4, pc}
 800456c:	4298      	cmp	r0, r3
 800456e:	d2f9      	bcs.n	8004564 <memmove+0xa>
 8004570:	1881      	adds	r1, r0, r2
 8004572:	1ad2      	subs	r2, r2, r3
 8004574:	42d3      	cmn	r3, r2
 8004576:	d100      	bne.n	800457a <memmove+0x20>
 8004578:	bd10      	pop	{r4, pc}
 800457a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800457e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004582:	e7f7      	b.n	8004574 <memmove+0x1a>
 8004584:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004588:	f802 4f01 	strb.w	r4, [r2, #1]!
 800458c:	e7eb      	b.n	8004566 <memmove+0xc>
	...

08004590 <_free_r>:
 8004590:	b538      	push	{r3, r4, r5, lr}
 8004592:	4605      	mov	r5, r0
 8004594:	2900      	cmp	r1, #0
 8004596:	d043      	beq.n	8004620 <_free_r+0x90>
 8004598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800459c:	1f0c      	subs	r4, r1, #4
 800459e:	2b00      	cmp	r3, #0
 80045a0:	bfb8      	it	lt
 80045a2:	18e4      	addlt	r4, r4, r3
 80045a4:	f000 f8d4 	bl	8004750 <__malloc_lock>
 80045a8:	4a1e      	ldr	r2, [pc, #120]	; (8004624 <_free_r+0x94>)
 80045aa:	6813      	ldr	r3, [r2, #0]
 80045ac:	4610      	mov	r0, r2
 80045ae:	b933      	cbnz	r3, 80045be <_free_r+0x2e>
 80045b0:	6063      	str	r3, [r4, #4]
 80045b2:	6014      	str	r4, [r2, #0]
 80045b4:	4628      	mov	r0, r5
 80045b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045ba:	f000 b8ca 	b.w	8004752 <__malloc_unlock>
 80045be:	42a3      	cmp	r3, r4
 80045c0:	d90b      	bls.n	80045da <_free_r+0x4a>
 80045c2:	6821      	ldr	r1, [r4, #0]
 80045c4:	1862      	adds	r2, r4, r1
 80045c6:	4293      	cmp	r3, r2
 80045c8:	bf01      	itttt	eq
 80045ca:	681a      	ldreq	r2, [r3, #0]
 80045cc:	685b      	ldreq	r3, [r3, #4]
 80045ce:	1852      	addeq	r2, r2, r1
 80045d0:	6022      	streq	r2, [r4, #0]
 80045d2:	6063      	str	r3, [r4, #4]
 80045d4:	6004      	str	r4, [r0, #0]
 80045d6:	e7ed      	b.n	80045b4 <_free_r+0x24>
 80045d8:	4613      	mov	r3, r2
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	b10a      	cbz	r2, 80045e2 <_free_r+0x52>
 80045de:	42a2      	cmp	r2, r4
 80045e0:	d9fa      	bls.n	80045d8 <_free_r+0x48>
 80045e2:	6819      	ldr	r1, [r3, #0]
 80045e4:	1858      	adds	r0, r3, r1
 80045e6:	42a0      	cmp	r0, r4
 80045e8:	d10b      	bne.n	8004602 <_free_r+0x72>
 80045ea:	6820      	ldr	r0, [r4, #0]
 80045ec:	4401      	add	r1, r0
 80045ee:	1858      	adds	r0, r3, r1
 80045f0:	4282      	cmp	r2, r0
 80045f2:	6019      	str	r1, [r3, #0]
 80045f4:	d1de      	bne.n	80045b4 <_free_r+0x24>
 80045f6:	6810      	ldr	r0, [r2, #0]
 80045f8:	6852      	ldr	r2, [r2, #4]
 80045fa:	4401      	add	r1, r0
 80045fc:	6019      	str	r1, [r3, #0]
 80045fe:	605a      	str	r2, [r3, #4]
 8004600:	e7d8      	b.n	80045b4 <_free_r+0x24>
 8004602:	d902      	bls.n	800460a <_free_r+0x7a>
 8004604:	230c      	movs	r3, #12
 8004606:	602b      	str	r3, [r5, #0]
 8004608:	e7d4      	b.n	80045b4 <_free_r+0x24>
 800460a:	6820      	ldr	r0, [r4, #0]
 800460c:	1821      	adds	r1, r4, r0
 800460e:	428a      	cmp	r2, r1
 8004610:	bf01      	itttt	eq
 8004612:	6811      	ldreq	r1, [r2, #0]
 8004614:	6852      	ldreq	r2, [r2, #4]
 8004616:	1809      	addeq	r1, r1, r0
 8004618:	6021      	streq	r1, [r4, #0]
 800461a:	6062      	str	r2, [r4, #4]
 800461c:	605c      	str	r4, [r3, #4]
 800461e:	e7c9      	b.n	80045b4 <_free_r+0x24>
 8004620:	bd38      	pop	{r3, r4, r5, pc}
 8004622:	bf00      	nop
 8004624:	20000090 	.word	0x20000090

08004628 <_malloc_r>:
 8004628:	b570      	push	{r4, r5, r6, lr}
 800462a:	1ccd      	adds	r5, r1, #3
 800462c:	f025 0503 	bic.w	r5, r5, #3
 8004630:	3508      	adds	r5, #8
 8004632:	2d0c      	cmp	r5, #12
 8004634:	bf38      	it	cc
 8004636:	250c      	movcc	r5, #12
 8004638:	2d00      	cmp	r5, #0
 800463a:	4606      	mov	r6, r0
 800463c:	db01      	blt.n	8004642 <_malloc_r+0x1a>
 800463e:	42a9      	cmp	r1, r5
 8004640:	d903      	bls.n	800464a <_malloc_r+0x22>
 8004642:	230c      	movs	r3, #12
 8004644:	6033      	str	r3, [r6, #0]
 8004646:	2000      	movs	r0, #0
 8004648:	bd70      	pop	{r4, r5, r6, pc}
 800464a:	f000 f881 	bl	8004750 <__malloc_lock>
 800464e:	4a23      	ldr	r2, [pc, #140]	; (80046dc <_malloc_r+0xb4>)
 8004650:	6814      	ldr	r4, [r2, #0]
 8004652:	4621      	mov	r1, r4
 8004654:	b991      	cbnz	r1, 800467c <_malloc_r+0x54>
 8004656:	4c22      	ldr	r4, [pc, #136]	; (80046e0 <_malloc_r+0xb8>)
 8004658:	6823      	ldr	r3, [r4, #0]
 800465a:	b91b      	cbnz	r3, 8004664 <_malloc_r+0x3c>
 800465c:	4630      	mov	r0, r6
 800465e:	f000 f867 	bl	8004730 <_sbrk_r>
 8004662:	6020      	str	r0, [r4, #0]
 8004664:	4629      	mov	r1, r5
 8004666:	4630      	mov	r0, r6
 8004668:	f000 f862 	bl	8004730 <_sbrk_r>
 800466c:	1c43      	adds	r3, r0, #1
 800466e:	d126      	bne.n	80046be <_malloc_r+0x96>
 8004670:	230c      	movs	r3, #12
 8004672:	4630      	mov	r0, r6
 8004674:	6033      	str	r3, [r6, #0]
 8004676:	f000 f86c 	bl	8004752 <__malloc_unlock>
 800467a:	e7e4      	b.n	8004646 <_malloc_r+0x1e>
 800467c:	680b      	ldr	r3, [r1, #0]
 800467e:	1b5b      	subs	r3, r3, r5
 8004680:	d41a      	bmi.n	80046b8 <_malloc_r+0x90>
 8004682:	2b0b      	cmp	r3, #11
 8004684:	d90f      	bls.n	80046a6 <_malloc_r+0x7e>
 8004686:	600b      	str	r3, [r1, #0]
 8004688:	18cc      	adds	r4, r1, r3
 800468a:	50cd      	str	r5, [r1, r3]
 800468c:	4630      	mov	r0, r6
 800468e:	f000 f860 	bl	8004752 <__malloc_unlock>
 8004692:	f104 000b 	add.w	r0, r4, #11
 8004696:	1d23      	adds	r3, r4, #4
 8004698:	f020 0007 	bic.w	r0, r0, #7
 800469c:	1ac3      	subs	r3, r0, r3
 800469e:	d01b      	beq.n	80046d8 <_malloc_r+0xb0>
 80046a0:	425a      	negs	r2, r3
 80046a2:	50e2      	str	r2, [r4, r3]
 80046a4:	bd70      	pop	{r4, r5, r6, pc}
 80046a6:	428c      	cmp	r4, r1
 80046a8:	bf0b      	itete	eq
 80046aa:	6863      	ldreq	r3, [r4, #4]
 80046ac:	684b      	ldrne	r3, [r1, #4]
 80046ae:	6013      	streq	r3, [r2, #0]
 80046b0:	6063      	strne	r3, [r4, #4]
 80046b2:	bf18      	it	ne
 80046b4:	460c      	movne	r4, r1
 80046b6:	e7e9      	b.n	800468c <_malloc_r+0x64>
 80046b8:	460c      	mov	r4, r1
 80046ba:	6849      	ldr	r1, [r1, #4]
 80046bc:	e7ca      	b.n	8004654 <_malloc_r+0x2c>
 80046be:	1cc4      	adds	r4, r0, #3
 80046c0:	f024 0403 	bic.w	r4, r4, #3
 80046c4:	42a0      	cmp	r0, r4
 80046c6:	d005      	beq.n	80046d4 <_malloc_r+0xac>
 80046c8:	1a21      	subs	r1, r4, r0
 80046ca:	4630      	mov	r0, r6
 80046cc:	f000 f830 	bl	8004730 <_sbrk_r>
 80046d0:	3001      	adds	r0, #1
 80046d2:	d0cd      	beq.n	8004670 <_malloc_r+0x48>
 80046d4:	6025      	str	r5, [r4, #0]
 80046d6:	e7d9      	b.n	800468c <_malloc_r+0x64>
 80046d8:	bd70      	pop	{r4, r5, r6, pc}
 80046da:	bf00      	nop
 80046dc:	20000090 	.word	0x20000090
 80046e0:	20000094 	.word	0x20000094

080046e4 <_realloc_r>:
 80046e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e6:	4607      	mov	r7, r0
 80046e8:	4614      	mov	r4, r2
 80046ea:	460e      	mov	r6, r1
 80046ec:	b921      	cbnz	r1, 80046f8 <_realloc_r+0x14>
 80046ee:	4611      	mov	r1, r2
 80046f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80046f4:	f7ff bf98 	b.w	8004628 <_malloc_r>
 80046f8:	b922      	cbnz	r2, 8004704 <_realloc_r+0x20>
 80046fa:	f7ff ff49 	bl	8004590 <_free_r>
 80046fe:	4625      	mov	r5, r4
 8004700:	4628      	mov	r0, r5
 8004702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004704:	f000 f826 	bl	8004754 <_malloc_usable_size_r>
 8004708:	4284      	cmp	r4, r0
 800470a:	d90f      	bls.n	800472c <_realloc_r+0x48>
 800470c:	4621      	mov	r1, r4
 800470e:	4638      	mov	r0, r7
 8004710:	f7ff ff8a 	bl	8004628 <_malloc_r>
 8004714:	4605      	mov	r5, r0
 8004716:	2800      	cmp	r0, #0
 8004718:	d0f2      	beq.n	8004700 <_realloc_r+0x1c>
 800471a:	4631      	mov	r1, r6
 800471c:	4622      	mov	r2, r4
 800471e:	f7ff ff11 	bl	8004544 <memcpy>
 8004722:	4631      	mov	r1, r6
 8004724:	4638      	mov	r0, r7
 8004726:	f7ff ff33 	bl	8004590 <_free_r>
 800472a:	e7e9      	b.n	8004700 <_realloc_r+0x1c>
 800472c:	4635      	mov	r5, r6
 800472e:	e7e7      	b.n	8004700 <_realloc_r+0x1c>

08004730 <_sbrk_r>:
 8004730:	b538      	push	{r3, r4, r5, lr}
 8004732:	2300      	movs	r3, #0
 8004734:	4c05      	ldr	r4, [pc, #20]	; (800474c <_sbrk_r+0x1c>)
 8004736:	4605      	mov	r5, r0
 8004738:	4608      	mov	r0, r1
 800473a:	6023      	str	r3, [r4, #0]
 800473c:	f7ff fb14 	bl	8003d68 <_sbrk>
 8004740:	1c43      	adds	r3, r0, #1
 8004742:	d102      	bne.n	800474a <_sbrk_r+0x1a>
 8004744:	6823      	ldr	r3, [r4, #0]
 8004746:	b103      	cbz	r3, 800474a <_sbrk_r+0x1a>
 8004748:	602b      	str	r3, [r5, #0]
 800474a:	bd38      	pop	{r3, r4, r5, pc}
 800474c:	20000d90 	.word	0x20000d90

08004750 <__malloc_lock>:
 8004750:	4770      	bx	lr

08004752 <__malloc_unlock>:
 8004752:	4770      	bx	lr

08004754 <_malloc_usable_size_r>:
 8004754:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004758:	2800      	cmp	r0, #0
 800475a:	f1a0 0004 	sub.w	r0, r0, #4
 800475e:	bfbc      	itt	lt
 8004760:	580b      	ldrlt	r3, [r1, r0]
 8004762:	18c0      	addlt	r0, r0, r3
 8004764:	4770      	bx	lr
	...

08004768 <floor>:
 8004768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800476c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8004770:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8004774:	2e13      	cmp	r6, #19
 8004776:	4607      	mov	r7, r0
 8004778:	460b      	mov	r3, r1
 800477a:	460c      	mov	r4, r1
 800477c:	4605      	mov	r5, r0
 800477e:	dc35      	bgt.n	80047ec <floor+0x84>
 8004780:	2e00      	cmp	r6, #0
 8004782:	da16      	bge.n	80047b2 <floor+0x4a>
 8004784:	a336      	add	r3, pc, #216	; (adr r3, 8004860 <floor+0xf8>)
 8004786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478a:	f7fb fcef 	bl	800016c <__adddf3>
 800478e:	2200      	movs	r2, #0
 8004790:	2300      	movs	r3, #0
 8004792:	f7fc f92d 	bl	80009f0 <__aeabi_dcmpgt>
 8004796:	b148      	cbz	r0, 80047ac <floor+0x44>
 8004798:	2c00      	cmp	r4, #0
 800479a:	da5c      	bge.n	8004856 <floor+0xee>
 800479c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80047a0:	433b      	orrs	r3, r7
 80047a2:	4b31      	ldr	r3, [pc, #196]	; (8004868 <floor+0x100>)
 80047a4:	f04f 0500 	mov.w	r5, #0
 80047a8:	bf18      	it	ne
 80047aa:	461c      	movne	r4, r3
 80047ac:	4623      	mov	r3, r4
 80047ae:	462f      	mov	r7, r5
 80047b0:	e027      	b.n	8004802 <floor+0x9a>
 80047b2:	4a2e      	ldr	r2, [pc, #184]	; (800486c <floor+0x104>)
 80047b4:	fa42 f806 	asr.w	r8, r2, r6
 80047b8:	ea01 0208 	and.w	r2, r1, r8
 80047bc:	4302      	orrs	r2, r0
 80047be:	d020      	beq.n	8004802 <floor+0x9a>
 80047c0:	a327      	add	r3, pc, #156	; (adr r3, 8004860 <floor+0xf8>)
 80047c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c6:	f7fb fcd1 	bl	800016c <__adddf3>
 80047ca:	2200      	movs	r2, #0
 80047cc:	2300      	movs	r3, #0
 80047ce:	f7fc f90f 	bl	80009f0 <__aeabi_dcmpgt>
 80047d2:	2800      	cmp	r0, #0
 80047d4:	d0ea      	beq.n	80047ac <floor+0x44>
 80047d6:	2c00      	cmp	r4, #0
 80047d8:	bfbe      	ittt	lt
 80047da:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80047de:	fa43 f606 	asrlt.w	r6, r3, r6
 80047e2:	19a4      	addlt	r4, r4, r6
 80047e4:	ea24 0408 	bic.w	r4, r4, r8
 80047e8:	2500      	movs	r5, #0
 80047ea:	e7df      	b.n	80047ac <floor+0x44>
 80047ec:	2e33      	cmp	r6, #51	; 0x33
 80047ee:	dd0c      	ble.n	800480a <floor+0xa2>
 80047f0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80047f4:	d105      	bne.n	8004802 <floor+0x9a>
 80047f6:	460b      	mov	r3, r1
 80047f8:	4602      	mov	r2, r0
 80047fa:	f7fb fcb7 	bl	800016c <__adddf3>
 80047fe:	4607      	mov	r7, r0
 8004800:	460b      	mov	r3, r1
 8004802:	4638      	mov	r0, r7
 8004804:	4619      	mov	r1, r3
 8004806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800480a:	f04f 32ff 	mov.w	r2, #4294967295
 800480e:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8004812:	fa22 f808 	lsr.w	r8, r2, r8
 8004816:	ea10 0f08 	tst.w	r0, r8
 800481a:	d0f2      	beq.n	8004802 <floor+0x9a>
 800481c:	a310      	add	r3, pc, #64	; (adr r3, 8004860 <floor+0xf8>)
 800481e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004822:	f7fb fca3 	bl	800016c <__adddf3>
 8004826:	2200      	movs	r2, #0
 8004828:	2300      	movs	r3, #0
 800482a:	f7fc f8e1 	bl	80009f0 <__aeabi_dcmpgt>
 800482e:	2800      	cmp	r0, #0
 8004830:	d0bc      	beq.n	80047ac <floor+0x44>
 8004832:	2c00      	cmp	r4, #0
 8004834:	da02      	bge.n	800483c <floor+0xd4>
 8004836:	2e14      	cmp	r6, #20
 8004838:	d103      	bne.n	8004842 <floor+0xda>
 800483a:	3401      	adds	r4, #1
 800483c:	ea25 0508 	bic.w	r5, r5, r8
 8004840:	e7b4      	b.n	80047ac <floor+0x44>
 8004842:	2301      	movs	r3, #1
 8004844:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004848:	fa03 f606 	lsl.w	r6, r3, r6
 800484c:	4435      	add	r5, r6
 800484e:	42af      	cmp	r7, r5
 8004850:	bf88      	it	hi
 8004852:	18e4      	addhi	r4, r4, r3
 8004854:	e7f2      	b.n	800483c <floor+0xd4>
 8004856:	2500      	movs	r5, #0
 8004858:	462c      	mov	r4, r5
 800485a:	e7a7      	b.n	80047ac <floor+0x44>
 800485c:	f3af 8000 	nop.w
 8004860:	8800759c 	.word	0x8800759c
 8004864:	7e37e43c 	.word	0x7e37e43c
 8004868:	bff00000 	.word	0xbff00000
 800486c:	000fffff 	.word	0x000fffff

08004870 <_init>:
 8004870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004872:	bf00      	nop
 8004874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004876:	bc08      	pop	{r3}
 8004878:	469e      	mov	lr, r3
 800487a:	4770      	bx	lr

0800487c <_fini>:
 800487c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487e:	bf00      	nop
 8004880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004882:	bc08      	pop	{r3}
 8004884:	469e      	mov	lr, r3
 8004886:	4770      	bx	lr
